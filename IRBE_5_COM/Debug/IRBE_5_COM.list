
IRBE_5_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800aeb8  0800aeb8  0001aeb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b39c  0800b39c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800b39c  0800b39c  0001b39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a4  0800b3a4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a4  0800b3a4  0001b3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3a8  0800b3a8  0001b3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000204  0800b5b0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  0800b5b0  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169b7  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f57  00000000  00000000  00036beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00039b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0003af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a239  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169a9  00000000  00000000  00056461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e24c  00000000  00000000  0006ce0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f4  00000000  00000000  0010b0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aea0 	.word	0x0800aea0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800aea0 	.word	0x0800aea0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

void SX1278_hw_init(SX1278_hw_t * hw) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000f84:	2101      	movs	r1, #1
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f80d 	bl	8000fa6 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6858      	ldr	r0, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2201      	movs	r2, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f004 faf7 	bl	800558c <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <SX1278_hw_SetNSS>:

void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6958      	ldr	r0, [r3, #20]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	bf0c      	ite	eq
 8000fc0:	2301      	moveq	r3, #1
 8000fc2:	2300      	movne	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f004 fae0 	bl	800558c <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SX1278_hw_Reset>:

void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffe1 	bl	8000fa6 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f004 facb 	bl	800558c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 f856 	bl	80010a8 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6858      	ldr	r0, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	2201      	movs	r2, #1
 8001008:	4619      	mov	r1, r3
 800100a:	f004 fabf 	bl	800558c <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800100e:	2064      	movs	r0, #100	; 0x64
 8001010:	f000 f84a 	bl	80010a8 <SX1278_hw_DelayMs>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <SX1278_hw_SPICommand>:

void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001028:	2100      	movs	r1, #0
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffbb 	bl	8000fa6 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6998      	ldr	r0, [r3, #24]
 8001034:	1cf9      	adds	r1, r7, #3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	2201      	movs	r2, #1
 800103c:	f004 fff9 	bl	8006032 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001040:	bf00      	nop
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4618      	mov	r0, r3
 8001048:	f005 fad1 	bl	80065ee <HAL_SPI_GetState>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d1f7      	bne.n	8001042 <SX1278_hw_SPICommand+0x26>
		;
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <SX1278_hw_SPIReadByte>:

uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af02      	add	r7, sp, #8
 8001062:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001068:	2300      	movs	r3, #0
 800106a:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800106c:	2100      	movs	r1, #0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff99 	bl	8000fa6 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6998      	ldr	r0, [r3, #24]
 8001078:	f107 020e 	add.w	r2, r7, #14
 800107c:	f107 010f 	add.w	r1, r7, #15
 8001080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	f005 f90f 	bl	80062aa <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800108c:	bf00      	nop
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4618      	mov	r0, r3
 8001094:	f005 faab 	bl	80065ee <HAL_SPI_GetState>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d1f7      	bne.n	800108e <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800109e:	7bbb      	ldrb	r3, [r7, #14]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SX1278_hw_DelayMs>:

void SX1278_hw_DelayMs(uint32_t msec) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f002 fef5 	bl	8003ea0 <HAL_Delay>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	78fa      	ldrb	r2, [r7, #3]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffa2 	bl	800101c <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffbd 	bl	800105c <SX1278_hw_SPIReadByte>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2101      	movs	r1, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5a 	bl	8000fa6 <SX1278_hw_SetNSS>
	return tmp;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff47 	bl	8000fa6 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	4610      	mov	r0, r2
 8001128:	f7ff ff78 	bl	800101c <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	78ba      	ldrb	r2, [r7, #2]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff71 	bl	800101c <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff30 	bl	8000fa6 <SX1278_hw_SetNSS>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	461a      	mov	r2, r3
 800115a:	460b      	mov	r3, r1
 800115c:	72fb      	strb	r3, [r7, #11]
 800115e:	4613      	mov	r3, r2
 8001160:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001162:	7abb      	ldrb	r3, [r7, #10]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d929      	bls.n	80011bc <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff19 	bl	8000fa6 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	7afb      	ldrb	r3, [r7, #11]
 800117a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f7ff ff4a 	bl	800101c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001188:	2300      	movs	r3, #0
 800118a:	75fb      	strb	r3, [r7, #23]
 800118c:	e00b      	b.n	80011a6 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff ff3e 	bl	800101c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	3301      	adds	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]
 80011a6:	7dfa      	ldrb	r2, [r7, #23]
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3ef      	bcc.n	800118e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fef6 	bl	8000fa6 <SX1278_hw_SetNSS>
 80011ba:	e000      	b.n	80011be <SX1278_SPIBurstWrite+0x70>
		return;
 80011bc:	bf00      	nop
	}
}
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7919      	ldrb	r1, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	795a      	ldrb	r2, [r3, #5]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7998      	ldrb	r0, [r3, #6]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	79db      	ldrb	r3, [r3, #7]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4603      	mov	r3, r0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f805 	bl	80011f0 <SX1278_config>
			module->LoRa_BW);
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
	uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	4608      	mov	r0, r1
 80011fa:	4611      	mov	r1, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4603      	mov	r3, r0
 8001200:	70fb      	strb	r3, [r7, #3]
 8001202:	460b      	mov	r3, r1
 8001204:	70bb      	strb	r3, [r7, #2]
 8001206:	4613      	mov	r3, r2
 8001208:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f976 	bl	80014fc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001210:	200f      	movs	r0, #15
 8001212:	f7ff ff49 	bl	80010a8 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f980 	bl	800151c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
	(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	4a41      	ldr	r2, [pc, #260]	; (800132c <SX1278_config+0x13c>)
 8001226:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8001228:	2303      	movs	r3, #3
 800122a:	2106      	movs	r1, #6
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff8e 	bl	800114e <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	2109      	movs	r1, #9
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff60 	bl	80010fc <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800123c:	220b      	movs	r2, #11
 800123e:	210b      	movs	r1, #11
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff5b 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001246:	2223      	movs	r2, #35	; 0x23
 8001248:	210c      	movs	r1, #12
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff56 	bl	80010fc <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	4a37      	ldr	r2, [pc, #220]	; (8001330 <SX1278_config+0x140>)
 8001254:	5cd3      	ldrb	r3, [r2, r3]
 8001256:	2b06      	cmp	r3, #6
 8001258:	d131      	bne.n	80012be <SX1278_config+0xce>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800125a:	7e3b      	ldrb	r3, [r7, #24]
 800125c:	4a35      	ldr	r2, [pc, #212]	; (8001334 <SX1278_config+0x144>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001264:	3303      	adds	r3, #3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	211d      	movs	r1, #29
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff45 	bl	80010fc <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8001272:	787b      	ldrb	r3, [r7, #1]
 8001274:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <SX1278_config+0x140>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800127c:	3307      	adds	r3, #7
 800127e:	b2db      	uxtb	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	211e      	movs	r1, #30
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff39 	bl	80010fc <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 800128a:	2131      	movs	r1, #49	; 0x31
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff16 	bl	80010be <SX1278_SPIRead>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	f023 0307 	bic.w	r3, r3, #7
 800129c:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	f043 0305 	orr.w	r3, r3, #5
 80012a4:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	461a      	mov	r2, r3
 80012aa:	2131      	movs	r1, #49	; 0x31
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff25 	bl	80010fc <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80012b2:	220c      	movs	r2, #12
 80012b4:	2137      	movs	r1, #55	; 0x37
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff20 	bl	80010fc <SX1278_SPIWrite>
 80012bc:	e017      	b.n	80012ee <SX1278_config+0xfe>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80012be:	7e3b      	ldrb	r3, [r7, #24]
 80012c0:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <SX1278_config+0x144>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80012c8:	3302      	adds	r3, #2
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	211d      	movs	r1, #29
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff13 	bl	80010fc <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80012d6:	787b      	ldrb	r3, [r7, #1]
 80012d8:	4a15      	ldr	r2, [pc, #84]	; (8001330 <SX1278_config+0x140>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80012e0:	3307      	adds	r3, #7
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	211e      	movs	r1, #30
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff07 	bl	80010fc <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80012ee:	22ff      	movs	r2, #255	; 0xff
 80012f0:	211f      	movs	r1, #31
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff02 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80012f8:	2200      	movs	r2, #0
 80012fa:	2120      	movs	r1, #32
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fefd 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8001302:	220c      	movs	r2, #12
 8001304:	2121      	movs	r1, #33	; 0x21
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fef8 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800130c:	2201      	movs	r2, #1
 800130e:	2141      	movs	r1, #65	; 0x41
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fef3 	bl	80010fc <SX1278_SPIWrite>
	module->readBytes = 0;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f8dc 	bl	80014dc <SX1278_standby>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	0800af88 	.word	0x0800af88
 8001330:	0800af8c 	.word	0x0800af8c
 8001334:	0800af94 	.word	0x0800af94

08001338 <SX1278_RTTY_Config>:

void SX1278_RTTY_Config(SX1278_t * module){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	SX1278_FSK_Config(module); // set base parameters
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f895 	bl	8001470 <SX1278_FSK_Config>
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f8d8 	bl	80014fc <SX1278_sleep>

	SX1278_SPIWrite(module, LR_RegPaConfig, 0b11110000);//0x87);	//Normal and RX
 800134c:	22f0      	movs	r2, #240	; 0xf0
 800134e:	2109      	movs	r1, #9
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fed3 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);
 8001356:	2284      	movs	r2, #132	; 0x84
 8001358:	214d      	movs	r1, #77	; 0x4d
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fece 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 8001360:	2241      	movs	r2, #65	; 0x41
 8001362:	2140      	movs	r1, #64	; 0x40
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fec9 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, 8); //Payload Length 8 bytes
 800136a:	2208      	movs	r2, #8
 800136c:	2132      	movs	r1, #50	; 0x32
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fec4 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFifoThresh, 8 - 1);     //Fixed length, packetformat = 0
 8001374:	2207      	movs	r2, #7
 8001376:	2135      	movs	r1, #53	; 0x35
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff febf 	bl	80010fc <SX1278_SPIWrite>

	SX1278_SPIWrite(module, RegFdevLsb, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2105      	movs	r1, #5
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff feba 	bl	80010fc <SX1278_SPIWrite>
	SX1278_standby(module); //Entry standby mode
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f8a7 	bl	80014dc <SX1278_standby>
	SX1278_hw_DelayMs(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fe8a 	bl	80010a8 <SX1278_hw_DelayMs>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <SX1278_RTTY_Stop>:

void SX1278_RTTY_Stop(SX1278_t * module){
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	//SX1278_SPIWrite(module, LR_RegOpMode, 0b1);
	SX1278_standby(module);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f899 	bl	80014dc <SX1278_standby>
	uint8_t ret = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 80013ae:	213e      	movs	r1, #62	; 0x3e
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fe84 	bl	80010be <SX1278_SPIRead>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db00      	blt.n	80013c4 <SX1278_RTTY_Stop+0x28>
		ret = SX1278_SPIRead(module, 0x3e);
 80013c2:	e7f4      	b.n	80013ae <SX1278_RTTY_Stop+0x12>
			break;
 80013c4:	bf00      	nop
		}
	}
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <SX1278_RTTY_WriteLow>:

void SX1278_RTTY_WriteLow(SX1278_t * module){
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffe0 	bl	800139c <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 0); //  LSB
 80013dc:	2200      	movs	r2, #0
 80013de:	2108      	movs	r1, #8
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fe8b 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 80013e6:	220a      	movs	r2, #10
 80013e8:	2101      	movs	r1, #1
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fe86 	bl	80010fc <SX1278_SPIWrite>

	uint8_t ret = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 80013f4:	213e      	movs	r1, #62	; 0x3e
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fe61 	bl	80010be <SX1278_SPIRead>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 8001400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db00      	blt.n	800140a <SX1278_RTTY_WriteLow+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 8001408:	e7f4      	b.n	80013f4 <SX1278_RTTY_WriteLow+0x26>
			break;
 800140a:	bf00      	nop
		}
	}


	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 800140c:	220b      	movs	r2, #11
 800140e:	2101      	movs	r1, #1
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fe73 	bl	80010fc <SX1278_SPIWrite>

}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <SX1278_RTTY_WriteHigh>:

void SX1278_RTTY_WriteHigh(SX1278_t * module){
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffb8 	bl	800139c <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 10); //  HSB
 800142c:	220a      	movs	r2, #10
 800142e:	2108      	movs	r1, #8
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fe63 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 8001436:	220a      	movs	r2, #10
 8001438:	2101      	movs	r1, #1
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fe5e 	bl	80010fc <SX1278_SPIWrite>

	uint8_t ret = 1;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 8001444:	213e      	movs	r1, #62	; 0x3e
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fe39 	bl	80010be <SX1278_SPIRead>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 8001450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db00      	blt.n	800145a <SX1278_RTTY_WriteHigh+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 8001458:	e7f4      	b.n	8001444 <SX1278_RTTY_WriteHigh+0x26>
			break;
 800145a:	bf00      	nop
		}
	}
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 800145c:	220b      	movs	r2, #11
 800145e:	2101      	movs	r1, #1
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fe4b 	bl	80010fc <SX1278_SPIWrite>
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <SX1278_FSK_Config>:

void SX1278_FSK_Config(SX1278_t * module) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f83f 	bl	80014fc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800147e:	200f      	movs	r0, #15
 8001480:	f7ff fe12 	bl	80010a8 <SX1278_hw_DelayMs>

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8001484:	2303      	movs	r3, #3
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <SX1278_FSK_Config+0x68>)
 8001488:	2106      	movs	r1, #6
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fe5f 	bl	800114e <SX1278_SPIBurstWrite>
	(uint8_t*) SX1278_Frequency[SX1278_433MHZ], 3); //setting  frequency parameter 434 MHz

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	2109      	movs	r1, #9
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fe31 	bl	80010fc <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800149a:	220b      	movs	r2, #11
 800149c:	210b      	movs	r1, #11
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fe2c 	bl	80010fc <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80014a4:	2223      	movs	r2, #35	; 0x23
 80014a6:	210c      	movs	r1, #12
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fe27 	bl	80010fc <SX1278_SPIWrite>

	//SX1278_SPIWrite(module, 0x1f, 0x00);		//disable preamble detect
	//SX1278_SPIWrite(module, 0x27, 0b10000000);		//disable sync word

	SX1278_SPIWrite(module, 0x30, 0b1000);     //Fixed length, packetformat = 0
 80014ae:	2208      	movs	r2, #8
 80014b0:	2130      	movs	r1, #48	; 0x30
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fe22 	bl	80010fc <SX1278_SPIWrite>
	// set datarate
	//datarate 9c40 = 800bps

	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80014b8:	2201      	movs	r2, #1
 80014ba:	2141      	movs	r1, #65	; 0x41
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fe1d 	bl	80010fc <SX1278_SPIWrite>
	module->readBytes = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f806 	bl	80014dc <SX1278_standby>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800af88 	.word	0x0800af88

080014dc <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80014e4:	2209      	movs	r2, #9
 80014e6:	2101      	movs	r1, #1
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fe07 	bl	80010fc <SX1278_SPIWrite>
	module->status = STANDBY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	725a      	strb	r2, [r3, #9]
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001504:	2208      	movs	r2, #8
 8001506:	2101      	movs	r1, #1
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fdf7 	bl	80010fc <SX1278_SPIWrite>
	module->status = SLEEP;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	725a      	strb	r2, [r3, #9]
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001524:	2288      	movs	r2, #136	; 0x88
 8001526:	2101      	movs	r1, #1
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fde7 	bl	80010fc <SX1278_SPIWrite>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800153e:	22ff      	movs	r2, #255	; 0xff
 8001540:	2112      	movs	r1, #18
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fdda 	bl	80010fc <SX1278_SPIWrite>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <SX1278_FSK_EntryRx>:

int SX1278_FSK_EntryRx(SX1278_t * module, uint8_t length) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff84 	bl	8001470 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001568:	2284      	movs	r2, #132	; 0x84
 800156a:	214d      	movs	r1, #77	; 0x4d
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fdc5 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001572:	2201      	movs	r2, #1
 8001574:	2140      	movs	r1, #64	; 0x40
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fdc0 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x05, 0x52); // 5kHz freq deviation
 800157c:	2252      	movs	r2, #82	; 0x52
 800157e:	2105      	movs	r1, #5
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fdbb 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x32, length); //Payload Length 8 bytes
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	461a      	mov	r2, r3
 800158a:	2132      	movs	r1, #50	; 0x32
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fdb5 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1101);	//Mode//Low Frequency Mode
 8001592:	220d      	movs	r2, #13
 8001594:	2101      	movs	r1, #1
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fdb0 	bl	80010fc <SX1278_SPIWrite>
	module->readBytes = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <SX1278_FSK_EntryTx>:

int SX1278_FSK_EntryTx(SX1278_t * module, uint8_t length) {
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff55 	bl	8001470 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);//0x87);	//Normal and RX
 80015c6:	2284      	movs	r2, #132	; 0x84
 80015c8:	214d      	movs	r1, #77	; 0x4d
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fd96 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 80015d0:	2241      	movs	r2, #65	; 0x41
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fd91 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFdevLsb, 0x52); // 5kHz freq deviation
 80015da:	2252      	movs	r2, #82	; 0x52
 80015dc:	2105      	movs	r1, #5
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fd8c 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, length); //Payload Length 8 bytes
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	461a      	mov	r2, r3
 80015e8:	2132      	movs	r1, #50	; 0x32
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fd86 	bl	80010fc <SX1278_SPIWrite>
	//	SX1278_SPIWrite(module, RegBitRateLsb, 0x2B);	// 1200 bps
	//	SX1278_SPIWrite(module, RegBitRateMsb, 0x68);
	SX1278_SPIWrite(module, RegFifoThresh, length - 1);     //Fixed length, packetformat = 0
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	2135      	movs	r1, #53	; 0x35
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fd7e 	bl	80010fc <SX1278_SPIWrite>


	module->readBytes = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	SX1278_hw_DelayMs(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fd4d 	bl	80010a8 <SX1278_hw_DelayMs>
	return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	460b      	mov	r3, r1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	7afa      	ldrb	r2, [r7, #11]
 800162a:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fdc9 	bl	80011c4 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001632:	2284      	movs	r2, #132	; 0x84
 8001634:	214d      	movs	r1, #77	; 0x4d
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fd60 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	2124      	movs	r1, #36	; 0x24
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fd5b 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001646:	2201      	movs	r2, #1
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff fd56 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001650:	223f      	movs	r2, #63	; 0x3f
 8001652:	2111      	movs	r1, #17
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fd51 	bl	80010fc <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff ff6b 	bl	8001536 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	461a      	mov	r2, r3
 8001664:	2122      	movs	r1, #34	; 0x22
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7ff fd48 	bl	80010fc <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 800166c:	210f      	movs	r1, #15
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f7ff fd25 	bl	80010be <SX1278_SPIRead>
 8001674:	4603      	mov	r3, r0
 8001676:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	461a      	mov	r2, r3
 800167c:	210d      	movs	r1, #13
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fd3c 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001684:	228d      	movs	r2, #141	; 0x8d
 8001686:	2101      	movs	r1, #1
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff fd37 	bl	80010fc <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001696:	2118      	movs	r1, #24
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff fd10 	bl	80010be <SX1278_SPIRead>
 800169e:	4603      	mov	r3, r0
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d104      	bne.n	80016b2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2203      	movs	r2, #3
 80016ac:	725a      	strb	r2, [r3, #9]
			return 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e013      	b.n	80016da <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc86 	bl	8000fd4 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff fd7b 	bl	80011c4 <SX1278_defaultConfig>
			return 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e003      	b.n	80016da <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f7ff fce8 	bl	80010a8 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80016d8:	e7dd      	b.n	8001696 <SX1278_LoRaEntryRx+0x7e>
	}
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <SX1278_FSK_TxPacket>:
			return 0;
		}
	}
}

int SX1278_FSK_TxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]
	uint32_t tickstart = HAL_GetTick();
 80016f8:	f002 fbc6 	bl	8003e88 <HAL_GetTick>
 80016fc:	6178      	str	r0, [r7, #20]
	uint32_t wait = timeout;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	61bb      	str	r3, [r7, #24]
	uint8_t temp = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	74fb      	strb	r3, [r7, #19]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <SX1278_FSK_TxPacket+0x36>
		wait += (uint32_t)(uwTickFreq);
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <SX1278_FSK_TxPacket+0x9c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	4413      	add	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
	}

	SX1278_FSK_EntryTx(module, length);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4619      	mov	r1, r3
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff ff45 	bl	80015ae <SX1278_FSK_EntryTx>

	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	2100      	movs	r1, #0
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fd0f 	bl	800114e <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);	//Mode//Low Frequency Mode
 8001730:	220b      	movs	r2, #11
 8001732:	2101      	movs	r1, #1
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7ff fce1 	bl	80010fc <SX1278_SPIWrite>

	while(!gotResponse){
 800173a:	e014      	b.n	8001766 <SX1278_FSK_TxPacket+0x82>
	    temp = SX1278_SPIRead(module, RegIrqFlags2); // check if fifo sent is set
 800173c:	213f      	movs	r1, #63	; 0x3f
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fcbd 	bl	80010be <SX1278_SPIRead>
 8001744:	4603      	mov	r3, r0
 8001746:	74fb      	strb	r3, [r7, #19]
	    if(temp & 0b1000){
 8001748:	7cfb      	ldrb	r3, [r7, #19]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SX1278_FSK_TxPacket+0x72>
	    	gotResponse =  1;
 8001752:	2301      	movs	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]
	    }
		if((HAL_GetTick() - tickstart) >= wait){
 8001756:	f002 fb97 	bl	8003e88 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	429a      	cmp	r2, r3
 8001764:	d903      	bls.n	800176e <SX1278_FSK_TxPacket+0x8a>
	while(!gotResponse){
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0e7      	beq.n	800173c <SX1278_FSK_TxPacket+0x58>
 800176c:	e000      	b.n	8001770 <SX1278_FSK_TxPacket+0x8c>
			break;								// timeout happened
 800176e:	bf00      	nop
		}
	}
	SX1278_standby(module);
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff feb3 	bl	80014dc <SX1278_standby>
	return gotResponse;
 8001776:	7ffb      	ldrb	r3, [r7, #31]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000030 	.word	0x20000030

08001784 <SX1278_FSK_RxPacket>:

int SX1278_FSK_RxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b08b      	sub	sp, #44	; 0x2c
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t tickstart = HAL_GetTick();
 800179a:	f002 fb75 	bl	8003e88 <HAL_GetTick>
 800179e:	61b8      	str	r0, [r7, #24]
	uint32_t wait = timeout;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	623b      	str	r3, [r7, #32]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017aa:	d005      	beq.n	80017b8 <SX1278_FSK_RxPacket+0x34>
		wait += (uint32_t)(uwTickFreq);
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <SX1278_FSK_RxPacket+0xb8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	4413      	add	r3, r2
 80017b6:	623b      	str	r3, [r7, #32]
	}

	uint8_t temp = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	75fb      	strb	r3, [r7, #23]

	while(!gotResponse){
 80017bc:	e031      	b.n	8001822 <SX1278_FSK_RxPacket+0x9e>
		temp = SX1278_SPIRead(module, 0x3f);
 80017be:	213f      	movs	r1, #63	; 0x3f
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fc7c 	bl	80010be <SX1278_SPIRead>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]

	    if((temp & 0b100) && temp != 255){
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01e      	beq.n	8001812 <SX1278_FSK_RxPacket+0x8e>
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d01b      	beq.n	8001812 <SX1278_FSK_RxPacket+0x8e>
	    	gotResponse = 1;
 80017da:	2301      	movs	r3, #1
 80017dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    	for(uint8_t i = 0; i < length; i++){
 80017e0:	2300      	movs	r3, #0
 80017e2:	77fb      	strb	r3, [r7, #31]
 80017e4:	e00b      	b.n	80017fe <SX1278_FSK_RxPacket+0x7a>
	    		txBuffer[i] = SX1278_SPIRead(module, RegFIFO);
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	18d4      	adds	r4, r2, r3
 80017ec:	2100      	movs	r1, #0
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f7ff fc65 	bl	80010be <SX1278_SPIRead>
 80017f4:	4603      	mov	r3, r0
 80017f6:	7023      	strb	r3, [r4, #0]
	    	for(uint8_t i = 0; i < length; i++){
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
 80017fa:	3301      	adds	r3, #1
 80017fc:	77fb      	strb	r3, [r7, #31]
 80017fe:	7ffa      	ldrb	r2, [r7, #31]
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	429a      	cmp	r2, r3
 8001804:	d3ef      	bcc.n	80017e6 <SX1278_FSK_RxPacket+0x62>
	    	}
	    	temp = SX1278_SPIRead(module, RegIrqFlags2);
 8001806:	213f      	movs	r1, #63	; 0x3f
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f7ff fc58 	bl	80010be <SX1278_SPIRead>
 800180e:	4603      	mov	r3, r0
 8001810:	75fb      	strb	r3, [r7, #23]

	    }

		if((HAL_GetTick() - tickstart) >= wait){
 8001812:	f002 fb39 	bl	8003e88 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	429a      	cmp	r2, r3
 8001820:	d904      	bls.n	800182c <SX1278_FSK_RxPacket+0xa8>
	while(!gotResponse){
 8001822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0c9      	beq.n	80017be <SX1278_FSK_RxPacket+0x3a>
 800182a:	e000      	b.n	800182e <SX1278_FSK_RxPacket+0xaa>
			break;								// timeout happened
 800182c:	bf00      	nop
		}
	}

	return gotResponse;
 800182e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001832:	4618      	mov	r0, r3
 8001834:	372c      	adds	r7, #44	; 0x2c
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000030 	.word	0x20000030

08001840 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4603      	mov	r3, r0
 8001850:	70fb      	strb	r3, [r7, #3]
 8001852:	460b      	mov	r3, r1
 8001854:	70bb      	strb	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb8c 	bl	8000f7c <SX1278_hw_init>
	module->frequency = frequency;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	711a      	strb	r2, [r3, #4]
	module->power = power;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	78ba      	ldrb	r2, [r7, #2]
 800186e:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	787a      	ldrb	r2, [r7, #1]
 8001874:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7c3a      	ldrb	r2, [r7, #16]
 800187a:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7d3a      	ldrb	r2, [r7, #20]
 8001880:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fc9e 	bl	80011c4 <SX1278_defaultConfig>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <GPS_Receive>:
size_t write_to_buffer(char *buffer, size_t size, uint8_t data){
	return snprintf(buffer, size++, "%x,", data);
}

/* Pass uint8_t of received data */
void GPS_Receive(uint8_t data){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
	if(data == '$'){
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b24      	cmp	r3, #36	; 0x24
 800189e:	d103      	bne.n	80018a8 <GPS_Receive+0x18>
		gpsTempLen = 0;
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <GPS_Receive+0x68>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
		gpsTempLen = 255;
	}else if(gpsTempLen != 255){
		gpsTemp[gpsTempLen] = data;
		gpsTempLen++;
	}
}
 80018a6:	e023      	b.n	80018f0 <GPS_Receive+0x60>
	}else if((data == 13 || data == 10) && gpsTempLen != 255){ // looks for new_line or vertical tab
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b0d      	cmp	r3, #13
 80018ac:	d002      	beq.n	80018b4 <GPS_Receive+0x24>
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	2b0a      	cmp	r3, #10
 80018b2:	d10d      	bne.n	80018d0 <GPS_Receive+0x40>
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <GPS_Receive+0x68>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2bff      	cmp	r3, #255	; 0xff
 80018ba:	d009      	beq.n	80018d0 <GPS_Receive+0x40>
		GPS_Parse(gpsTemp, gpsTempLen);
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <GPS_Receive+0x68>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	480e      	ldr	r0, [pc, #56]	; (80018fc <GPS_Receive+0x6c>)
 80018c4:	f000 f81c 	bl	8001900 <GPS_Parse>
		gpsTempLen = 255;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <GPS_Receive+0x68>)
 80018ca:	22ff      	movs	r2, #255	; 0xff
 80018cc:	701a      	strb	r2, [r3, #0]
}
 80018ce:	e00f      	b.n	80018f0 <GPS_Receive+0x60>
	}else if(gpsTempLen != 255){
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <GPS_Receive+0x68>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2bff      	cmp	r3, #255	; 0xff
 80018d6:	d00b      	beq.n	80018f0 <GPS_Receive+0x60>
		gpsTemp[gpsTempLen] = data;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <GPS_Receive+0x68>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	4a07      	ldr	r2, [pc, #28]	; (80018fc <GPS_Receive+0x6c>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	5453      	strb	r3, [r2, r1]
		gpsTempLen++;
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <GPS_Receive+0x68>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b02      	ldr	r3, [pc, #8]	; (80018f8 <GPS_Receive+0x68>)
 80018ee:	701a      	strb	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000274 	.word	0x20000274

08001900 <GPS_Parse>:

/* parses received frame */
uint8_t GPS_Parse(uint8_t *buf, uint8_t len){
 8001900:	b580      	push	{r7, lr}
 8001902:	b098      	sub	sp, #96	; 0x60
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
	if(strncmp("GPGGA", (char *)buf, 5) == 0){ // get coordinates and height
 800190c:	2205      	movs	r2, #5
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	48c6      	ldr	r0, [pc, #792]	; (8001c2c <GPS_Parse+0x32c>)
 8001912:	f007 f845 	bl	80089a0 <strncmp>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	f040 814f 	bne.w	8001bbc <GPS_Parse+0x2bc>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fb9c 	bl	8002060 <GPS_CheckSum>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	f040 8144 	bne.w	8001bb8 <GPS_Parse+0x2b8>
			uint8_t step = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			uint8_t i = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			while(step < 8){
 800193c:	e12f      	b.n	8001b9e <GPS_Parse+0x29e>
				if(buf[i] == ','){
 800193e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b2c      	cmp	r3, #44	; 0x2c
 800194a:	f040 8123 	bne.w	8001b94 <GPS_Parse+0x294>
					i++;
 800194e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001952:	3301      	adds	r3, #1
 8001954:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
					step++;
 8001958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800195c:	3301      	adds	r3, #1
 800195e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if(step == 1){
 8001962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001966:	2b01      	cmp	r3, #1
 8001968:	d13e      	bne.n	80019e8 <GPS_Parse+0xe8>
						uint8_t tempData[6] = {0};
 800196a:	2300      	movs	r3, #0
 800196c:	64bb      	str	r3, [r7, #72]	; 0x48
 800196e:	2300      	movs	r3, #0
 8001970:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						uint8_t leng = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
						while(buf[i] != '.'){
 800197a:	e014      	b.n	80019a6 <GPS_Parse+0xa6>
							tempData[leng] = buf[i];
 800197c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	441a      	add	r2, r3
 8001984:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	3360      	adds	r3, #96	; 0x60
 800198c:	443b      	add	r3, r7
 800198e:	f803 2c18 	strb.w	r2, [r3, #-24]
							leng++;
 8001992:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001996:	3301      	adds	r3, #1
 8001998:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
							i++;
 800199c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80019a0:	3301      	adds	r3, #1
 80019a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						while(buf[i] != '.'){
 80019a6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b2e      	cmp	r3, #46	; 0x2e
 80019b2:	d1e3      	bne.n	800197c <GPS_Parse+0x7c>
						}
						if(leng == 0){
 80019b4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <GPS_Parse+0xc0>
							return GPS_NOK;
 80019bc:	2300      	movs	r3, #0
 80019be:	e349      	b.n	8002054 <GPS_Parse+0x754>
						}
						memset(gpsTime, '0', 6);
 80019c0:	2206      	movs	r2, #6
 80019c2:	2130      	movs	r1, #48	; 0x30
 80019c4:	489a      	ldr	r0, [pc, #616]	; (8001c30 <GPS_Parse+0x330>)
 80019c6:	f006 fb45 	bl	8008054 <memset>
						memcpy(gpsTime + (6-leng), tempData, leng);
 80019ca:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80019ce:	f1c3 0306 	rsb	r3, r3, #6
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b96      	ldr	r3, [pc, #600]	; (8001c30 <GPS_Parse+0x330>)
 80019d6:	4413      	add	r3, r2
 80019d8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80019dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80019e0:	4618      	mov	r0, r3
 80019e2:	f006 fb29 	bl	8008038 <memcpy>
 80019e6:	e0d5      	b.n	8001b94 <GPS_Parse+0x294>
					}else if(step == 2 || step == 3){
 80019e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d004      	beq.n	80019fa <GPS_Parse+0xfa>
 80019f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	f040 8084 	bne.w	8001b02 <GPS_Parse+0x202>
						uint8_t tempData[12] = {0};
 80019fa:	2300      	movs	r3, #0
 80019fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
						while(buf[i] != ','){
 8001a0e:	e014      	b.n	8001a3a <GPS_Parse+0x13a>
							tempData[leng] = buf[i];
 8001a10:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	441a      	add	r2, r3
 8001a18:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	3360      	adds	r3, #96	; 0x60
 8001a20:	443b      	add	r3, r7
 8001a22:	f803 2c24 	strb.w	r2, [r3, #-36]
							leng++;
 8001a26:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
							i++;
 8001a30:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a34:	3301      	adds	r3, #1
 8001a36:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						while(buf[i] != ','){
 8001a3a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b2c      	cmp	r3, #44	; 0x2c
 8001a46:	d1e3      	bne.n	8001a10 <GPS_Parse+0x110>
						}
						if(leng == 0){
 8001a48:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <GPS_Parse+0x154>
							return GPS_NOK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e2ff      	b.n	8002054 <GPS_Parse+0x754>
						}
						i++;
 8001a54:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						if(buf[i] == 'N' || buf[i] == 'S' || buf[i] == 'E' || buf[i] == 'W'){
 8001a5e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b4e      	cmp	r3, #78	; 0x4e
 8001a6a:	d014      	beq.n	8001a96 <GPS_Parse+0x196>
 8001a6c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b53      	cmp	r3, #83	; 0x53
 8001a78:	d00d      	beq.n	8001a96 <GPS_Parse+0x196>
 8001a7a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b45      	cmp	r3, #69	; 0x45
 8001a86:	d006      	beq.n	8001a96 <GPS_Parse+0x196>
 8001a88:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b57      	cmp	r3, #87	; 0x57
 8001a94:	d133      	bne.n	8001afe <GPS_Parse+0x1fe>
							memset((gpsData + (step - 2) * 12), '0', 12);
 8001a96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001a9a:	1e9a      	subs	r2, r3, #2
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <GPS_Parse+0x334>)
 8001aa8:	4413      	add	r3, r2
 8001aaa:	220c      	movs	r2, #12
 8001aac:	2130      	movs	r1, #48	; 0x30
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f006 fad0 	bl	8008054 <memset>
							gpsData[(step - 2) * 12 + 11] = buf[i];
 8001ab4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	18d1      	adds	r1, r2, r3
 8001abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ac0:	1e9a      	subs	r2, r3, #2
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	330b      	adds	r3, #11
 8001acc:	7809      	ldrb	r1, [r1, #0]
 8001ace:	4a59      	ldr	r2, [pc, #356]	; (8001c34 <GPS_Parse+0x334>)
 8001ad0:	54d1      	strb	r1, [r2, r3]
						}else{
							return GPS_NOK;
						}
						memcpy(gpsData + (step - 2) * 12 + (11 - leng), tempData, leng);
 8001ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ad6:	1e9a      	subs	r2, r3, #2
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	330b      	adds	r3, #11
 8001aea:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <GPS_Parse+0x334>)
 8001aec:	4413      	add	r3, r2
 8001aee:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001af2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001af6:	4618      	mov	r0, r3
 8001af8:	f006 fa9e 	bl	8008038 <memcpy>
					}else if(step == 2 || step == 3){
 8001afc:	e04a      	b.n	8001b94 <GPS_Parse+0x294>
							return GPS_NOK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e2a8      	b.n	8002054 <GPS_Parse+0x754>
					}else if(step == 7){
 8001b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001b06:	2b07      	cmp	r3, #7
 8001b08:	d144      	bne.n	8001b94 <GPS_Parse+0x294>
						i++;
 8001b0a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						uint8_t tempData[12] = {0};
 8001b14:	2300      	movs	r3, #0
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
 8001b18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						while(buf[i] != ','){
 8001b28:	e014      	b.n	8001b54 <GPS_Parse+0x254>
							tempData[leng] = buf[i];
 8001b2a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	441a      	add	r2, r3
 8001b32:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b36:	7812      	ldrb	r2, [r2, #0]
 8001b38:	3360      	adds	r3, #96	; 0x60
 8001b3a:	443b      	add	r3, r7
 8001b3c:	f803 2c30 	strb.w	r2, [r3, #-48]
							leng++;
 8001b40:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b44:	3301      	adds	r3, #1
 8001b46:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
							i++;
 8001b4a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						while(buf[i] != ','){
 8001b54:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b2c      	cmp	r3, #44	; 0x2c
 8001b60:	d1e3      	bne.n	8001b2a <GPS_Parse+0x22a>
						}
						if(leng == 0){
 8001b62:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <GPS_Parse+0x26e>
							return GPS_NOK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e272      	b.n	8002054 <GPS_Parse+0x754>
						}
						memset(gpsHeight, '0', 8);
 8001b6e:	2208      	movs	r2, #8
 8001b70:	2130      	movs	r1, #48	; 0x30
 8001b72:	4831      	ldr	r0, [pc, #196]	; (8001c38 <GPS_Parse+0x338>)
 8001b74:	f006 fa6e 	bl	8008054 <memset>
						memcpy(gpsHeight + (8-leng), tempData, leng);
 8001b78:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b7c:	f1c3 0308 	rsb	r3, r3, #8
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <GPS_Parse+0x338>)
 8001b84:	4413      	add	r3, r2
 8001b86:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001b8a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f006 fa52 	bl	8008038 <memcpy>
					}
				}
				i++;
 8001b94:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			while(step < 8){
 8001b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ba2:	2b07      	cmp	r3, #7
 8001ba4:	f67f aecb 	bls.w	800193e <GPS_Parse+0x3e>
			}
			isNewData = 1;
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <GPS_Parse+0x33c>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
			isData = 1;
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <GPS_Parse+0x340>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
			return GPS_OK;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e24d      	b.n	8002054 <GPS_Parse+0x754>
		}else{
			return GPS_NOK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e24b      	b.n	8002054 <GPS_Parse+0x754>
		}


	}else if(strncmp("GPVTG", (char *)buf, 5) == 0){ // get speed in km/h
 8001bbc:	2205      	movs	r2, #5
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4820      	ldr	r0, [pc, #128]	; (8001c44 <GPS_Parse+0x344>)
 8001bc2:	f006 feed 	bl	80089a0 <strncmp>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d17f      	bne.n	8001ccc <GPS_Parse+0x3cc>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fa45 	bl	8002060 <GPS_CheckSum>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d175      	bne.n	8001cc8 <GPS_Parse+0x3c8>
			uint8_t step = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			uint8_t i = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			while(step < 8){
 8001be8:	e068      	b.n	8001cbc <GPS_Parse+0x3bc>
				if(buf[i] == ','){
 8001bea:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b2c      	cmp	r3, #44	; 0x2c
 8001bf6:	d15c      	bne.n	8001cb2 <GPS_Parse+0x3b2>
					step++;
 8001bf8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
					if(step == 7){
 8001c02:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	d153      	bne.n	8001cb2 <GPS_Parse+0x3b2>
						i++;
 8001c0a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
						uint8_t tempData[12] = {0};
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
						while(buf[i] != ','){
 8001c28:	e023      	b.n	8001c72 <GPS_Parse+0x372>
 8001c2a:	bf00      	nop
 8001c2c:	0800af0c 	.word	0x0800af0c
 8001c30:	20000248 	.word	0x20000248
 8001c34:	20000220 	.word	0x20000220
 8001c38:	20000238 	.word	0x20000238
 8001c3c:	200002c5 	.word	0x200002c5
 8001c40:	200002c4 	.word	0x200002c4
 8001c44:	0800af14 	.word	0x0800af14
							tempData[leng] = buf[i];
 8001c48:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	441a      	add	r2, r3
 8001c50:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c54:	7812      	ldrb	r2, [r2, #0]
 8001c56:	3360      	adds	r3, #96	; 0x60
 8001c58:	443b      	add	r3, r7
 8001c5a:	f803 2c3c 	strb.w	r2, [r3, #-60]
							leng++;
 8001c5e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c62:	3301      	adds	r3, #1
 8001c64:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
							i++;
 8001c68:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
						while(buf[i] != ','){
 8001c72:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b2c      	cmp	r3, #44	; 0x2c
 8001c7e:	d1e3      	bne.n	8001c48 <GPS_Parse+0x348>
						}
						if(leng == 0){
 8001c80:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <GPS_Parse+0x38c>
							return GPS_NOK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e1e3      	b.n	8002054 <GPS_Parse+0x754>
						}
						memset(gpsSpeed, '0', 6);
 8001c8c:	2206      	movs	r2, #6
 8001c8e:	2130      	movs	r1, #48	; 0x30
 8001c90:	48c7      	ldr	r0, [pc, #796]	; (8001fb0 <GPS_Parse+0x6b0>)
 8001c92:	f006 f9df 	bl	8008054 <memset>
						memcpy(gpsSpeed + (6-leng), tempData, leng);
 8001c96:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c9a:	f1c3 0306 	rsb	r3, r3, #6
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4bc3      	ldr	r3, [pc, #780]	; (8001fb0 <GPS_Parse+0x6b0>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8001ca8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001cac:	4618      	mov	r0, r3
 8001cae:	f006 f9c3 	bl	8008038 <memcpy>
					}
				}
				i++;
 8001cb2:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			while(step < 8){
 8001cbc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001cc0:	2b07      	cmp	r3, #7
 8001cc2:	d992      	bls.n	8001bea <GPS_Parse+0x2ea>
			}
			return GPS_OK;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e1c5      	b.n	8002054 <GPS_Parse+0x754>
		}else{
			return GPS_NOK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e1c3      	b.n	8002054 <GPS_Parse+0x754>
		}
	}else if(strncmp("GPZDA", (char *)buf, 5) == 0){ // get precise time
 8001ccc:	2205      	movs	r2, #5
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	48b8      	ldr	r0, [pc, #736]	; (8001fb4 <GPS_Parse+0x6b4>)
 8001cd2:	f006 fe65 	bl	80089a0 <strncmp>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f040 81ba 	bne.w	8002052 <GPS_Parse+0x752>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f9bc 	bl	8002060 <GPS_CheckSum>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	f040 81af 	bne.w	800204e <GPS_Parse+0x74e>
				uint8_t step = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				uint8_t i = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				while(step < 6){
 8001cfc:	e1a0      	b.n	8002040 <GPS_Parse+0x740>
					if(buf[i] == ','){
 8001cfe:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b2c      	cmp	r3, #44	; 0x2c
 8001d0a:	f040 8194 	bne.w	8002036 <GPS_Parse+0x736>
						step++;
 8001d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d12:	3301      	adds	r3, #1
 8001d14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						if(step == 1){
 8001d18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d13d      	bne.n	8001d9c <GPS_Parse+0x49c>
							uint8_t tempData[8] = {0};
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
							uint8_t leng = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
							while(buf[i] != ','){
 8001d2e:	e014      	b.n	8001d5a <GPS_Parse+0x45a>
								tempData[leng] = buf[i];
 8001d30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	441a      	add	r2, r3
 8001d38:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	3360      	adds	r3, #96	; 0x60
 8001d40:	443b      	add	r3, r7
 8001d42:	f803 2c44 	strb.w	r2, [r3, #-68]
								leng++;
 8001d46:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								i++;
 8001d50:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d54:	3301      	adds	r3, #1
 8001d56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001d5a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b2c      	cmp	r3, #44	; 0x2c
 8001d66:	d1e3      	bne.n	8001d30 <GPS_Parse+0x430>
							}
							if(leng == 0){
 8001d68:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <GPS_Parse+0x474>
								return GPS_NOK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e16f      	b.n	8002054 <GPS_Parse+0x754>
							}
							memset(gpsTime_UTC, '0', 9);
 8001d74:	2209      	movs	r2, #9
 8001d76:	2130      	movs	r1, #48	; 0x30
 8001d78:	488f      	ldr	r0, [pc, #572]	; (8001fb8 <GPS_Parse+0x6b8>)
 8001d7a:	f006 f96b 	bl	8008054 <memset>
							memcpy(gpsTime_UTC + (8-leng), tempData, leng);
 8001d7e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d82:	f1c3 0308 	rsb	r3, r3, #8
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b8b      	ldr	r3, [pc, #556]	; (8001fb8 <GPS_Parse+0x6b8>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001d90:	f107 011c 	add.w	r1, r7, #28
 8001d94:	4618      	mov	r0, r3
 8001d96:	f006 f94f 	bl	8008038 <memcpy>
 8001d9a:	e14c      	b.n	8002036 <GPS_Parse+0x736>
						}else if(step == 2){
 8001d9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d13b      	bne.n	8001e1c <GPS_Parse+0x51c>
							uint8_t tempData[2] = {0};
 8001da4:	2300      	movs	r3, #0
 8001da6:	833b      	strh	r3, [r7, #24]
							uint8_t leng = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
							while(buf[i] != ','){
 8001dae:	e014      	b.n	8001dda <GPS_Parse+0x4da>
								tempData[leng] = buf[i];
 8001db0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	441a      	add	r2, r3
 8001db8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	3360      	adds	r3, #96	; 0x60
 8001dc0:	443b      	add	r3, r7
 8001dc2:	f803 2c48 	strb.w	r2, [r3, #-72]
								leng++;
 8001dc6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
								i++;
 8001dd0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001dda:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b2c      	cmp	r3, #44	; 0x2c
 8001de6:	d1e3      	bne.n	8001db0 <GPS_Parse+0x4b0>
							}
							if(leng == 0){
 8001de8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <GPS_Parse+0x4f4>
								return GPS_NOK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e12f      	b.n	8002054 <GPS_Parse+0x754>
							}
							memset(gps_date, '0', 3);
 8001df4:	2203      	movs	r2, #3
 8001df6:	2130      	movs	r1, #48	; 0x30
 8001df8:	4870      	ldr	r0, [pc, #448]	; (8001fbc <GPS_Parse+0x6bc>)
 8001dfa:	f006 f92b 	bl	8008054 <memset>
							memcpy(gps_date + (2-leng), tempData, leng);
 8001dfe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001e02:	f1c3 0302 	rsb	r3, r3, #2
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <GPS_Parse+0x6bc>)
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8001e10:	f107 0118 	add.w	r1, r7, #24
 8001e14:	4618      	mov	r0, r3
 8001e16:	f006 f90f 	bl	8008038 <memcpy>
 8001e1a:	e10c      	b.n	8002036 <GPS_Parse+0x736>
						}else if(step == 3){
 8001e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d13b      	bne.n	8001e9c <GPS_Parse+0x59c>
							uint8_t tempData[2] = {0};
 8001e24:	2300      	movs	r3, #0
 8001e26:	82bb      	strh	r3, [r7, #20]
							uint8_t leng = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
							while(buf[i] != ','){
 8001e2e:	e014      	b.n	8001e5a <GPS_Parse+0x55a>
								tempData[leng] = buf[i];
 8001e30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	441a      	add	r2, r3
 8001e38:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	3360      	adds	r3, #96	; 0x60
 8001e40:	443b      	add	r3, r7
 8001e42:	f803 2c4c 	strb.w	r2, [r3, #-76]
								leng++;
 8001e46:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
								i++;
 8001e50:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001e54:	3301      	adds	r3, #1
 8001e56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001e5a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b2c      	cmp	r3, #44	; 0x2c
 8001e66:	d1e3      	bne.n	8001e30 <GPS_Parse+0x530>
							}
							if(leng == 0){
 8001e68:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <GPS_Parse+0x574>
								return GPS_NOK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e0ef      	b.n	8002054 <GPS_Parse+0x754>
							}
							memset(gps_month, '0', 3);
 8001e74:	2203      	movs	r2, #3
 8001e76:	2130      	movs	r1, #48	; 0x30
 8001e78:	4851      	ldr	r0, [pc, #324]	; (8001fc0 <GPS_Parse+0x6c0>)
 8001e7a:	f006 f8eb 	bl	8008054 <memset>
							memcpy(gps_month + (2-leng), tempData, leng);
 8001e7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e82:	f1c3 0302 	rsb	r3, r3, #2
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <GPS_Parse+0x6c0>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8001e90:	f107 0114 	add.w	r1, r7, #20
 8001e94:	4618      	mov	r0, r3
 8001e96:	f006 f8cf 	bl	8008038 <memcpy>
 8001e9a:	e0cc      	b.n	8002036 <GPS_Parse+0x736>
						}else if(step == 4){
 8001e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d13b      	bne.n	8001f1c <GPS_Parse+0x61c>
							uint8_t tempData[4] = {0};
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
							uint8_t leng = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
							while(buf[i] != ','){
 8001eae:	e014      	b.n	8001eda <GPS_Parse+0x5da>
								tempData[leng] = buf[i];
 8001eb0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	3360      	adds	r3, #96	; 0x60
 8001ec0:	443b      	add	r3, r7
 8001ec2:	f803 2c50 	strb.w	r2, [r3, #-80]
								leng++;
 8001ec6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
								i++;
 8001ed0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001eda:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ee6:	d1e3      	bne.n	8001eb0 <GPS_Parse+0x5b0>
							}
							if(leng == 0){
 8001ee8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <GPS_Parse+0x5f4>
								return GPS_NOK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e0af      	b.n	8002054 <GPS_Parse+0x754>
							}
							memset(gps_year, '0', 5);
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	2130      	movs	r1, #48	; 0x30
 8001ef8:	4832      	ldr	r0, [pc, #200]	; (8001fc4 <GPS_Parse+0x6c4>)
 8001efa:	f006 f8ab 	bl	8008054 <memset>
							memcpy(gps_year + (4-leng), tempData, leng);
 8001efe:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001f02:	f1c3 0304 	rsb	r3, r3, #4
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <GPS_Parse+0x6c4>)
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001f10:	f107 0110 	add.w	r1, r7, #16
 8001f14:	4618      	mov	r0, r3
 8001f16:	f006 f88f 	bl	8008038 <memcpy>
 8001f1a:	e08c      	b.n	8002036 <GPS_Parse+0x736>
						}else if(step == 5){
 8001f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d13b      	bne.n	8001f9c <GPS_Parse+0x69c>
							uint8_t tempData[2] = {0};
 8001f24:	2300      	movs	r3, #0
 8001f26:	81bb      	strh	r3, [r7, #12]
							uint8_t leng = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
							while(buf[i] != ','){
 8001f2e:	e014      	b.n	8001f5a <GPS_Parse+0x65a>
								tempData[leng] = buf[i];
 8001f30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	441a      	add	r2, r3
 8001f38:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	3360      	adds	r3, #96	; 0x60
 8001f40:	443b      	add	r3, r7
 8001f42:	f803 2c54 	strb.w	r2, [r3, #-84]
								leng++;
 8001f46:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
								i++;
 8001f50:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f54:	3301      	adds	r3, #1
 8001f56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001f5a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b2c      	cmp	r3, #44	; 0x2c
 8001f66:	d1e3      	bne.n	8001f30 <GPS_Parse+0x630>
							}
							if(leng == 0){
 8001f68:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <GPS_Parse+0x674>
								return GPS_NOK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e06f      	b.n	8002054 <GPS_Parse+0x754>
							}
							memset(local_zone_desc, '0', 3);
 8001f74:	2203      	movs	r2, #3
 8001f76:	2130      	movs	r1, #48	; 0x30
 8001f78:	4813      	ldr	r0, [pc, #76]	; (8001fc8 <GPS_Parse+0x6c8>)
 8001f7a:	f006 f86b 	bl	8008054 <memset>
							memcpy(local_zone_desc + (2-leng), tempData, leng);
 8001f7e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001f82:	f1c3 0302 	rsb	r3, r3, #2
 8001f86:	461a      	mov	r2, r3
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <GPS_Parse+0x6c8>)
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8001f90:	f107 010c 	add.w	r1, r7, #12
 8001f94:	4618      	mov	r0, r3
 8001f96:	f006 f84f 	bl	8008038 <memcpy>
 8001f9a:	e04c      	b.n	8002036 <GPS_Parse+0x736>
						}
						else if(step == 5){
 8001f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d148      	bne.n	8002036 <GPS_Parse+0x736>
							uint8_t tempData[2] = {0};
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	813b      	strh	r3, [r7, #8]
							uint8_t leng = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
							while(buf[i] != ','){
 8001fae:	e022      	b.n	8001ff6 <GPS_Parse+0x6f6>
 8001fb0:	20000240 	.word	0x20000240
 8001fb4:	0800af1c 	.word	0x0800af1c
 8001fb8:	20000250 	.word	0x20000250
 8001fbc:	2000025c 	.word	0x2000025c
 8001fc0:	20000260 	.word	0x20000260
 8001fc4:	20000264 	.word	0x20000264
 8001fc8:	2000026c 	.word	0x2000026c
								tempData[leng] = buf[i];
 8001fcc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	441a      	add	r2, r3
 8001fd4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	3360      	adds	r3, #96	; 0x60
 8001fdc:	443b      	add	r3, r7
 8001fde:	f803 2c58 	strb.w	r2, [r3, #-88]
								leng++;
 8001fe2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
								i++;
 8001fec:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001ff6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b2c      	cmp	r3, #44	; 0x2c
 8002002:	d1e3      	bne.n	8001fcc <GPS_Parse+0x6cc>
							}
							if(leng == 0){
 8002004:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <GPS_Parse+0x710>
								return GPS_NOK;
 800200c:	2300      	movs	r3, #0
 800200e:	e021      	b.n	8002054 <GPS_Parse+0x754>
							}
							memset(local_zone_min_desc, '0', 3);
 8002010:	2203      	movs	r2, #3
 8002012:	2130      	movs	r1, #48	; 0x30
 8002014:	4811      	ldr	r0, [pc, #68]	; (800205c <GPS_Parse+0x75c>)
 8002016:	f006 f81d 	bl	8008054 <memset>
							memcpy(local_zone_min_desc + (2-leng), tempData, leng);
 800201a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800201e:	f1c3 0302 	rsb	r3, r3, #2
 8002022:	461a      	mov	r2, r3
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <GPS_Parse+0x75c>)
 8002026:	4413      	add	r3, r2
 8002028:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800202c:	f107 0108 	add.w	r1, r7, #8
 8002030:	4618      	mov	r0, r3
 8002032:	f006 f801 	bl	8008038 <memcpy>
						}
					}
					i++;
 8002036:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800203a:	3301      	adds	r3, #1
 800203c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				while(step < 6){
 8002040:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002044:	2b05      	cmp	r3, #5
 8002046:	f67f ae5a 	bls.w	8001cfe <GPS_Parse+0x3fe>
				}
			return GPS_OK;
 800204a:	2301      	movs	r3, #1
 800204c:	e002      	b.n	8002054 <GPS_Parse+0x754>
		}else{
			return GPS_NOK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <GPS_Parse+0x754>
		}
	}else{
		return GPS_NOK;
 8002052:	2300      	movs	r3, #0
	}
	return GPS_NOK;
}
 8002054:	4618      	mov	r0, r3
 8002056:	3760      	adds	r7, #96	; 0x60
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000270 	.word	0x20000270

08002060 <GPS_CheckSum>:

/* checks checksum returns GPS_ok if data is valid*/
uint8_t GPS_CheckSum(uint8_t *buf, uint8_t len){
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
	uint8_t sum;
	uint8_t check = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]

	if(GPS_HexToByte((buf + len - 2), &sum) != GPS_OK){
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	3b02      	subs	r3, #2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	f107 020d 	add.w	r2, r7, #13
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f822 	bl	80020c8 <GPS_HexToByte>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <GPS_CheckSum+0x2e>
		return GPS_NOK;
 800208a:	2300      	movs	r3, #0
 800208c:	e018      	b.n	80020c0 <GPS_CheckSum+0x60>
	}

	for(uint8_t i = 0; i < (len - 3); i++){
 800208e:	2300      	movs	r3, #0
 8002090:	73bb      	strb	r3, [r7, #14]
 8002092:	e009      	b.n	80020a8 <GPS_CheckSum+0x48>
		check ^= buf[i];
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4053      	eors	r3, r2
 80020a0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < (len - 3); i++){
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	3301      	adds	r3, #1
 80020a6:	73bb      	strb	r3, [r7, #14]
 80020a8:	7bba      	ldrb	r2, [r7, #14]
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	429a      	cmp	r2, r3
 80020b0:	dbf0      	blt.n	8002094 <GPS_CheckSum+0x34>
	}

	if(check == sum){
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d101      	bne.n	80020be <GPS_CheckSum+0x5e>
		return GPS_OK;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <GPS_CheckSum+0x60>
	}

	return GPS_NOK;
 80020be:	2300      	movs	r3, #0

}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <GPS_HexToByte>:
	}
	 return checksum;
}

/* converts hex string e.g. AB (0xAB) to byte value writes to value, returns GPS_OK if valid hex */
uint8_t GPS_HexToByte(uint8_t *hex, uint8_t *value){
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	uint8_t temp[2];

	for(uint8_t i = 0; i < 2; i++){
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e043      	b.n	8002160 <GPS_HexToByte+0x98>
		temp[i] = hex[i];
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	441a      	add	r2, r3
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	3310      	adds	r3, #16
 80020e4:	443b      	add	r3, r7
 80020e6:	f803 2c04 	strb.w	r2, [r3, #-4]
		if(temp[i] > 47 && temp[i] < 58){
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3310      	adds	r3, #16
 80020ee:	443b      	add	r3, r7
 80020f0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80020f4:	2b2f      	cmp	r3, #47	; 0x2f
 80020f6:	d913      	bls.n	8002120 <GPS_HexToByte+0x58>
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	3310      	adds	r3, #16
 80020fc:	443b      	add	r3, r7
 80020fe:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8002102:	2b39      	cmp	r3, #57	; 0x39
 8002104:	d80c      	bhi.n	8002120 <GPS_HexToByte+0x58>
			temp[i] -= 48;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	3310      	adds	r3, #16
 800210a:	443b      	add	r3, r7
 800210c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	3a30      	subs	r2, #48	; 0x30
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	3310      	adds	r3, #16
 8002118:	443b      	add	r3, r7
 800211a:	f803 2c04 	strb.w	r2, [r3, #-4]
 800211e:	e01c      	b.n	800215a <GPS_HexToByte+0x92>
		}else if(temp[i] > 64 && temp[i] < 71){
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3310      	adds	r3, #16
 8002124:	443b      	add	r3, r7
 8002126:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d913      	bls.n	8002156 <GPS_HexToByte+0x8e>
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	3310      	adds	r3, #16
 8002132:	443b      	add	r3, r7
 8002134:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8002138:	2b46      	cmp	r3, #70	; 0x46
 800213a:	d80c      	bhi.n	8002156 <GPS_HexToByte+0x8e>
			temp[i] -= 55;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	3310      	adds	r3, #16
 8002140:	443b      	add	r3, r7
 8002142:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	3a37      	subs	r2, #55	; 0x37
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	3310      	adds	r3, #16
 800214e:	443b      	add	r3, r7
 8002150:	f803 2c04 	strb.w	r2, [r3, #-4]
 8002154:	e001      	b.n	800215a <GPS_HexToByte+0x92>
		}else{
			return GPS_NOK;
 8002156:	2300      	movs	r3, #0
 8002158:	e00e      	b.n	8002178 <GPS_HexToByte+0xb0>
	for(uint8_t i = 0; i < 2; i++){
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	3301      	adds	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d9b8      	bls.n	80020d8 <GPS_HexToByte+0x10>
		}
	}

	*value = (temp[0] << 4) + temp[1];
 8002166:	7b3b      	ldrb	r3, [r7, #12]
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	b2da      	uxtb	r2, r3
 800216c:	7b7b      	ldrb	r3, [r7, #13]
 800216e:	4413      	add	r3, r2
 8002170:	b2da      	uxtb	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	701a      	strb	r2, [r3, #0]

	return GPS_OK;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <GPS_GetLat>:

/* Returns latitude of length 12...9*/
void GPS_GetLat(uint8_t *buf){
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 800218c:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <GPS_GetLat+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	e00a      	b.n	80021ae <GPS_GetLat+0x2a>
		buf[i - 1] = gpsData[i];
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	3b01      	subs	r3, #1
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	440b      	add	r3, r1
 80021a2:	4909      	ldr	r1, [pc, #36]	; (80021c8 <GPS_GetLat+0x44>)
 80021a4:	5c8a      	ldrb	r2, [r1, r2]
 80021a6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	3301      	adds	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	2b09      	cmp	r3, #9
 80021b2:	d9f1      	bls.n	8002198 <GPS_GetLat+0x14>
	}
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200002c5 	.word	0x200002c5
 80021c8:	20000220 	.word	0x20000220

080021cc <GPS_GetLon>:

/* Returns longitude of length 12...9*/
void GPS_GetLon(uint8_t *buf){
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <GPS_GetLon+0x44>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	e00c      	b.n	80021fa <GPS_GetLon+0x2e>
		buf[i - 1] = gpsData[i + 12];
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	f103 020c 	add.w	r2, r3, #12
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	440b      	add	r3, r1
 80021ee:	4909      	ldr	r1, [pc, #36]	; (8002214 <GPS_GetLon+0x48>)
 80021f0:	5c8a      	ldrb	r2, [r1, r2]
 80021f2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	3301      	adds	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d9ef      	bls.n	80021e0 <GPS_GetLon+0x14>
	}
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200002c5 	.word	0x200002c5
 8002214:	20000220 	.word	0x20000220

08002218 <GPS_GetSpe>:

/* Returns speed of length 6*/
void GPS_GetSpe(uint8_t *buf){
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <GPS_GetSpe+0x3c>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e009      	b.n	8002240 <GPS_GetSpe+0x28>
		buf[i] = gpsSpeed[i];
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	440b      	add	r3, r1
 8002234:	4908      	ldr	r1, [pc, #32]	; (8002258 <GPS_GetSpe+0x40>)
 8002236:	5c8a      	ldrb	r2, [r1, r2]
 8002238:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3301      	adds	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d9f2      	bls.n	800222c <GPS_GetSpe+0x14>
	}
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	200002c5 	.word	0x200002c5
 8002258:	20000240 	.word	0x20000240

0800225c <GPS_GetHei>:

/* Returns height of length 8*/
void GPS_GetHei(uint8_t *buf){
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <GPS_GetHei+0x3c>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
	for(; i < 8; i++){
 800226e:	e009      	b.n	8002284 <GPS_GetHei+0x28>
		buf[i] = gpsHeight[i];
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	440b      	add	r3, r1
 8002278:	4908      	ldr	r1, [pc, #32]	; (800229c <GPS_GetHei+0x40>)
 800227a:	5c8a      	ldrb	r2, [r1, r2]
 800227c:	701a      	strb	r2, [r3, #0]
	for(; i < 8; i++){
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	3301      	adds	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b07      	cmp	r3, #7
 8002288:	d9f2      	bls.n	8002270 <GPS_GetHei+0x14>
	}
}
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	200002c5 	.word	0x200002c5
 800229c:	20000238 	.word	0x20000238

080022a0 <GPS_GetTime>:

/* Returns time of length 9 in format "hh:mm:ss.msms" */
void GPS_GetTime(uint8_t *buf){
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <GPS_GetTime+0x70>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
	buf[2] = ':';
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3302      	adds	r3, #2
 80022b2:	223a      	movs	r2, #58	; 0x3a
 80022b4:	701a      	strb	r2, [r3, #0]
	buf[5] = ':';
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3305      	adds	r3, #5
 80022ba:	223a      	movs	r2, #58	; 0x3a
 80022bc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e01b      	b.n	80022fc <GPS_GetTime+0x5c>
		buf[i] = gpsTime[i];
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	440b      	add	r3, r1
 80022cc:	4911      	ldr	r1, [pc, #68]	; (8002314 <GPS_GetTime+0x74>)
 80022ce:	5c8a      	ldrb	r2, [r1, r2]
 80022d0:	701a      	strb	r2, [r3, #0]
		buf[i + 3] = gpsTime[i + 2];
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	1c9a      	adds	r2, r3, #2
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	3303      	adds	r3, #3
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	440b      	add	r3, r1
 80022de:	490d      	ldr	r1, [pc, #52]	; (8002314 <GPS_GetTime+0x74>)
 80022e0:	5c8a      	ldrb	r2, [r1, r2]
 80022e2:	701a      	strb	r2, [r3, #0]
		buf[i + 6] = gpsTime[i + 4];
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	1d1a      	adds	r2, r3, #4
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	3306      	adds	r3, #6
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	440b      	add	r3, r1
 80022f0:	4908      	ldr	r1, [pc, #32]	; (8002314 <GPS_GetTime+0x74>)
 80022f2:	5c8a      	ldrb	r2, [r1, r2]
 80022f4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	3301      	adds	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d9e0      	bls.n	80022c4 <GPS_GetTime+0x24>
	}
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	200002c5 	.word	0x200002c5
 8002314:	20000248 	.word	0x20000248

08002318 <GSM_InitUart>:
#define GSM_MSG_SEND										26				//CTRL + Z
//#define GSM_MSG_SPACE										32				//SPACE


/* pass UART handle that will communicate with GSM module*/
uint8_t GSM_InitUart(UART_HandleTypeDef *huart){
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	uart = huart;
 8002320:	4a08      	ldr	r2, [pc, #32]	; (8002344 <GSM_InitUart+0x2c>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
	if(huart != uart){
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <GSM_InitUart+0x2c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <GSM_InitUart+0x1c>
		return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <GSM_InitUart+0x1e>
	}else{
		return HAL_OK;
 8002334:	2300      	movs	r3, #0
	}
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200002c8 	.word	0x200002c8

08002348 <GSM_On>:
	}

	return 0;
}

void GSM_On(){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002352:	480b      	ldr	r0, [pc, #44]	; (8002380 <GSM_On+0x38>)
 8002354:	f003 f91a 	bl	800558c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <GSM_On+0x3c>)
 8002360:	f003 f914 	bl	800558c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <GSM_On+0x3c>)
 800236c:	f003 f90e 	bl	800558c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_RESET);
 8002370:	2200      	movs	r2, #0
 8002372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002376:	4802      	ldr	r0, [pc, #8]	; (8002380 <GSM_On+0x38>)
 8002378:	f003 f908 	bl	800558c <HAL_GPIO_WritePin>
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40020800 	.word	0x40020800
 8002384:	40020400 	.word	0x40020400

08002388 <GSM_Off>:

void GSM_Off(){
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <GSM_Off+0x38>)
 8002394:	f003 f8fa 	bl	800558c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239e:	4809      	ldr	r0, [pc, #36]	; (80023c4 <GSM_Off+0x3c>)
 80023a0:	f003 f8f4 	bl	800558c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <GSM_Off+0x3c>)
 80023ac:	f003 f8ee 	bl	800558c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023b6:	4802      	ldr	r0, [pc, #8]	; (80023c0 <GSM_Off+0x38>)
 80023b8:	f003 f8e8 	bl	800558c <HAL_GPIO_WritePin>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020400 	.word	0x40020400

080023c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b0e2      	sub	sp, #392	; 0x188
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ce:	f001 fcf5 	bl	8003dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d2:	f000 fa0b 	bl	80027ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d6:	f000 fce5 	bl	8002da4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80023da:	f000 fc45 	bl	8002c68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023de:	f000 fc6d 	bl	8002cbc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80023e2:	f000 fc95 	bl	8002d10 <MX_USART6_UART_Init>
  MX_DMA_Init();
 80023e6:	f000 fcbd 	bl	8002d64 <MX_DMA_Init>
  MX_SPI1_Init();
 80023ea:	f000 facf 	bl	800298c <MX_SPI1_Init>
  MX_TIM2_Init();
 80023ee:	f000 fb03 	bl	80029f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023f2:	f000 fb4f 	bl	8002a94 <MX_TIM3_Init>
  MX_CRC_Init();
 80023f6:	f000 fab5 	bl	8002964 <MX_CRC_Init>
  MX_TIM4_Init();
 80023fa:	f000 fb97 	bl	8002b2c <MX_TIM4_Init>
  MX_TIM5_Init();
 80023fe:	f000 fbe3 	bl	8002bc8 <MX_TIM5_Init>
  MX_ADC1_Init();
 8002402:	f000 fa5d 	bl	80028c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim5);
 8002406:	48a9      	ldr	r0, [pc, #676]	; (80026ac <main+0x2e4>)
 8002408:	f004 fa1a 	bl	8006840 <HAL_TIM_Base_Start_IT>

  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;

 //initialize LoRa module
 SX1278_hw.dio0.port = RF_DIO0_GPIO_Port;
 800240c:	4ba8      	ldr	r3, [pc, #672]	; (80026b0 <main+0x2e8>)
 800240e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 SX1278_hw.dio0.pin = RF_DIO0_Pin;
 8002412:	2320      	movs	r3, #32
 8002414:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 SX1278_hw.nss.port = RF_NSS_GPIO_Port;
 8002418:	4ba6      	ldr	r3, [pc, #664]	; (80026b4 <main+0x2ec>)
 800241a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 SX1278_hw.nss.pin = RF_NSS_Pin;
 800241e:	2310      	movs	r3, #16
 8002420:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 SX1278_hw.reset.port = RF_RST_GPIO_Port;
 8002424:	4ba2      	ldr	r3, [pc, #648]	; (80026b0 <main+0x2e8>)
 8002426:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 SX1278_hw.reset.pin = RF_RST_Pin;
 800242a:	2340      	movs	r3, #64	; 0x40
 800242c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 SX1278_hw.spi = &hspi1;
 8002430:	4ba1      	ldr	r3, [pc, #644]	; (80026b8 <main+0x2f0>)
 8002432:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 SX1278.hw = &SX1278_hw;
 8002436:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800243a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800243e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8002442:	601a      	str	r2, [r3, #0]

 //HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); DOESN"T work for some reason
 HAL_UART_Receive_IT(&huart1, &rxBuf, 1); // Works like a charm, but not as good as DMA
 8002444:	2201      	movs	r2, #1
 8002446:	499d      	ldr	r1, [pc, #628]	; (80026bc <main+0x2f4>)
 8002448:	489d      	ldr	r0, [pc, #628]	; (80026c0 <main+0x2f8>)
 800244a:	f004 feaf 	bl	80071ac <HAL_UART_Receive_IT>
 //while(HAL_GPIO_ReadPin(RX_GPIO_Port, RX_Pin) == 0);
 HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 800244e:	4b9d      	ldr	r3, [pc, #628]	; (80026c4 <main+0x2fc>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	499c      	ldr	r1, [pc, #624]	; (80026c8 <main+0x300>)
 8002458:	489c      	ldr	r0, [pc, #624]	; (80026cc <main+0x304>)
 800245a:	f004 fea7 	bl	80071ac <HAL_UART_Receive_IT>

 //HAL_UART_Receive_IT(&huart2, UART6_RxBuf, 2);

 HAL_GPIO_WritePin(RF_RST_GPIO_Port, RF_RST_Pin, GPIO_PIN_SET); // very important.
 800245e:	2201      	movs	r2, #1
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	4893      	ldr	r0, [pc, #588]	; (80026b0 <main+0x2e8>)
 8002464:	f003 f892 	bl	800558c <HAL_GPIO_WritePin>

 SX1278_hw_Reset(&SX1278_hw);
 8002468:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fdb1 	bl	8000fd4 <SX1278_hw_Reset>
//      SX1278_begin(&SX1278, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
//      SX1278_LORA_BW_20_8KHZ, 10);

  	//uint8_t GSM_STATE = 0;

  	GSM_Off();
 8002472:	f7ff ff89 	bl	8002388 <GSM_Off>

  	if(GSM_InitUart(&huart2)){ // if failed, then gg
 8002476:	4896      	ldr	r0, [pc, #600]	; (80026d0 <main+0x308>)
 8002478:	f7ff ff4e 	bl	8002318 <GSM_InitUart>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <main+0xbe>
  		return 0;
 8002482:	2300      	movs	r3, #0
 8002484:	e192      	b.n	80027ac <main+0x3e4>
  	}

	MODE_Set(&SX1278, mode);
 8002486:	4b93      	ldr	r3, [pc, #588]	; (80026d4 <main+0x30c>)
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fe4d 	bl	8003130 <MODE_Set>
	if(mode == 0){
 8002496:	4b8f      	ldr	r3, [pc, #572]	; (80026d4 <main+0x30c>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <main+0xf0>
		ret = SX1278_LoRaEntryRx(&SX1278, MIN_PACKETLENGTH, 2000);
 800249e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024a6:	2108      	movs	r1, #8
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff f8b5 	bl	8001618 <SX1278_LoRaEntryRx>
 80024ae:	4603      	mov	r3, r0
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <main+0x310>)
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e009      	b.n	80024cc <main+0x104>
	}else{
		ret = SX1278_FSK_EntryRx(&SX1278, 8);
 80024b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024bc:	2108      	movs	r1, #8
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f846 	bl	8001550 <SX1278_FSK_EntryRx>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b83      	ldr	r3, [pc, #524]	; (80026d8 <main+0x310>)
 80024ca:	701a      	strb	r2, [r3, #0]
	 //HAL_UART_Receive_DMA(&huart6, &cmd_rx_buffer, cmd_rx_buffer_size);
	//	uint8_t check_sum;
	//	uint8_t check_sum_arr[4] = {0, 0, 0, 0};

	uint8_t gsm_dataBuf[80];
	memset(tel_dataBuf, 0, sizeof(tel_dataBuf));
 80024cc:	226e      	movs	r2, #110	; 0x6e
 80024ce:	2100      	movs	r1, #0
 80024d0:	4882      	ldr	r0, [pc, #520]	; (80026dc <main+0x314>)
 80024d2:	f005 fdbf 	bl	8008054 <memset>
//	uint8_t date[2];
	uint8_t time[9];
//	GPS_GetYear(year);
//	GPS_GetMonth(month);
//	GPS_GetDate(date);
	GPS_GetTime(time);
 80024d6:	463b      	mov	r3, r7
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fee1 	bl	80022a0 <GPS_GetTime>
	UART6_TxBuf[0] = 0x02;
 80024de:	4b80      	ldr	r3, [pc, #512]	; (80026e0 <main+0x318>)
 80024e0:	2202      	movs	r2, #2
 80024e2:	701a      	strb	r2, [r3, #0]
	UART6_TxBuf[1] = 5;
 80024e4:	4b7e      	ldr	r3, [pc, #504]	; (80026e0 <main+0x318>)
 80024e6:	2205      	movs	r2, #5
 80024e8:	705a      	strb	r2, [r3, #1]
	UART6_TxBuf[2] = '*';
 80024ea:	4b7d      	ldr	r3, [pc, #500]	; (80026e0 <main+0x318>)
 80024ec:	222a      	movs	r2, #42	; 0x2a
 80024ee:	709a      	strb	r2, [r3, #2]
	UART6_TxBuf[3] = get_check_sum((char *)UART6_TxBuf);
 80024f0:	487b      	ldr	r0, [pc, #492]	; (80026e0 <main+0x318>)
 80024f2:	f000 fefa 	bl	80032ea <get_check_sum>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b79      	ldr	r3, [pc, #484]	; (80026e0 <main+0x318>)
 80024fc:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 4);
 80024fe:	2204      	movs	r2, #4
 8002500:	4977      	ldr	r1, [pc, #476]	; (80026e0 <main+0x318>)
 8002502:	4872      	ldr	r0, [pc, #456]	; (80026cc <main+0x304>)
 8002504:	f004 fe0d 	bl	8007122 <HAL_UART_Transmit_IT>
	memset(UART6_TxBuf, 0, sizeof(UART6_TxBuf));
 8002508:	2232      	movs	r2, #50	; 0x32
 800250a:	2100      	movs	r1, #0
 800250c:	4874      	ldr	r0, [pc, #464]	; (80026e0 <main+0x318>)
 800250e:	f005 fda1 	bl	8008054 <memset>
	UART6_TxBuf[0] = charToInt((char *)&(time[6]));
 8002512:	463b      	mov	r3, r7
 8002514:	3306      	adds	r3, #6
 8002516:	4618      	mov	r0, r3
 8002518:	f001 f856 	bl	80035c8 <charToInt>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	4b6f      	ldr	r3, [pc, #444]	; (80026e0 <main+0x318>)
 8002522:	701a      	strb	r2, [r3, #0]
	UART6_TxBuf[1] = charToInt((char *)&(time[3]));
 8002524:	463b      	mov	r3, r7
 8002526:	3303      	adds	r3, #3
 8002528:	4618      	mov	r0, r3
 800252a:	f001 f84d 	bl	80035c8 <charToInt>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	4b6b      	ldr	r3, [pc, #428]	; (80026e0 <main+0x318>)
 8002534:	705a      	strb	r2, [r3, #1]
	UART6_TxBuf[2] = charToInt((char *)&(time[0]));
 8002536:	463b      	mov	r3, r7
 8002538:	4618      	mov	r0, r3
 800253a:	f001 f845 	bl	80035c8 <charToInt>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	4b67      	ldr	r3, [pc, #412]	; (80026e0 <main+0x318>)
 8002544:	709a      	strb	r2, [r3, #2]
	UART6_TxBuf[3] = '*';
 8002546:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <main+0x318>)
 8002548:	222a      	movs	r2, #42	; 0x2a
 800254a:	70da      	strb	r2, [r3, #3]
	UART6_TxBuf[4] = get_check_sum((char *)UART6_TxBuf);
 800254c:	4864      	ldr	r0, [pc, #400]	; (80026e0 <main+0x318>)
 800254e:	f000 fecc 	bl	80032ea <get_check_sum>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <main+0x318>)
 8002558:	711a      	strb	r2, [r3, #4]
	//snprintf(UART6_TxBuf, sizeof(UART6_TxBuf), "*%s%s%s", charToInt(&(time[6])), charToInt(&(time[3])), charToInt(&(time[0]))/*, charToInt(date), charToInt(month), charToInt(year)*/);
	//snprintf(UART6_TxBuf + strlen((char *) UART6_TxBuf), sizeof(UART6_TxBuf) - strlen((char *) UART6_TxBuf), "*%s", get_check_sum(UART6_TxBuf));
	HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf));
 800255a:	4861      	ldr	r0, [pc, #388]	; (80026e0 <main+0x318>)
 800255c:	f7fd fe4a 	bl	80001f4 <strlen>
 8002560:	4603      	mov	r3, r0
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	495e      	ldr	r1, [pc, #376]	; (80026e0 <main+0x318>)
 8002568:	4858      	ldr	r0, [pc, #352]	; (80026cc <main+0x304>)
 800256a:	f004 fdda 	bl	8007122 <HAL_UART_Transmit_IT>
	memset(UART6_TxBuf, 0, sizeof(UART6_TxBuf));
 800256e:	2232      	movs	r2, #50	; 0x32
 8002570:	2100      	movs	r1, #0
 8002572:	485b      	ldr	r0, [pc, #364]	; (80026e0 <main+0x318>)
 8002574:	f005 fd6e 	bl	8008054 <memset>
	UART6_TxBuf[0] = 0x42;
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <main+0x318>)
 800257a:	2242      	movs	r2, #66	; 0x42
 800257c:	701a      	strb	r2, [r3, #0]
	UART6_TxBuf[1] = 0x88;
 800257e:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <main+0x318>)
 8002580:	2288      	movs	r2, #136	; 0x88
 8002582:	705a      	strb	r2, [r3, #1]
	UART6_TxBuf[2] = '*';
 8002584:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <main+0x318>)
 8002586:	222a      	movs	r2, #42	; 0x2a
 8002588:	709a      	strb	r2, [r3, #2]
	UART6_TxBuf[3] = get_check_sum((char *)UART6_TxBuf);
 800258a:	4855      	ldr	r0, [pc, #340]	; (80026e0 <main+0x318>)
 800258c:	f000 fead 	bl	80032ea <get_check_sum>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4b52      	ldr	r3, [pc, #328]	; (80026e0 <main+0x318>)
 8002596:	70da      	strb	r2, [r3, #3]
	//HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf));
	memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 8002598:	2232      	movs	r2, #50	; 0x32
 800259a:	2100      	movs	r1, #0
 800259c:	484a      	ldr	r0, [pc, #296]	; (80026c8 <main+0x300>)
 800259e:	f005 fd59 	bl	8008054 <memset>
	HAL_ADC_MspInit(&hadc1);
 80025a2:	4850      	ldr	r0, [pc, #320]	; (80026e4 <main+0x31c>)
 80025a4:	f001 f86e 	bl	8003684 <HAL_ADC_MspInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(gsmRec){
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <main+0x320>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <main+0x1f2>
//		make_string_gsm((char *)gsm_dataBuf, sizeof(gsm_dataBuf));
//		if(GSM_Check_Signal()){
//			GSM_Message_Send(gsm_dataBuf, strlen((char *)gsm_dataBuf), 28654641);
//		}

		GSM_Off();
 80025b0:	f7ff feea 	bl	8002388 <GSM_Off>

		gsmRec = 0;
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <main+0x320>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_Base_Start_IT(&htim5);
	}
	if(do_send_tm){ // its time to send gps coordinates
 80025ba:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <main+0x324>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d058      	beq.n	8002674 <main+0x2ac>
		 for(uint8_t tries = 0; tries < 5; tries++){
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80025c8:	e047      	b.n	800265a <main+0x292>
			 UART6_RxIsData = 0;
 80025ca:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <main+0x328>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
			 UART6_RxBytes = 4;
 80025d0:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <main+0x2fc>)
 80025d2:	2204      	movs	r2, #4
 80025d4:	701a      	strb	r2, [r3, #0]
			 memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 80025d6:	2232      	movs	r2, #50	; 0x32
 80025d8:	2100      	movs	r1, #0
 80025da:	483b      	ldr	r0, [pc, #236]	; (80026c8 <main+0x300>)
 80025dc:	f005 fd3a 	bl	8008054 <memset>
			 HAL_UART_Receive_IT(&huart2, UART6_RxBuf, 4);
 80025e0:	2204      	movs	r2, #4
 80025e2:	4939      	ldr	r1, [pc, #228]	; (80026c8 <main+0x300>)
 80025e4:	483a      	ldr	r0, [pc, #232]	; (80026d0 <main+0x308>)
 80025e6:	f004 fde1 	bl	80071ac <HAL_UART_Receive_IT>
			 memset(UART6_TxBuf, 0, sizeof(UART6_TxBuf));
 80025ea:	2232      	movs	r2, #50	; 0x32
 80025ec:	2100      	movs	r1, #0
 80025ee:	483c      	ldr	r0, [pc, #240]	; (80026e0 <main+0x318>)
 80025f0:	f005 fd30 	bl	8008054 <memset>
			 UART6_TxBuf[0] = 0x03;
 80025f4:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <main+0x318>)
 80025f6:	2203      	movs	r2, #3
 80025f8:	701a      	strb	r2, [r3, #0]
			 UART6_TxBuf[1] = 0x99;
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <main+0x318>)
 80025fc:	2299      	movs	r2, #153	; 0x99
 80025fe:	705a      	strb	r2, [r3, #1]
			 UART6_TxBuf[2] = '*';
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <main+0x318>)
 8002602:	222a      	movs	r2, #42	; 0x2a
 8002604:	709a      	strb	r2, [r3, #2]
			 UART6_TxBuf[3] = crc_xor((char *)UART6_TxBuf);
 8002606:	4836      	ldr	r0, [pc, #216]	; (80026e0 <main+0x318>)
 8002608:	f000 fe8e 	bl	8003328 <crc_xor>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <main+0x318>)
 8002612:	70da      	strb	r2, [r3, #3]
			 HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 4);
 8002614:	2204      	movs	r2, #4
 8002616:	4932      	ldr	r1, [pc, #200]	; (80026e0 <main+0x318>)
 8002618:	482c      	ldr	r0, [pc, #176]	; (80026cc <main+0x304>)
 800261a:	f004 fd82 	bl	8007122 <HAL_UART_Transmit_IT>
			 //snprintf(UART6_TxBuf + strlen((char *) UART6_TxBuf), sizeof(UART6_TxBuf) - strlen((char *) UART6_TxBuf), "*%d", crc_xor(UART6_TxBuf));
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 800261e:	2201      	movs	r2, #1
 8002620:	2101      	movs	r1, #1
 8002622:	4823      	ldr	r0, [pc, #140]	; (80026b0 <main+0x2e8>)
 8002624:	f002 ffb2 	bl	800558c <HAL_GPIO_WritePin>
			 make_string((char *)tel_dataBuf, sizeof(tel_dataBuf));
 8002628:	216e      	movs	r1, #110	; 0x6e
 800262a:	482c      	ldr	r0, [pc, #176]	; (80026dc <main+0x314>)
 800262c:	f000 fea2 	bl	8003374 <make_string>
			 RTTY_Send(&SX1278, tel_dataBuf, strlen((char *)tel_dataBuf));
 8002630:	482a      	ldr	r0, [pc, #168]	; (80026dc <main+0x314>)
 8002632:	f7fd fddf 	bl	80001f4 <strlen>
 8002636:	4603      	mov	r3, r0
 8002638:	b2da      	uxtb	r2, r3
 800263a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800263e:	4927      	ldr	r1, [pc, #156]	; (80026dc <main+0x314>)
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fdf1 	bl	8003228 <RTTY_Send>
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8002646:	2200      	movs	r2, #0
 8002648:	2101      	movs	r1, #1
 800264a:	4819      	ldr	r0, [pc, #100]	; (80026b0 <main+0x2e8>)
 800264c:	f002 ff9e 	bl	800558c <HAL_GPIO_WritePin>
		 for(uint8_t tries = 0; tries < 5; tries++){
 8002650:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002654:	3301      	adds	r3, #1
 8002656:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800265a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800265e:	2b04      	cmp	r3, #4
 8002660:	d9b3      	bls.n	80025ca <main+0x202>
		 }
		 do_send_tm = 0;
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <main+0x324>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
		 receive_data = 1;
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <main+0x32c>)
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Start_IT(&htim2);
 800266e:	4822      	ldr	r0, [pc, #136]	; (80026f8 <main+0x330>)
 8002670:	f004 f8e6 	bl	8006840 <HAL_TIM_Base_Start_IT>
	}
	if(receive_data){
 8002674:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <main+0x32c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d095      	beq.n	80025a8 <main+0x1e0>
		if(sec_gps == 0){
 800267c:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <main+0x334>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d13f      	bne.n	8002704 <main+0x33c>
			SX1278_FSK_TxPacket(&SX1278, ready_to_receive, 8, 100);
 8002684:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002688:	2364      	movs	r3, #100	; 0x64
 800268a:	2208      	movs	r2, #8
 800268c:	491c      	ldr	r1, [pc, #112]	; (8002700 <main+0x338>)
 800268e:	f7ff f829 	bl	80016e4 <SX1278_FSK_TxPacket>
			SX1278_FSK_EntryRx(&SX1278, 8);
 8002692:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002696:	2108      	movs	r1, #8
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe ff59 	bl	8001550 <SX1278_FSK_EntryRx>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800269e:	2201      	movs	r2, #1
 80026a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <main+0x2e8>)
 80026a6:	f002 ff71 	bl	800558c <HAL_GPIO_WritePin>
 80026aa:	e048      	b.n	800273e <main+0x376>
 80026ac:	2000044c 	.word	0x2000044c
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020000 	.word	0x40020000
 80026b8:	2000031c 	.word	0x2000031c
 80026bc:	200005c0 	.word	0x200005c0
 80026c0:	20000494 	.word	0x20000494
 80026c4:	20000026 	.word	0x20000026
 80026c8:	200006b8 	.word	0x200006b8
 80026cc:	2000051c 	.word	0x2000051c
 80026d0:	200004d8 	.word	0x200004d8
 80026d4:	20000024 	.word	0x20000024
 80026d8:	20000638 	.word	0x20000638
 80026dc:	200005c4 	.word	0x200005c4
 80026e0:	20000650 	.word	0x20000650
 80026e4:	200002cc 	.word	0x200002cc
 80026e8:	2000064c 	.word	0x2000064c
 80026ec:	20000025 	.word	0x20000025
 80026f0:	2000064f 	.word	0x2000064f
 80026f4:	2000064d 	.word	0x2000064d
 80026f8:	20000374 	.word	0x20000374
 80026fc:	2000064e 	.word	0x2000064e
 8002700:	20000004 	.word	0x20000004
		}else if(sec_gps >= 5){
 8002704:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <main+0x3f0>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d918      	bls.n	800273e <main+0x376>
			do_send_tm = 1;		// should send TM data
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <main+0x3f4>)
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
			receive_data = 0;
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <main+0x3f8>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
			sec_gps = 0;
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <main+0x3f0>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002724:	4827      	ldr	r0, [pc, #156]	; (80027c4 <main+0x3fc>)
 8002726:	f002 ff31 	bl	800558c <HAL_GPIO_WritePin>
			SX1278_FSK_TxPacket(&SX1278, not_to_receive, 8, 100);
 800272a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800272e:	2364      	movs	r3, #100	; 0x64
 8002730:	2208      	movs	r2, #8
 8002732:	4925      	ldr	r1, [pc, #148]	; (80027c8 <main+0x400>)
 8002734:	f7fe ffd6 	bl	80016e4 <SX1278_FSK_TxPacket>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002738:	4824      	ldr	r0, [pc, #144]	; (80027cc <main+0x404>)
 800273a:	f004 f8e3 	bl	8006904 <HAL_TIM_Base_Stop_IT>
		}
		if(loraModuleIrq){
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <main+0x408>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f43f af30 	beq.w	80025a8 <main+0x1e0>
			SX1278_FSK_RxPacket(&SX1278, loraBuf, 8, 1000);
 8002748:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800274c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002750:	2208      	movs	r2, #8
 8002752:	4920      	ldr	r1, [pc, #128]	; (80027d4 <main+0x40c>)
 8002754:	f7ff f816 	bl	8001784 <SX1278_FSK_RxPacket>
			if(strcmp((char *)loraBuf, "cutropeN") == 0){
 8002758:	491f      	ldr	r1, [pc, #124]	; (80027d8 <main+0x410>)
 800275a:	481e      	ldr	r0, [pc, #120]	; (80027d4 <main+0x40c>)
 800275c:	f7fd fd40 	bl	80001e0 <strcmp>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d117      	bne.n	8002796 <main+0x3ce>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8002766:	2201      	movs	r2, #1
 8002768:	2104      	movs	r1, #4
 800276a:	4816      	ldr	r0, [pc, #88]	; (80027c4 <main+0x3fc>)
 800276c:	f002 ff0e 	bl	800558c <HAL_GPIO_WritePin>

				// SENDING COMMAND TO MCU TO CUT THE ROPE
				UART6_TxBuf[0] = 0x4f;
 8002770:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <main+0x414>)
 8002772:	224f      	movs	r2, #79	; 0x4f
 8002774:	701a      	strb	r2, [r3, #0]
				UART6_TxBuf[1] = 0xcc;
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <main+0x414>)
 8002778:	22cc      	movs	r2, #204	; 0xcc
 800277a:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 800277c:	2202      	movs	r2, #2
 800277e:	4917      	ldr	r1, [pc, #92]	; (80027dc <main+0x414>)
 8002780:	4817      	ldr	r0, [pc, #92]	; (80027e0 <main+0x418>)
 8002782:	f004 fcce 	bl	8007122 <HAL_UART_Transmit_IT>
				// SENDING COMMAND TO MCU TO CUT THE ROPE

				SX1278_FSK_TxPacket(&SX1278, ok_ack_message, 8, 100);
 8002786:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800278a:	2364      	movs	r3, #100	; 0x64
 800278c:	2208      	movs	r2, #8
 800278e:	4915      	ldr	r1, [pc, #84]	; (80027e4 <main+0x41c>)
 8002790:	f7fe ffa8 	bl	80016e4 <SX1278_FSK_TxPacket>
 8002794:	e006      	b.n	80027a4 <main+0x3dc>
			}else{
				SX1278_FSK_TxPacket(&SX1278, nok_ack_message, 8, 100);
 8002796:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800279a:	2364      	movs	r3, #100	; 0x64
 800279c:	2208      	movs	r2, #8
 800279e:	4912      	ldr	r1, [pc, #72]	; (80027e8 <main+0x420>)
 80027a0:	f7fe ffa0 	bl	80016e4 <SX1278_FSK_TxPacket>
			}
			loraModuleIrq = 0;
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <main+0x408>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
	if(gsmRec){
 80027aa:	e6fd      	b.n	80025a8 <main+0x1e0>
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2000064e 	.word	0x2000064e
 80027bc:	20000025 	.word	0x20000025
 80027c0:	2000064d 	.word	0x2000064d
 80027c4:	40020400 	.word	0x40020400
 80027c8:	2000000c 	.word	0x2000000c
 80027cc:	20000374 	.word	0x20000374
 80027d0:	20000646 	.word	0x20000646
 80027d4:	2000063c 	.word	0x2000063c
 80027d8:	0800af24 	.word	0x0800af24
 80027dc:	20000650 	.word	0x20000650
 80027e0:	2000051c 	.word	0x2000051c
 80027e4:	20000014 	.word	0x20000014
 80027e8:	2000001c 	.word	0x2000001c

080027ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b094      	sub	sp, #80	; 0x50
 80027f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f2:	f107 0320 	add.w	r3, r7, #32
 80027f6:	2230      	movs	r2, #48	; 0x30
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f005 fc2a 	bl	8008054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <SystemClock_Config+0xcc>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <SystemClock_Config+0xcc>)
 800281a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281e:	6413      	str	r3, [r2, #64]	; 0x40
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <SystemClock_Config+0xcc>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800282c:	2300      	movs	r3, #0
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <SystemClock_Config+0xd0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002838:	4a20      	ldr	r2, [pc, #128]	; (80028bc <SystemClock_Config+0xd0>)
 800283a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <SystemClock_Config+0xd0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800284c:	2301      	movs	r3, #1
 800284e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002856:	2302      	movs	r3, #2
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800285a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002860:	2304      	movs	r3, #4
 8002862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002864:	2354      	movs	r3, #84	; 0x54
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002868:	2302      	movs	r3, #2
 800286a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800286c:	2304      	movs	r3, #4
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002870:	f107 0320 	add.w	r3, r7, #32
 8002874:	4618      	mov	r0, r3
 8002876:	f002 febb 	bl	80055f0 <HAL_RCC_OscConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002880:	f000 fed3 	bl	800362a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002884:	230f      	movs	r3, #15
 8002886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002888:	2302      	movs	r3, #2
 800288a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	2102      	movs	r1, #2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 f91d 	bl	8005ae0 <HAL_RCC_ClockConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80028ac:	f000 febd 	bl	800362a <Error_Handler>
  }
}
 80028b0:	bf00      	nop
 80028b2:	3750      	adds	r7, #80	; 0x50
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000

080028c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028c6:	463b      	mov	r3, r7
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <MX_ADC1_Init+0x98>)
 80028d4:	4a21      	ldr	r2, [pc, #132]	; (800295c <MX_ADC1_Init+0x9c>)
 80028d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <MX_ADC1_Init+0x98>)
 80028da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <MX_ADC1_Init+0x98>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <MX_ADC1_Init+0x98>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <MX_ADC1_Init+0x98>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <MX_ADC1_Init+0x98>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <MX_ADC1_Init+0x98>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <MX_ADC1_Init+0x98>)
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <MX_ADC1_Init+0xa0>)
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <MX_ADC1_Init+0x98>)
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <MX_ADC1_Init+0x98>)
 800290e:	2201      	movs	r2, #1
 8002910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_ADC1_Init+0x98>)
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <MX_ADC1_Init+0x98>)
 800291c:	2201      	movs	r2, #1
 800291e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <MX_ADC1_Init+0x98>)
 8002922:	f001 fae1 	bl	8003ee8 <HAL_ADC_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800292c:	f000 fe7d 	bl	800362a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002930:	2310      	movs	r3, #16
 8002932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002934:	2301      	movs	r3, #1
 8002936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800293c:	463b      	mov	r3, r7
 800293e:	4619      	mov	r1, r3
 8002940:	4805      	ldr	r0, [pc, #20]	; (8002958 <MX_ADC1_Init+0x98>)
 8002942:	f001 fdc1 	bl	80044c8 <HAL_ADC_ConfigChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800294c:	f000 fe6d 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200002cc 	.word	0x200002cc
 800295c:	40012000 	.word	0x40012000
 8002960:	0f000001 	.word	0x0f000001

08002964 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <MX_CRC_Init+0x20>)
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <MX_CRC_Init+0x24>)
 800296c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_CRC_Init+0x20>)
 8002970:	f002 f8ef 	bl	8004b52 <HAL_CRC_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800297a:	f000 fe56 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000314 	.word	0x20000314
 8002988:	40023000 	.word	0x40023000

0800298c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <MX_SPI1_Init+0x64>)
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <MX_SPI1_Init+0x68>)
 8002994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <MX_SPI1_Init+0x64>)
 8002998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800299c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029c0:	2220      	movs	r2, #32
 80029c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029d8:	220a      	movs	r2, #10
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029dc:	4804      	ldr	r0, [pc, #16]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029de:	f003 fa9f 	bl	8005f20 <HAL_SPI_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029e8:	f000 fe1f 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	2000031c 	.word	0x2000031c
 80029f4:	40013000 	.word	0x40013000

080029f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <MX_TIM2_Init+0x98>)
 8002a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <MX_TIM2_Init+0x98>)
 8002a1e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <MX_TIM2_Init+0x98>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2625;
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <MX_TIM2_Init+0x98>)
 8002a2c:	f640 2241 	movw	r2, #2625	; 0xa41
 8002a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <MX_TIM2_Init+0x98>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <MX_TIM2_Init+0x98>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a3e:	4814      	ldr	r0, [pc, #80]	; (8002a90 <MX_TIM2_Init+0x98>)
 8002a40:	f003 feae 	bl	80067a0 <HAL_TIM_Base_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002a4a:	f000 fdee 	bl	800362a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <MX_TIM2_Init+0x98>)
 8002a5c:	f004 f889 	bl	8006b72 <HAL_TIM_ConfigClockSource>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002a66:	f000 fde0 	bl	800362a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a72:	463b      	mov	r3, r7
 8002a74:	4619      	mov	r1, r3
 8002a76:	4806      	ldr	r0, [pc, #24]	; (8002a90 <MX_TIM2_Init+0x98>)
 8002a78:	f004 fa84 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a82:	f000 fdd2 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000374 	.word	0x20000374

08002a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <MX_TIM3_Init+0x90>)
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <MX_TIM3_Init+0x94>)
 8002ab4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <MX_TIM3_Init+0x90>)
 8002ab8:	2254      	movs	r2, #84	; 0x54
 8002aba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <MX_TIM3_Init+0x90>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <MX_TIM3_Init+0x90>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <MX_TIM3_Init+0x90>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <MX_TIM3_Init+0x90>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ad4:	4813      	ldr	r0, [pc, #76]	; (8002b24 <MX_TIM3_Init+0x90>)
 8002ad6:	f003 fe63 	bl	80067a0 <HAL_TIM_Base_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002ae0:	f000 fda3 	bl	800362a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	4619      	mov	r1, r3
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <MX_TIM3_Init+0x90>)
 8002af2:	f004 f83e 	bl	8006b72 <HAL_TIM_ConfigClockSource>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002afc:	f000 fd95 	bl	800362a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b08:	463b      	mov	r3, r7
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4805      	ldr	r0, [pc, #20]	; (8002b24 <MX_TIM3_Init+0x90>)
 8002b0e:	f004 fa39 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002b18:	f000 fd87 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b1c:	bf00      	nop
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	200003bc 	.word	0x200003bc
 8002b28:	40000400 	.word	0x40000400

08002b2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b32:	f107 0308 	add.w	r3, r7, #8
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b40:	463b      	mov	r3, r7
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <MX_TIM4_Init+0x94>)
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <MX_TIM4_Init+0x98>)
 8002b4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <MX_TIM4_Init+0x94>)
 8002b50:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002b54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <MX_TIM4_Init+0x94>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7875;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <MX_TIM4_Init+0x94>)
 8002b5e:	f641 62c3 	movw	r2, #7875	; 0x1ec3
 8002b62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <MX_TIM4_Init+0x94>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <MX_TIM4_Init+0x94>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b70:	4813      	ldr	r0, [pc, #76]	; (8002bc0 <MX_TIM4_Init+0x94>)
 8002b72:	f003 fe15 	bl	80067a0 <HAL_TIM_Base_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b7c:	f000 fd55 	bl	800362a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <MX_TIM4_Init+0x94>)
 8002b8e:	f003 fff0 	bl	8006b72 <HAL_TIM_ConfigClockSource>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002b98:	f000 fd47 	bl	800362a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <MX_TIM4_Init+0x94>)
 8002baa:	f004 f9eb 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002bb4:	f000 fd39 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bb8:	bf00      	nop
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000404 	.word	0x20000404
 8002bc4:	40000800 	.word	0x40000800

08002bc8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bce:	f107 0308 	add.w	r3, r7, #8
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bdc:	463b      	mov	r3, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <MX_TIM5_Init+0x98>)
 8002be8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bf0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 384300;
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <MX_TIM5_Init+0x9c>)
 8002bfc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfe:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c04:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c0a:	4814      	ldr	r0, [pc, #80]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c0c:	f003 fdc8 	bl	80067a0 <HAL_TIM_Base_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c16:	f000 fd08 	bl	800362a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c20:	f107 0308 	add.w	r3, r7, #8
 8002c24:	4619      	mov	r1, r3
 8002c26:	480d      	ldr	r0, [pc, #52]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c28:	f003 ffa3 	bl	8006b72 <HAL_TIM_ConfigClockSource>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002c32:	f000 fcfa 	bl	800362a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c3e:	463b      	mov	r3, r7
 8002c40:	4619      	mov	r1, r3
 8002c42:	4806      	ldr	r0, [pc, #24]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c44:	f004 f99e 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002c4e:	f000 fcec 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000044c 	.word	0x2000044c
 8002c60:	40000c00 	.word	0x40000c00
 8002c64:	0005dd2c 	.word	0x0005dd2c

08002c68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <MX_USART1_UART_Init+0x50>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002ca0:	f004 f9f2 	bl	8007088 <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002caa:	f000 fcbe 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000494 	.word	0x20000494
 8002cb8:	40011000 	.word	0x40011000

08002cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <MX_USART2_UART_Init+0x50>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cf4:	f004 f9c8 	bl	8007088 <HAL_UART_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cfe:	f000 fc94 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200004d8 	.word	0x200004d8
 8002d0c:	40004400 	.word	0x40004400

08002d10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <MX_USART6_UART_Init+0x4c>)
 8002d16:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <MX_USART6_UART_Init+0x50>)
 8002d18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <MX_USART6_UART_Init+0x4c>)
 8002d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <MX_USART6_UART_Init+0x4c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <MX_USART6_UART_Init+0x4c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <MX_USART6_UART_Init+0x4c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <MX_USART6_UART_Init+0x4c>)
 8002d36:	220c      	movs	r2, #12
 8002d38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <MX_USART6_UART_Init+0x4c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <MX_USART6_UART_Init+0x4c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d46:	4805      	ldr	r0, [pc, #20]	; (8002d5c <MX_USART6_UART_Init+0x4c>)
 8002d48:	f004 f99e 	bl	8007088 <HAL_UART_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002d52:	f000 fc6a 	bl	800362a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000051c 	.word	0x2000051c
 8002d60:	40011400 	.word	0x40011400

08002d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <MX_DMA_Init+0x3c>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <MX_DMA_Init+0x3c>)
 8002d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <MX_DMA_Init+0x3c>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	203a      	movs	r0, #58	; 0x3a
 8002d8c:	f001 feab 	bl	8004ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002d90:	203a      	movs	r0, #58	; 0x3a
 8002d92:	f001 fec4 	bl	8004b1e <HAL_NVIC_EnableIRQ>

}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800

08002da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b5a      	ldr	r3, [pc, #360]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a55      	ldr	r2, [pc, #340]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b4f      	ldr	r3, [pc, #316]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a4e      	ldr	r2, [pc, #312]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <MX_GPIO_Init+0x190>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e30:	4841      	ldr	r0, [pc, #260]	; (8002f38 <MX_GPIO_Init+0x194>)
 8002e32:	f002 fbab 	bl	800558c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 8002e36:	2200      	movs	r2, #0
 8002e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e3c:	483e      	ldr	r0, [pc, #248]	; (8002f38 <MX_GPIO_Init+0x194>)
 8002e3e:	f002 fba5 	bl	800558c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSS_GPIO_Port, RF_NSS_Pin, GPIO_PIN_RESET);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2110      	movs	r1, #16
 8002e46:	483d      	ldr	r0, [pc, #244]	; (8002f3c <MX_GPIO_Init+0x198>)
 8002e48:	f002 fba0 	bl	800558c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f240 7117 	movw	r1, #1815	; 0x717
 8002e52:	483b      	ldr	r0, [pc, #236]	; (8002f40 <MX_GPIO_Init+0x19c>)
 8002e54:	f002 fb9a 	bl	800558c <HAL_GPIO_WritePin>
                          |RF_DIO1_Pin|GSM_RST_Pin|GSM_RTS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GSM_CTS_Pin GSM_PWR_Pin */
  GPIO_InitStruct.Pin = GSM_CTS_Pin|GSM_PWR_Pin;
 8002e58:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4831      	ldr	r0, [pc, #196]	; (8002f38 <MX_GPIO_Init+0x194>)
 8002e72:	f002 fa07 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_GPIO1INT_Pin */
  GPIO_InitStruct.Pin = GSM_GPIO1INT_Pin;
 8002e76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_GPIO1INT_GPIO_Port, &GPIO_InitStruct);
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	4619      	mov	r1, r3
 8002e8a:	482b      	ldr	r0, [pc, #172]	; (8002f38 <MX_GPIO_Init+0x194>)
 8002e8c:	f002 f9fa 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NSS_Pin */
  GPIO_InitStruct.Pin = RF_NSS_Pin;
 8002e90:	2310      	movs	r3, #16
 8002e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e94:	2301      	movs	r3, #1
 8002e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_NSS_GPIO_Port, &GPIO_InitStruct);
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4825      	ldr	r0, [pc, #148]	; (8002f3c <MX_GPIO_Init+0x198>)
 8002ea8:	f002 f9ec 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           RF_DIO1_Pin GSM_RTS_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8002eac:	f240 6317 	movw	r3, #1559	; 0x617
 8002eb0:	617b      	str	r3, [r7, #20]
                          |RF_DIO1_Pin|GSM_RTS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	481e      	ldr	r0, [pc, #120]	; (8002f40 <MX_GPIO_Init+0x19c>)
 8002ec6:	f002 f9dd 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DIO0_Pin */
  GPIO_InitStruct.Pin = RF_DIO0_Pin;
 8002eca:	2320      	movs	r3, #32
 8002ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ece:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	4818      	ldr	r0, [pc, #96]	; (8002f40 <MX_GPIO_Init+0x19c>)
 8002ee0:	f002 f9d0 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_RST_Pin */
  GPIO_InitStruct.Pin = RF_RST_Pin;
 8002ee4:	2340      	movs	r3, #64	; 0x40
 8002ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_RST_GPIO_Port, &GPIO_InitStruct);
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4812      	ldr	r0, [pc, #72]	; (8002f40 <MX_GPIO_Init+0x19c>)
 8002ef8:	f002 f9c4 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RST_Pin */
  GPIO_InitStruct.Pin = GSM_RST_Pin;
 8002efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f06:	2302      	movs	r3, #2
 8002f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_RST_GPIO_Port, &GPIO_InitStruct);
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	480a      	ldr	r0, [pc, #40]	; (8002f40 <MX_GPIO_Init+0x19c>)
 8002f16:	f002 f9b5 	bl	8005284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2017      	movs	r0, #23
 8002f20:	f001 fde1 	bl	8004ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f24:	2017      	movs	r0, #23
 8002f26:	f001 fdfa 	bl	8004b1e <HAL_NVIC_EnableIRQ>

}
 8002f2a:	bf00      	nop
 8002f2c:	3728      	adds	r7, #40	; 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	40020400 	.word	0x40020400

08002f44 <HAL_UART_RxCpltCallback>:
	}else{
		return CMD_ERROR;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a59      	ldr	r2, [pc, #356]	; (80030b4 <HAL_UART_RxCpltCallback+0x170>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d109      	bne.n	8002f68 <HAL_UART_RxCpltCallback+0x24>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 8002f54:	2201      	movs	r2, #1
 8002f56:	4958      	ldr	r1, [pc, #352]	; (80030b8 <HAL_UART_RxCpltCallback+0x174>)
 8002f58:	4856      	ldr	r0, [pc, #344]	; (80030b4 <HAL_UART_RxCpltCallback+0x170>)
 8002f5a:	f004 f927 	bl	80071ac <HAL_UART_Receive_IT>
		GPS_Receive(rxBuf);
 8002f5e:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_UART_RxCpltCallback+0x174>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fc94 	bl	8001890 <GPS_Receive>
		//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1);
	}

	if(huart == &huart6){
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a54      	ldr	r2, [pc, #336]	; (80030bc <HAL_UART_RxCpltCallback+0x178>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	f040 809c 	bne.w	80030aa <HAL_UART_RxCpltCallback+0x166>
			uint8_t Command = UART6_RxBuf[0];
 8002f72:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	73bb      	strb	r3, [r7, #14]
			uint8_t Parameter = UART6_RxBuf[1];
 8002f78:	4b51      	ldr	r3, [pc, #324]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8002f7a:	785b      	ldrb	r3, [r3, #1]
 8002f7c:	737b      	strb	r3, [r7, #13]

			if (UART6_RxIsData == 1){
 8002f7e:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <HAL_UART_RxCpltCallback+0x180>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d133      	bne.n	8002fee <HAL_UART_RxCpltCallback+0xaa>

				UART6_RxIsData = 0;
 8002f86:	4b4f      	ldr	r3, [pc, #316]	; (80030c4 <HAL_UART_RxCpltCallback+0x180>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
				UART6_RxBytes = 4;
 8002f8c:	4b4e      	ldr	r3, [pc, #312]	; (80030c8 <HAL_UART_RxCpltCallback+0x184>)
 8002f8e:	2204      	movs	r2, #4
 8002f90:	701a      	strb	r2, [r3, #0]
				uint8_t msg_len = strlen((char *)UART6_RxBuf);
 8002f92:	484b      	ldr	r0, [pc, #300]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8002f94:	f7fd f92e 	bl	80001f4 <strlen>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	733b      	strb	r3, [r7, #12]

				if(UART6_RxBuf[msg_len-1] == crc_xor((char *)UART6_RxBuf))
 8002f9c:	7b3b      	ldrb	r3, [r7, #12]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	4a47      	ldr	r2, [pc, #284]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8002fa2:	5cd4      	ldrb	r4, [r2, r3]
 8002fa4:	4846      	ldr	r0, [pc, #280]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8002fa6:	f000 f9bf 	bl	8003328 <crc_xor>
 8002faa:	4603      	mov	r3, r0
 8002fac:	429c      	cmp	r4, r3
 8002fae:	d110      	bne.n	8002fd2 <HAL_UART_RxCpltCallback+0x8e>
						for (uint8_t i = 0; i < (msg_len-2); i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e008      	b.n	8002fc8 <HAL_UART_RxCpltCallback+0x84>
							UART6_DataBuf[i] = UART6_RxBuf[i];
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	4941      	ldr	r1, [pc, #260]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8002fbc:	5c89      	ldrb	r1, [r1, r2]
 8002fbe:	4a43      	ldr	r2, [pc, #268]	; (80030cc <HAL_UART_RxCpltCallback+0x188>)
 8002fc0:	54d1      	strb	r1, [r2, r3]
						for (uint8_t i = 0; i < (msg_len-2); i++)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	7b3b      	ldrb	r3, [r7, #12]
 8002fcc:	3b02      	subs	r3, #2
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dbf1      	blt.n	8002fb6 <HAL_UART_RxCpltCallback+0x72>

				memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 8002fd2:	2232      	movs	r2, #50	; 0x32
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	483a      	ldr	r0, [pc, #232]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8002fd8:	f005 f83c 	bl	8008054 <memset>
				HAL_UART_Receive_IT(&huart2, UART6_RxBuf, UART6_RxBytes);
 8002fdc:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <HAL_UART_RxCpltCallback+0x184>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4936      	ldr	r1, [pc, #216]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8002fe6:	483a      	ldr	r0, [pc, #232]	; (80030d0 <HAL_UART_RxCpltCallback+0x18c>)
 8002fe8:	f004 f8e0 	bl	80071ac <HAL_UART_Receive_IT>
 8002fec:	e04a      	b.n	8003084 <HAL_UART_RxCpltCallback+0x140>


			}else{
				switch(Command){
 8002fee:	7bbb      	ldrb	r3, [r7, #14]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d03d      	beq.n	8003070 <HAL_UART_RxCpltCallback+0x12c>
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	dc42      	bgt.n	800307e <HAL_UART_RxCpltCallback+0x13a>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d042      	beq.n	8003082 <HAL_UART_RxCpltCallback+0x13e>
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d000      	beq.n	8003002 <HAL_UART_RxCpltCallback+0xbe>
						UART6_TxBuf[1] = Parameter;
					break;
					default:
						//nothing happens
						//HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
					break;
 8003000:	e03d      	b.n	800307e <HAL_UART_RxCpltCallback+0x13a>
						if(crc_xor((char *)UART6_RxBuf) == UART6_RxBuf[3]){
 8003002:	482f      	ldr	r0, [pc, #188]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8003004:	f000 f990 	bl	8003328 <crc_xor>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 800300e:	78db      	ldrb	r3, [r3, #3]
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <HAL_UART_RxCpltCallback+0xe0>
							UART6_RxIsData = 1;
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_UART_RxCpltCallback+0x180>)
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
							UART6_RxBytes = UART6_RxBuf[1];
 800301a:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 800301c:	785a      	ldrb	r2, [r3, #1]
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <HAL_UART_RxCpltCallback+0x184>)
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e01c      	b.n	800305e <HAL_UART_RxCpltCallback+0x11a>
							UART6_RxBytes = 4;
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_UART_RxCpltCallback+0x184>)
 8003026:	2204      	movs	r2, #4
 8003028:	701a      	strb	r2, [r3, #0]
							 UART6_TxBuf[0] = 0x03;
 800302a:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <HAL_UART_RxCpltCallback+0x190>)
 800302c:	2203      	movs	r2, #3
 800302e:	701a      	strb	r2, [r3, #0]
							 UART6_TxBuf[1] = 0x99;
 8003030:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_UART_RxCpltCallback+0x190>)
 8003032:	2299      	movs	r2, #153	; 0x99
 8003034:	705a      	strb	r2, [r3, #1]
							 UART6_TxBuf[2] = '*';
 8003036:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_UART_RxCpltCallback+0x190>)
 8003038:	222a      	movs	r2, #42	; 0x2a
 800303a:	709a      	strb	r2, [r3, #2]
							 UART6_TxBuf[3] = crc_xor((char *)UART6_TxBuf);
 800303c:	4825      	ldr	r0, [pc, #148]	; (80030d4 <HAL_UART_RxCpltCallback+0x190>)
 800303e:	f000 f973 	bl	8003328 <crc_xor>
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <HAL_UART_RxCpltCallback+0x190>)
 8003048:	70da      	strb	r2, [r3, #3]
							HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 4);
 800304a:	2204      	movs	r2, #4
 800304c:	4921      	ldr	r1, [pc, #132]	; (80030d4 <HAL_UART_RxCpltCallback+0x190>)
 800304e:	481b      	ldr	r0, [pc, #108]	; (80030bc <HAL_UART_RxCpltCallback+0x178>)
 8003050:	f004 f867 	bl	8007122 <HAL_UART_Transmit_IT>
							memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 8003054:	2232      	movs	r2, #50	; 0x32
 8003056:	2100      	movs	r1, #0
 8003058:	4819      	ldr	r0, [pc, #100]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 800305a:	f004 fffb 	bl	8008054 <memset>
						HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_UART_RxCpltCallback+0x184>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	4916      	ldr	r1, [pc, #88]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8003068:	4814      	ldr	r0, [pc, #80]	; (80030bc <HAL_UART_RxCpltCallback+0x178>)
 800306a:	f004 f89f 	bl	80071ac <HAL_UART_Receive_IT>
					break;
 800306e:	e009      	b.n	8003084 <HAL_UART_RxCpltCallback+0x140>
						UART6_TxBuf[0] = 0x02;
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_UART_RxCpltCallback+0x190>)
 8003072:	2202      	movs	r2, #2
 8003074:	701a      	strb	r2, [r3, #0]
						UART6_TxBuf[1] = Parameter;
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_UART_RxCpltCallback+0x190>)
 8003078:	7b7b      	ldrb	r3, [r7, #13]
 800307a:	7053      	strb	r3, [r2, #1]
					break;
 800307c:	e002      	b.n	8003084 <HAL_UART_RxCpltCallback+0x140>
					break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_UART_RxCpltCallback+0x140>
					break;
 8003082:	bf00      	nop
				}
			}
			if(Command != 0x02){
 8003084:	7bbb      	ldrb	r3, [r7, #14]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d00f      	beq.n	80030aa <HAL_UART_RxCpltCallback+0x166>
				UART6_RxBytes = 4;
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_UART_RxCpltCallback+0x184>)
 800308c:	2204      	movs	r2, #4
 800308e:	701a      	strb	r2, [r3, #0]
				memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 8003090:	2232      	movs	r2, #50	; 0x32
 8003092:	2100      	movs	r1, #0
 8003094:	480a      	ldr	r0, [pc, #40]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 8003096:	f004 ffdd 	bl	8008054 <memset>
				HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_UART_RxCpltCallback+0x184>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	4907      	ldr	r1, [pc, #28]	; (80030c0 <HAL_UART_RxCpltCallback+0x17c>)
 80030a4:	4805      	ldr	r0, [pc, #20]	; (80030bc <HAL_UART_RxCpltCallback+0x178>)
 80030a6:	f004 f881 	bl	80071ac <HAL_UART_Receive_IT>
			}
	}
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd90      	pop	{r4, r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000494 	.word	0x20000494
 80030b8:	200005c0 	.word	0x200005c0
 80030bc:	2000051c 	.word	0x2000051c
 80030c0:	200006b8 	.word	0x200006b8
 80030c4:	2000064f 	.word	0x2000064f
 80030c8:	20000026 	.word	0x20000026
 80030cc:	20000684 	.word	0x20000684
 80030d0:	200004d8 	.word	0x200004d8
 80030d4:	20000650 	.word	0x20000650

080030d8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); doesn't work for some reason...
	if(huart == &huart1){
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0e      	ldr	r2, [pc, #56]	; (800311c <HAL_UART_ErrorCallback+0x44>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d104      	bne.n	80030f2 <HAL_UART_ErrorCallback+0x1a>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 80030e8:	2201      	movs	r2, #1
 80030ea:	490d      	ldr	r1, [pc, #52]	; (8003120 <HAL_UART_ErrorCallback+0x48>)
 80030ec:	480b      	ldr	r0, [pc, #44]	; (800311c <HAL_UART_ErrorCallback+0x44>)
 80030ee:	f004 f85d 	bl	80071ac <HAL_UART_Receive_IT>
	}
	if(huart == &huart6){
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <HAL_UART_ErrorCallback+0x4c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10c      	bne.n	8003114 <HAL_UART_ErrorCallback+0x3c>
		memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 80030fa:	2232      	movs	r2, #50	; 0x32
 80030fc:	2100      	movs	r1, #0
 80030fe:	480a      	ldr	r0, [pc, #40]	; (8003128 <HAL_UART_ErrorCallback+0x50>)
 8003100:	f004 ffa8 	bl	8008054 <memset>
		HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_UART_ErrorCallback+0x54>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	4906      	ldr	r1, [pc, #24]	; (8003128 <HAL_UART_ErrorCallback+0x50>)
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <HAL_UART_ErrorCallback+0x4c>)
 8003110:	f004 f84c 	bl	80071ac <HAL_UART_Receive_IT>
	}
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000494 	.word	0x20000494
 8003120:	200005c0 	.word	0x200005c0
 8003124:	2000051c 	.word	0x2000051c
 8003128:	200006b8 	.word	0x200006b8
 800312c:	20000026 	.word	0x20000026

08003130 <MODE_Set>:

void MODE_Set(SX1278_t * module, uint8_t mode){
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af02      	add	r7, sp, #8
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
	  switch(mode){
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d015      	beq.n	800316e <MODE_Set+0x3e>
 8003142:	2b02      	cmp	r3, #2
 8003144:	dc17      	bgt.n	8003176 <MODE_Set+0x46>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <MODE_Set+0x20>
 800314a:	2b01      	cmp	r3, #1
 800314c:	d00b      	beq.n	8003166 <MODE_Set+0x36>
		  case 2: // RTTY config
			  SX1278_RTTY_Config(module);
		  break;

		  default: // lets ignore that one
		  break;
 800314e:	e012      	b.n	8003176 <MODE_Set+0x46>
			  SX1278_begin(module, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
 8003150:	2308      	movs	r3, #8
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	2303      	movs	r3, #3
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2302      	movs	r3, #2
 800315a:	2203      	movs	r2, #3
 800315c:	2100      	movs	r1, #0
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fb6e 	bl	8001840 <SX1278_begin>
		  break;
 8003164:	e008      	b.n	8003178 <MODE_Set+0x48>
			  SX1278_FSK_Config(module);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe f982 	bl	8001470 <SX1278_FSK_Config>
		  break;
 800316c:	e004      	b.n	8003178 <MODE_Set+0x48>
			  SX1278_RTTY_Config(module);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe f8e2 	bl	8001338 <SX1278_RTTY_Config>
		  break;
 8003174:	e000      	b.n	8003178 <MODE_Set+0x48>
		  break;
 8003176:	bf00      	nop
	  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d105      	bne.n	800319e <HAL_TIM_PeriodElapsedCallback+0x1e>
		sec_gps++;
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800319c:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM3){
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d102      	bne.n	80031ae <HAL_TIM_PeriodElapsedCallback+0x2e>
		u_sec_delay = 1;
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM4){
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d105      	bne.n	80031c4 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_TIM_Base_Stop_IT(&htim4);
 80031b8:	480f      	ldr	r0, [pc, #60]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80031ba:	f003 fba3 	bl	8006904 <HAL_TIM_Base_Stop_IT>
		gsmRec = 1;
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM5){
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d107      	bne.n	80031de <HAL_TIM_PeriodElapsedCallback+0x5e>
		HAL_TIM_Base_Stop_IT(&htim5);
 80031ce:	480d      	ldr	r0, [pc, #52]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80031d0:	f003 fb98 	bl	8006904 <HAL_TIM_Base_Stop_IT>
		GSM_On();
 80031d4:	f7ff f8b8 	bl	8002348 <GSM_On>
		HAL_TIM_Base_Start_IT(&htim4);
 80031d8:	4807      	ldr	r0, [pc, #28]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80031da:	f003 fb31 	bl	8006840 <HAL_TIM_Base_Start_IT>
	}
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	2000064e 	.word	0x2000064e
 80031ec:	40000400 	.word	0x40000400
 80031f0:	20000648 	.word	0x20000648
 80031f4:	40000800 	.word	0x40000800
 80031f8:	20000404 	.word	0x20000404
 80031fc:	2000064c 	.word	0x2000064c
 8003200:	40000c00 	.word	0x40000c00
 8003204:	2000044c 	.word	0x2000044c

08003208 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
	loraModuleIrq = 1;
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <HAL_GPIO_EXTI_Callback+0x1c>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	20000646 	.word	0x20000646

08003228 <RTTY_Send>:

void RTTY_Send(SX1278_t * module, uint8_t *buf, uint8_t len){
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	71fb      	strb	r3, [r7, #7]
	uint16_t baudTimeout = 20;
 8003236:	2314      	movs	r3, #20
 8003238:	82bb      	strh	r3, [r7, #20]
	uint8_t i;
	uint8_t curChar = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	74fb      	strb	r3, [r7, #19]

	SX1278_RTTY_Config(module);
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7fe f87a 	bl	8001338 <SX1278_RTTY_Config>

	for(i = 0; i < len; i++){
 8003244:	2300      	movs	r3, #0
 8003246:	75fb      	strb	r3, [r7, #23]
 8003248:	e00e      	b.n	8003268 <RTTY_Send+0x40>
		curChar = buf[i];
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	4413      	add	r3, r2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	74fb      	strb	r3, [r7, #19]
		RTTY_SendSingle(module, curChar, baudTimeout);
 8003254:	8abb      	ldrh	r3, [r7, #20]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	4619      	mov	r1, r3
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f80c 	bl	800327a <RTTY_SendSingle>
	for(i = 0; i < len; i++){
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	3301      	adds	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
 8003268:	7dfa      	ldrb	r2, [r7, #23]
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	429a      	cmp	r2, r3
 800326e:	d3ec      	bcc.n	800324a <RTTY_Send+0x22>
	}
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <RTTY_SendSingle>:

void RTTY_SendSingle(SX1278_t * module, uint8_t buf, uint8_t timeout){
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	70fb      	strb	r3, [r7, #3]
 8003286:	4613      	mov	r3, r2
 8003288:	70bb      	strb	r3, [r7, #2]
	SX1278_RTTY_WriteLow(module); //start bit
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe f89f 	bl	80013ce <SX1278_RTTY_WriteLow>
	HAL_Delay(timeout);
 8003290:	78bb      	ldrb	r3, [r7, #2]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fe04 	bl	8003ea0 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e015      	b.n	80032ca <RTTY_SendSingle+0x50>
		if(bit_set(buf, j)){
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	fa42 f303 	asr.w	r3, r2, r3
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <RTTY_SendSingle+0x3c>
			SX1278_RTTY_WriteHigh(module);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe f8b5 	bl	800141e <SX1278_RTTY_WriteHigh>
 80032b4:	e002      	b.n	80032bc <RTTY_SendSingle+0x42>
		}else{
			SX1278_RTTY_WriteLow(module);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe f889 	bl	80013ce <SX1278_RTTY_WriteLow>
		}
		HAL_Delay(timeout);
 80032bc:	78bb      	ldrb	r3, [r7, #2]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fdee 	bl	8003ea0 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	3301      	adds	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b07      	cmp	r3, #7
 80032ce:	d9e6      	bls.n	800329e <RTTY_SendSingle+0x24>
	}
	SX1278_RTTY_WriteHigh(module); // stop bit
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7fe f8a4 	bl	800141e <SX1278_RTTY_WriteHigh>
	HAL_Delay(30);
 80032d6:	201e      	movs	r0, #30
 80032d8:	f000 fde2 	bl	8003ea0 <HAL_Delay>
	SX1278_RTTY_Stop(module);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fe f85d 	bl	800139c <SX1278_RTTY_Stop>
}
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <get_check_sum>:

uint8_t get_check_sum(char *string){
 80032ea:	b590      	push	{r4, r7, lr}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
	uint8_t XOR = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 1; i < strlen(string); i++) {
 80032f6:	2301      	movs	r3, #1
 80032f8:	73bb      	strb	r3, [r7, #14]
 80032fa:	e009      	b.n	8003310 <get_check_sum+0x26>
		XOR = XOR ^ string[i];
 80032fc:	7bbb      	ldrb	r3, [r7, #14]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	4053      	eors	r3, r2
 8003308:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 1; i < strlen(string); i++) {
 800330a:	7bbb      	ldrb	r3, [r7, #14]
 800330c:	3301      	adds	r3, #1
 800330e:	73bb      	strb	r3, [r7, #14]
 8003310:	7bbc      	ldrb	r4, [r7, #14]
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fc ff6e 	bl	80001f4 <strlen>
 8003318:	4603      	mov	r3, r0
 800331a:	429c      	cmp	r4, r3
 800331c:	d3ee      	bcc.n	80032fc <get_check_sum+0x12>
	}
	return XOR;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bd90      	pop	{r4, r7, pc}

08003328 <crc_xor>:
uint8_t crc_xor(char *string){
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	uint8_t XOR = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; string[i] != '*' && i < strlen(string); i++){
 8003334:	2300      	movs	r3, #0
 8003336:	73bb      	strb	r3, [r7, #14]
 8003338:	e009      	b.n	800334e <crc_xor+0x26>
		XOR = XOR ^ string[i];
 800333a:	7bbb      	ldrb	r3, [r7, #14]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	4053      	eors	r3, r2
 8003346:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; string[i] != '*' && i < strlen(string); i++){
 8003348:	7bbb      	ldrb	r3, [r7, #14]
 800334a:	3301      	adds	r3, #1
 800334c:	73bb      	strb	r3, [r7, #14]
 800334e:	7bbb      	ldrb	r3, [r7, #14]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b2a      	cmp	r3, #42	; 0x2a
 8003358:	d006      	beq.n	8003368 <crc_xor+0x40>
 800335a:	7bbc      	ldrb	r4, [r7, #14]
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fc ff49 	bl	80001f4 <strlen>
 8003362:	4603      	mov	r3, r0
 8003364:	429c      	cmp	r4, r3
 8003366:	d3e8      	bcc.n	800333a <crc_xor+0x12>
	}
	return XOR;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bd90      	pop	{r4, r7, pc}
	...

08003374 <make_string>:

void make_string(char *s, uint8_t size){
 8003374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003376:	b09b      	sub	sp, #108	; 0x6c
 8003378:	af08      	add	r7, sp, #32
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	70fb      	strb	r3, [r7, #3]
	uint8_t lon[10];
	uint8_t hei[9];
	uint8_t spe[7];

	//CLEAR TEMP BUFFERS (SOMETIMES IT HAS INFORMATION IN IT, BECAUSE IT USES MEMORY LOCATION THAT WERE TEMP USED FOR OTHER STUFF) ONLY WHEN THERE IS +1 elemt in array
	memset(time, 0, sizeof(time));
 8003380:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003384:	220b      	movs	r2, #11
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f004 fe63 	bl	8008054 <memset>
	memset(lat, 0, sizeof(lat));
 800338e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003392:	220a      	movs	r2, #10
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f004 fe5c 	bl	8008054 <memset>
	memset(lon, 0, sizeof(lon));
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	220a      	movs	r2, #10
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f004 fe55 	bl	8008054 <memset>
	memset(hei, 0, sizeof(hei));
 80033aa:	f107 0310 	add.w	r3, r7, #16
 80033ae:	2209      	movs	r2, #9
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f004 fe4e 	bl	8008054 <memset>
	memset(spe, 0, sizeof(spe));
 80033b8:	f107 0308 	add.w	r3, r7, #8
 80033bc:	2207      	movs	r2, #7
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f004 fe47 	bl	8008054 <memset>

	//Get all params from satalites data
	GPS_GetTime(time);
 80033c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe ff68 	bl	80022a0 <GPS_GetTime>
	GPS_GetLat(lat);
 80033d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe fed5 	bl	8002184 <GPS_GetLat>
	GPS_GetLon(lon);
 80033da:	f107 031c 	add.w	r3, r7, #28
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fef4 	bl	80021cc <GPS_GetLon>
	GPS_GetHei(hei);
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe ff37 	bl	800225c <GPS_GetHei>
	GPS_GetSpe(spe);
 80033ee:	f107 0308 	add.w	r3, r7, #8
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe ff10 	bl	8002218 <GPS_GetSpe>

	snprintf(s, size, "\r\n$$IRBE5,%li,%s,%s,%s,%s,%s,%s,%.2f", ++num, time, lat, lon, hei, spe, UART6_DataBuf, temp_mcu());
 80033f8:	78fc      	ldrb	r4, [r7, #3]
 80033fa:	4b26      	ldr	r3, [pc, #152]	; (8003494 <make_string+0x120>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <make_string+0x120>)
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b23      	ldr	r3, [pc, #140]	; (8003494 <make_string+0x120>)
 8003406:	681d      	ldr	r5, [r3, #0]
 8003408:	f000 f84e 	bl	80034a8 <temp_mcu>
 800340c:	ee10 3a10 	vmov	r3, s0
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f8b1 	bl	8000578 <__aeabi_f2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800341e:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <make_string+0x124>)
 8003420:	9305      	str	r3, [sp, #20]
 8003422:	f107 0308 	add.w	r3, r7, #8
 8003426:	9304      	str	r3, [sp, #16]
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	9303      	str	r3, [sp, #12]
 800342e:	f107 031c 	add.w	r3, r7, #28
 8003432:	9302      	str	r3, [sp, #8]
 8003434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	462b      	mov	r3, r5
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <make_string+0x128>)
 8003444:	4621      	mov	r1, r4
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f005 fa76 	bl	8008938 <sniprintf>
	uint8_t l = strlen((char *)s);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fc fed1 	bl	80001f4 <strlen>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char *ptr = strrchr(s, '$');
 8003458:	2124      	movs	r1, #36	; 0x24
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f005 fab4 	bl	80089c8 <strrchr>
 8003460:	6438      	str	r0, [r7, #64]	; 0x40
	if(snprintf(s + l, size - l, "*%02x\r\n", get_check_sum(ptr))  > size - 4 - 1){
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	1f1c      	subs	r4, r3, #4
 8003466:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	18d5      	adds	r5, r2, r3
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	461e      	mov	r6, r3
 8003478:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800347a:	f7ff ff36 	bl	80032ea <get_check_sum>
 800347e:	4603      	mov	r3, r0
 8003480:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <make_string+0x12c>)
 8003482:	4631      	mov	r1, r6
 8003484:	4628      	mov	r0, r5
 8003486:	f005 fa57 	bl	8008938 <sniprintf>
 800348a:	4603      	mov	r3, r0
 800348c:	429c      	cmp	r4, r3
		//buffer overflow
		return;
	}
}
 800348e:	374c      	adds	r7, #76	; 0x4c
 8003490:	46bd      	mov	sp, r7
 8003492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003494:	20000634 	.word	0x20000634
 8003498:	20000684 	.word	0x20000684
 800349c:	0800af30 	.word	0x0800af30
 80034a0:	0800af58 	.word	0x0800af58
 80034a4:	00000000 	.word	0x00000000

080034a8 <temp_mcu>:
	GPS_GetHei(hei);

	snprintf(s, size, "Latitude:%s\nLongitude:%s\nHeight ASL:%s",lat, lon, hei);
}

float temp_mcu(void){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	  float TemperatureValue = 0;
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	607b      	str	r3, [r7, #4]
	  uint16_t value = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	807b      	strh	r3, [r7, #2]
	  if (HAL_ADC_Start(&hadc1) != HAL_OK){
 80034b8:	483f      	ldr	r0, [pc, #252]	; (80035b8 <temp_mcu+0x110>)
 80034ba:	f000 fd59 	bl	8003f70 <HAL_ADC_Start>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <temp_mcu+0x22>
		return HAL_ERROR;
 80034c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034c8:	e065      	b.n	8003596 <temp_mcu+0xee>
	  }
	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 80034ca:	f04f 31ff 	mov.w	r1, #4294967295
 80034ce:	483a      	ldr	r0, [pc, #232]	; (80035b8 <temp_mcu+0x110>)
 80034d0:	f000 fe02 	bl	80040d8 <HAL_ADC_PollForConversion>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <temp_mcu+0x38>
	  return HAL_ERROR;
 80034da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034de:	e05a      	b.n	8003596 <temp_mcu+0xee>
	  }
	  if((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC) !=  HAL_ADC_STATE_REG_EOC){
 80034e0:	4835      	ldr	r0, [pc, #212]	; (80035b8 <temp_mcu+0x110>)
 80034e2:	f001 f913 	bl	800470c <HAL_ADC_GetState>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f0:	d002      	beq.n	80034f8 <temp_mcu+0x50>
	  return HAL_ERROR;
 80034f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034f6:	e04e      	b.n	8003596 <temp_mcu+0xee>
	  }
	  value = HAL_ADC_GetValue(&hadc1);
 80034f8:	482f      	ldr	r0, [pc, #188]	; (80035b8 <temp_mcu+0x110>)
 80034fa:	f000 ffb9 	bl	8004470 <HAL_ADC_GetValue>
 80034fe:	4603      	mov	r3, r0
 8003500:	807b      	strh	r3, [r7, #2]
	  TemperatureValue = value & 0x0fff;// 12 bit result
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003510:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue *= 3300;
 8003514:	edd7 7a01 	vldr	s15, [r7, #4]
 8003518:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80035bc <temp_mcu+0x114>
 800351c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003520:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue /= 0xfff; //Reading in mV
 8003524:	ed97 7a01 	vldr	s14, [r7, #4]
 8003528:	eddf 6a25 	vldr	s13, [pc, #148]	; 80035c0 <temp_mcu+0x118>
 800352c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003530:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue /= 1000.0; //Reading in Volts
 8003534:	ed97 7a01 	vldr	s14, [r7, #4]
 8003538:	eddf 6a22 	vldr	s13, [pc, #136]	; 80035c4 <temp_mcu+0x11c>
 800353c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003540:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue -= 0.760; // Subtract the reference voltage at 25�C
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fd f817 	bl	8000578 <__aeabi_f2d>
 800354a:	a317      	add	r3, pc, #92	; (adr r3, 80035a8 <temp_mcu+0x100>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f7fc feb2 	bl	80002b8 <__aeabi_dsub>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	f7fd fb3c 	bl	8000bd8 <__aeabi_d2f>
 8003560:	4603      	mov	r3, r0
 8003562:	607b      	str	r3, [r7, #4]
	  TemperatureValue /= .0025; // Divide by slope 2.5mV
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7fd f807 	bl	8000578 <__aeabi_f2d>
 800356a:	a311      	add	r3, pc, #68	; (adr r3, 80035b0 <temp_mcu+0x108>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f7fd f984 	bl	800087c <__aeabi_ddiv>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	f7fd fb2c 	bl	8000bd8 <__aeabi_d2f>
 8003580:	4603      	mov	r3, r0
 8003582:	607b      	str	r3, [r7, #4]
	  TemperatureValue += 25.0; // Add the 25�C
 8003584:	edd7 7a01 	vldr	s15, [r7, #4]
 8003588:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800358c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003590:	edc7 7a01 	vstr	s15, [r7, #4]
	  return TemperatureValue;
 8003594:	687b      	ldr	r3, [r7, #4]
  }
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eeb0 0a67 	vmov.f32	s0, s15
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	f3af 8000 	nop.w
 80035a8:	851eb852 	.word	0x851eb852
 80035ac:	3fe851eb 	.word	0x3fe851eb
 80035b0:	47ae147b 	.word	0x47ae147b
 80035b4:	3f647ae1 	.word	0x3f647ae1
 80035b8:	200002cc 	.word	0x200002cc
 80035bc:	454e4000 	.word	0x454e4000
 80035c0:	457ff000 	.word	0x457ff000
 80035c4:	447a0000 	.word	0x447a0000

080035c8 <charToInt>:
uint8_t charToInt(char* c){
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	uint8_t num = {0};
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; 2 > i; i++){
 80035d4:	2300      	movs	r3, #0
 80035d6:	73bb      	strb	r3, [r7, #14]
 80035d8:	e01d      	b.n	8003616 <charToInt+0x4e>
		if(i == 0){
 80035da:	7bbb      	ldrb	r3, [r7, #14]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10e      	bne.n	80035fe <charToInt+0x36>
			num += (c[i] - '0') * 10;
 80035e0:	7bbb      	ldrb	r3, [r7, #14]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	3b30      	subs	r3, #48	; 0x30
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	4413      	add	r3, r2
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e008      	b.n	8003610 <charToInt+0x48>
		}else{
			num += c[i] - '0';
 80035fe:	7bbb      	ldrb	r3, [r7, #14]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	4413      	add	r3, r2
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3b30      	subs	r3, #48	; 0x30
 800360e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; 2 > i; i++){
 8003610:	7bbb      	ldrb	r3, [r7, #14]
 8003612:	3301      	adds	r3, #1
 8003614:	73bb      	strb	r3, [r7, #14]
 8003616:	7bbb      	ldrb	r3, [r7, #14]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d9de      	bls.n	80035da <charToInt+0x12>
		}
	}
	return num;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800362e:	b672      	cpsid	i
}
 8003630:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003632:	e7fe      	b.n	8003632 <Error_Handler+0x8>

08003634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <HAL_MspInit+0x4c>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <HAL_MspInit+0x4c>)
 8003644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003648:	6453      	str	r3, [r2, #68]	; 0x44
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <HAL_MspInit+0x4c>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_MspInit+0x4c>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	4a08      	ldr	r2, [pc, #32]	; (8003680 <HAL_MspInit+0x4c>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003664:	6413      	str	r3, [r2, #64]	; 0x40
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_MspInit+0x4c>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800

08003684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <HAL_ADC_MspInit+0x48>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d115      	bne.n	80036c2 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_ADC_MspInit+0x4c>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	4a0c      	ldr	r2, [pc, #48]	; (80036d0 <HAL_ADC_MspInit+0x4c>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a4:	6453      	str	r3, [r2, #68]	; 0x44
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_ADC_MspInit+0x4c>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	2012      	movs	r0, #18
 80036b8:	f001 fa15 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036bc:	2012      	movs	r0, #18
 80036be:	f001 fa2e 	bl	8004b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40012000 	.word	0x40012000
 80036d0:	40023800 	.word	0x40023800

080036d4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <HAL_CRC_MspInit+0x3c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10d      	bne.n	8003702 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_CRC_MspInit+0x40>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_CRC_MspInit+0x40>)
 80036f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_CRC_MspInit+0x40>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023000 	.word	0x40023000
 8003714:	40023800 	.word	0x40023800

08003718 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a19      	ldr	r2, [pc, #100]	; (800379c <HAL_SPI_MspInit+0x84>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d12b      	bne.n	8003792 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <HAL_SPI_MspInit+0x88>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	4a17      	ldr	r2, [pc, #92]	; (80037a0 <HAL_SPI_MspInit+0x88>)
 8003744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003748:	6453      	str	r3, [r2, #68]	; 0x44
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_SPI_MspInit+0x88>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_SPI_MspInit+0x88>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a10      	ldr	r2, [pc, #64]	; (80037a0 <HAL_SPI_MspInit+0x88>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6313      	str	r3, [r2, #48]	; 0x30
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_SPI_MspInit+0x88>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8003772:	23e0      	movs	r3, #224	; 0xe0
 8003774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003776:	2302      	movs	r3, #2
 8003778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377e:	2303      	movs	r3, #3
 8003780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003782:	2305      	movs	r3, #5
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	4619      	mov	r1, r3
 800378c:	4805      	ldr	r0, [pc, #20]	; (80037a4 <HAL_SPI_MspInit+0x8c>)
 800378e:	f001 fd79 	bl	8005284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003792:	bf00      	nop
 8003794:	3728      	adds	r7, #40	; 0x28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40013000 	.word	0x40013000
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40020000 	.word	0x40020000

080037a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b8:	d116      	bne.n	80037e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a35      	ldr	r2, [pc, #212]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b33      	ldr	r3, [pc, #204]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	2100      	movs	r1, #0
 80037da:	201c      	movs	r0, #28
 80037dc:	f001 f983 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037e0:	201c      	movs	r0, #28
 80037e2:	f001 f99c 	bl	8004b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80037e6:	e052      	b.n	800388e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2b      	ldr	r2, [pc, #172]	; (800389c <HAL_TIM_Base_MspInit+0xf4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d116      	bne.n	8003820 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	4b28      	ldr	r3, [pc, #160]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4a27      	ldr	r2, [pc, #156]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	6413      	str	r3, [r2, #64]	; 0x40
 8003802:	4b25      	ldr	r3, [pc, #148]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	201d      	movs	r0, #29
 8003814:	f001 f967 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003818:	201d      	movs	r0, #29
 800381a:	f001 f980 	bl	8004b1e <HAL_NVIC_EnableIRQ>
}
 800381e:	e036      	b.n	800388e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_TIM_Base_MspInit+0xf8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d116      	bne.n	8003858 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	4a19      	ldr	r2, [pc, #100]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 8003834:	f043 0304 	orr.w	r3, r3, #4
 8003838:	6413      	str	r3, [r2, #64]	; 0x40
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003846:	2200      	movs	r2, #0
 8003848:	2100      	movs	r1, #0
 800384a:	201e      	movs	r0, #30
 800384c:	f001 f94b 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003850:	201e      	movs	r0, #30
 8003852:	f001 f964 	bl	8004b1e <HAL_NVIC_EnableIRQ>
}
 8003856:	e01a      	b.n	800388e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a11      	ldr	r2, [pc, #68]	; (80038a4 <HAL_TIM_Base_MspInit+0xfc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d115      	bne.n	800388e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 800386c:	f043 0308 	orr.w	r3, r3, #8
 8003870:	6413      	str	r3, [r2, #64]	; 0x40
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_TIM_Base_MspInit+0xf0>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800387e:	2200      	movs	r2, #0
 8003880:	2100      	movs	r1, #0
 8003882:	2032      	movs	r0, #50	; 0x32
 8003884:	f001 f92f 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003888:	2032      	movs	r0, #50	; 0x32
 800388a:	f001 f948 	bl	8004b1e <HAL_NVIC_EnableIRQ>
}
 800388e:	bf00      	nop
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40000400 	.word	0x40000400
 80038a0:	40000800 	.word	0x40000800
 80038a4:	40000c00 	.word	0x40000c00

080038a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08e      	sub	sp, #56	; 0x38
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a6f      	ldr	r2, [pc, #444]	; (8003a84 <HAL_UART_MspInit+0x1dc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d164      	bne.n	8003994 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	4b6e      	ldr	r3, [pc, #440]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	4a6d      	ldr	r2, [pc, #436]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80038d4:	f043 0310 	orr.w	r3, r3, #16
 80038d8:	6453      	str	r3, [r2, #68]	; 0x44
 80038da:	4b6b      	ldr	r3, [pc, #428]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	4b67      	ldr	r3, [pc, #412]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a66      	ldr	r2, [pc, #408]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b64      	ldr	r3, [pc, #400]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003902:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003910:	2303      	movs	r3, #3
 8003912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003914:	2307      	movs	r3, #7
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800391c:	4619      	mov	r1, r3
 800391e:	485b      	ldr	r0, [pc, #364]	; (8003a8c <HAL_UART_MspInit+0x1e4>)
 8003920:	f001 fcb0 	bl	8005284 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003924:	4b5a      	ldr	r3, [pc, #360]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 8003926:	4a5b      	ldr	r2, [pc, #364]	; (8003a94 <HAL_UART_MspInit+0x1ec>)
 8003928:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800392a:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 800392c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003930:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003932:	4b57      	ldr	r3, [pc, #348]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003938:	4b55      	ldr	r3, [pc, #340]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800393e:	4b54      	ldr	r3, [pc, #336]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 8003940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003944:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003946:	4b52      	ldr	r3, [pc, #328]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 8003948:	2200      	movs	r2, #0
 800394a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003952:	4b4f      	ldr	r3, [pc, #316]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 8003954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003958:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800395a:	4b4d      	ldr	r3, [pc, #308]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 800395c:	2200      	movs	r2, #0
 800395e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003960:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 8003962:	2200      	movs	r2, #0
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003966:	484a      	ldr	r0, [pc, #296]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 8003968:	f001 f910 	bl	8004b8c <HAL_DMA_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003972:	f7ff fe5a 	bl	800362a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a45      	ldr	r2, [pc, #276]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
 800397c:	4a44      	ldr	r2, [pc, #272]	; (8003a90 <HAL_UART_MspInit+0x1e8>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003982:	2200      	movs	r2, #0
 8003984:	2100      	movs	r1, #0
 8003986:	2025      	movs	r0, #37	; 0x25
 8003988:	f001 f8ad 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800398c:	2025      	movs	r0, #37	; 0x25
 800398e:	f001 f8c6 	bl	8004b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003992:	e073      	b.n	8003a7c <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a3f      	ldr	r2, [pc, #252]	; (8003a98 <HAL_UART_MspInit+0x1f0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d134      	bne.n	8003a08 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a38      	ldr	r2, [pc, #224]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a31      	ldr	r2, [pc, #196]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 80039d6:	230c      	movs	r3, #12
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e2:	2303      	movs	r3, #3
 80039e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039e6:	2307      	movs	r3, #7
 80039e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ee:	4619      	mov	r1, r3
 80039f0:	4826      	ldr	r0, [pc, #152]	; (8003a8c <HAL_UART_MspInit+0x1e4>)
 80039f2:	f001 fc47 	bl	8005284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2100      	movs	r1, #0
 80039fa:	2026      	movs	r0, #38	; 0x26
 80039fc:	f001 f873 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a00:	2026      	movs	r0, #38	; 0x26
 8003a02:	f001 f88c 	bl	8004b1e <HAL_NVIC_EnableIRQ>
}
 8003a06:	e039      	b.n	8003a7c <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART6)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <HAL_UART_MspInit+0x1f4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d134      	bne.n	8003a7c <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 8003a1c:	f043 0320 	orr.w	r3, r3, #32
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_UART_MspInit+0x1e0>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8003a4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	2302      	movs	r3, #2
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a64:	4619      	mov	r1, r3
 8003a66:	4809      	ldr	r0, [pc, #36]	; (8003a8c <HAL_UART_MspInit+0x1e4>)
 8003a68:	f001 fc0c 	bl	8005284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2047      	movs	r0, #71	; 0x47
 8003a72:	f001 f838 	bl	8004ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a76:	2047      	movs	r0, #71	; 0x47
 8003a78:	f001 f851 	bl	8004b1e <HAL_NVIC_EnableIRQ>
}
 8003a7c:	bf00      	nop
 8003a7e:	3738      	adds	r7, #56	; 0x38
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40011000 	.word	0x40011000
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	20000560 	.word	0x20000560
 8003a94:	40026440 	.word	0x40026440
 8003a98:	40004400 	.word	0x40004400
 8003a9c:	40011400 	.word	0x40011400

08003aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <NMI_Handler+0x4>

08003aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aaa:	e7fe      	b.n	8003aaa <HardFault_Handler+0x4>

08003aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <MemManage_Handler+0x4>

08003ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ab6:	e7fe      	b.n	8003ab6 <BusFault_Handler+0x4>

08003ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003abc:	e7fe      	b.n	8003abc <UsageFault_Handler+0x4>

08003abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aec:	f000 f9b8 	bl	8003e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003af8:	4802      	ldr	r0, [pc, #8]	; (8003b04 <ADC_IRQHandler+0x10>)
 8003afa:	f000 fb78 	bl	80041ee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200002cc 	.word	0x200002cc

08003b08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_SCK_Pin);
 8003b0c:	2020      	movs	r0, #32
 8003b0e:	f001 fd57 	bl	80055c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b1c:	4802      	ldr	r0, [pc, #8]	; (8003b28 <TIM2_IRQHandler+0x10>)
 8003b1e:	f002 ff20 	bl	8006962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000374 	.word	0x20000374

08003b2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b30:	4802      	ldr	r0, [pc, #8]	; (8003b3c <TIM3_IRQHandler+0x10>)
 8003b32:	f002 ff16 	bl	8006962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200003bc 	.word	0x200003bc

08003b40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b44:	4802      	ldr	r0, [pc, #8]	; (8003b50 <TIM4_IRQHandler+0x10>)
 8003b46:	f002 ff0c 	bl	8006962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000404 	.word	0x20000404

08003b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b58:	4802      	ldr	r0, [pc, #8]	; (8003b64 <USART1_IRQHandler+0x10>)
 8003b5a:	f003 fb57 	bl	800720c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000494 	.word	0x20000494

08003b68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b6c:	4802      	ldr	r0, [pc, #8]	; (8003b78 <USART2_IRQHandler+0x10>)
 8003b6e:	f003 fb4d 	bl	800720c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200004d8 	.word	0x200004d8

08003b7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b80:	4802      	ldr	r0, [pc, #8]	; (8003b8c <TIM5_IRQHandler+0x10>)
 8003b82:	f002 feee 	bl	8006962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000044c 	.word	0x2000044c

08003b90 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <DMA2_Stream2_IRQHandler+0x10>)
 8003b96:	f001 f939 	bl	8004e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000560 	.word	0x20000560

08003ba4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <USART6_IRQHandler+0x10>)
 8003baa:	f003 fb2f 	bl	800720c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000051c 	.word	0x2000051c

08003bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
	return 1;
 8003bbc:	2301      	movs	r3, #1
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <_kill>:

int _kill(int pid, int sig)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bd2:	f004 fa07 	bl	8007fe4 <__errno>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2216      	movs	r2, #22
 8003bda:	601a      	str	r2, [r3, #0]
	return -1;
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <_exit>:

void _exit (int status)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ffe7 	bl	8003bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003bfa:	e7fe      	b.n	8003bfa <_exit+0x12>

08003bfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e00a      	b.n	8003c24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c0e:	f3af 8000 	nop.w
 8003c12:	4601      	mov	r1, r0
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	60ba      	str	r2, [r7, #8]
 8003c1a:	b2ca      	uxtb	r2, r1
 8003c1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3301      	adds	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	dbf0      	blt.n	8003c0e <_read+0x12>
	}

return len;
 8003c2c:	687b      	ldr	r3, [r7, #4]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e009      	b.n	8003c5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	60ba      	str	r2, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	dbf1      	blt.n	8003c48 <_write+0x12>
	}
	return len;
 8003c64:	687b      	ldr	r3, [r7, #4]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_close>:

int _close(int file)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
	return -1;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c96:	605a      	str	r2, [r3, #4]
	return 0;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <_isatty>:

int _isatty(int file)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
	return 1;
 8003cae:	2301      	movs	r3, #1
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ce0:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <_sbrk+0x5c>)
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <_sbrk+0x60>)
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <_sbrk+0x64>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <_sbrk+0x64>)
 8003cf6:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <_sbrk+0x68>)
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <_sbrk+0x64>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d207      	bcs.n	8003d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d08:	f004 f96c 	bl	8007fe4 <__errno>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	220c      	movs	r2, #12
 8003d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	e009      	b.n	8003d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d18:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <_sbrk+0x64>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <_sbrk+0x64>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <_sbrk+0x64>)
 8003d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20018000 	.word	0x20018000
 8003d38:	00000400 	.word	0x00000400
 8003d3c:	200006ec 	.word	0x200006ec
 8003d40:	20000708 	.word	0x20000708

08003d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <SystemInit+0x20>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <SystemInit+0x20>)
 8003d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d6c:	480d      	ldr	r0, [pc, #52]	; (8003da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d6e:	490e      	ldr	r1, [pc, #56]	; (8003da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d70:	4a0e      	ldr	r2, [pc, #56]	; (8003dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d74:	e002      	b.n	8003d7c <LoopCopyDataInit>

08003d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d7a:	3304      	adds	r3, #4

08003d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d80:	d3f9      	bcc.n	8003d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d82:	4a0b      	ldr	r2, [pc, #44]	; (8003db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d84:	4c0b      	ldr	r4, [pc, #44]	; (8003db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d88:	e001      	b.n	8003d8e <LoopFillZerobss>

08003d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d8c:	3204      	adds	r2, #4

08003d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d90:	d3fb      	bcc.n	8003d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d92:	f7ff ffd7 	bl	8003d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d96:	f004 f92b 	bl	8007ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d9a:	f7fe fb15 	bl	80023c8 <main>
  bx  lr    
 8003d9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003da0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003da8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003dac:	0800b3ac 	.word	0x0800b3ac
  ldr r2, =_sbss
 8003db0:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003db4:	20000704 	.word	0x20000704

08003db8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003db8:	e7fe      	b.n	8003db8 <DMA1_Stream0_IRQHandler>
	...

08003dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <HAL_Init+0x40>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <HAL_Init+0x40>)
 8003dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_Init+0x40>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <HAL_Init+0x40>)
 8003dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_Init+0x40>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <HAL_Init+0x40>)
 8003dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de4:	2003      	movs	r0, #3
 8003de6:	f000 fe73 	bl	8004ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dea:	200f      	movs	r0, #15
 8003dec:	f000 f808 	bl	8003e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003df0:	f7ff fc20 	bl	8003634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023c00 	.word	0x40023c00

08003e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_InitTick+0x54>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_InitTick+0x58>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	4619      	mov	r1, r3
 8003e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fe8b 	bl	8004b3a <HAL_SYSTICK_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e00e      	b.n	8003e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b0f      	cmp	r3, #15
 8003e32:	d80a      	bhi.n	8003e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e34:	2200      	movs	r2, #0
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	f000 fe53 	bl	8004ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e40:	4a06      	ldr	r2, [pc, #24]	; (8003e5c <HAL_InitTick+0x5c>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000028 	.word	0x20000028
 8003e58:	20000030 	.word	0x20000030
 8003e5c:	2000002c 	.word	0x2000002c

08003e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_IncTick+0x20>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_IncTick+0x24>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4413      	add	r3, r2
 8003e70:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <HAL_IncTick+0x24>)
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000030 	.word	0x20000030
 8003e84:	200006f0 	.word	0x200006f0

08003e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_GetTick+0x14>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	200006f0 	.word	0x200006f0

08003ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ea8:	f7ff ffee 	bl	8003e88 <HAL_GetTick>
 8003eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d005      	beq.n	8003ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_Delay+0x44>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ec6:	bf00      	nop
 8003ec8:	f7ff ffde 	bl	8003e88 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d8f7      	bhi.n	8003ec8 <HAL_Delay+0x28>
  {
  }
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000030 	.word	0x20000030

08003ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e033      	b.n	8003f66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff fbbc 	bl	8003684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f2e:	f023 0302 	bic.w	r3, r3, #2
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fbf2 	bl	8004724 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
 8003f56:	e001      	b.n	8003f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_Start+0x1a>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e097      	b.n	80040ba <HAL_ADC_Start+0x14a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d018      	beq.n	8003fd2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fb0:	4b45      	ldr	r3, [pc, #276]	; (80040c8 <HAL_ADC_Start+0x158>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a45      	ldr	r2, [pc, #276]	; (80040cc <HAL_ADC_Start+0x15c>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	0c9a      	lsrs	r2, r3, #18
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003fc4:	e002      	b.n	8003fcc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f9      	bne.n	8003fc6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d15f      	bne.n	80040a0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800400a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	d106      	bne.n	800402e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	f023 0206 	bic.w	r2, r3, #6
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	645a      	str	r2, [r3, #68]	; 0x44
 800402c:	e002      	b.n	8004034 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800403c:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_ADC_Start+0x160>)
 800403e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004048:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d129      	bne.n	80040b8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	e020      	b.n	80040b8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a16      	ldr	r2, [pc, #88]	; (80040d4 <HAL_ADC_Start+0x164>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d11b      	bne.n	80040b8 <HAL_ADC_Start+0x148>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d114      	bne.n	80040b8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	e00b      	b.n	80040b8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f043 0210 	orr.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	f043 0201 	orr.w	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000028 	.word	0x20000028
 80040cc:	431bde83 	.word	0x431bde83
 80040d0:	40012300 	.word	0x40012300
 80040d4:	40012000 	.word	0x40012000

080040d8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f4:	d113      	bne.n	800411e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004104:	d10b      	bne.n	800411e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f043 0220 	orr.w	r2, r3, #32
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e063      	b.n	80041e6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800411e:	f7ff feb3 	bl	8003e88 <HAL_GetTick>
 8004122:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004124:	e021      	b.n	800416a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d01d      	beq.n	800416a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <HAL_ADC_PollForConversion+0x6c>
 8004134:	f7ff fea8 	bl	8003e88 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d212      	bcs.n	800416a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d00b      	beq.n	800416a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f043 0204 	orr.w	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e03d      	b.n	80041e6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d1d6      	bne.n	8004126 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0212 	mvn.w	r2, #18
 8004180:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d123      	bne.n	80041e4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d11f      	bne.n	80041e4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d006      	beq.n	80041c0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d111      	bne.n	80041e4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b02      	cmp	r3, #2
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b20      	cmp	r3, #32
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d049      	beq.n	80042c4 <HAL_ADC_IRQHandler+0xd6>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d046      	beq.n	80042c4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b00      	cmp	r3, #0
 8004240:	d105      	bne.n	800424e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d12b      	bne.n	80042b4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004260:	2b00      	cmp	r3, #0
 8004262:	d127      	bne.n	80042b4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800427c:	2b00      	cmp	r3, #0
 800427e:	d119      	bne.n	80042b4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0220 	bic.w	r2, r2, #32
 800428e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8e8 	bl	800448a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0212 	mvn.w	r2, #18
 80042c2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d057      	beq.n	80043a6 <HAL_ADC_IRQHandler+0x1b8>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d054      	beq.n	80043a6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d139      	bne.n	8004396 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800432c:	2b00      	cmp	r3, #0
 800432e:	d006      	beq.n	800433e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800433a:	2b00      	cmp	r3, #0
 800433c:	d12b      	bne.n	8004396 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004348:	2b00      	cmp	r3, #0
 800434a:	d124      	bne.n	8004396 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11d      	bne.n	8004396 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800435e:	2b00      	cmp	r3, #0
 8004360:	d119      	bne.n	8004396 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004370:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fac0 	bl	800491c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 020c 	mvn.w	r2, #12
 80043a4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	bf0c      	ite	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	2300      	movne	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <HAL_ADC_IRQHandler+0x21a>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d014      	beq.n	8004408 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d10d      	bne.n	8004408 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f850 	bl	800449e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f06f 0201 	mvn.w	r2, #1
 8004406:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b20      	cmp	r3, #32
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d015      	beq.n	8004468 <HAL_ADC_IRQHandler+0x27a>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d012      	beq.n	8004468 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	f043 0202 	orr.w	r2, r3, #2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f06f 0220 	mvn.w	r2, #32
 8004456:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f82a 	bl	80044b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f06f 0220 	mvn.w	r2, #32
 8004466:	601a      	str	r2, [r3, #0]
  }
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x1c>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e105      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x228>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b09      	cmp	r3, #9
 80044f2:	d925      	bls.n	8004540 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68d9      	ldr	r1, [r3, #12]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	4613      	mov	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4413      	add	r3, r2
 8004508:	3b1e      	subs	r3, #30
 800450a:	2207      	movs	r2, #7
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43da      	mvns	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	400a      	ands	r2, r1
 8004518:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68d9      	ldr	r1, [r3, #12]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	4618      	mov	r0, r3
 800452c:	4603      	mov	r3, r0
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4403      	add	r3, r0
 8004532:	3b1e      	subs	r3, #30
 8004534:	409a      	lsls	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	e022      	b.n	8004586 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6919      	ldr	r1, [r3, #16]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	2207      	movs	r2, #7
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43da      	mvns	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	400a      	ands	r2, r1
 8004562:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6919      	ldr	r1, [r3, #16]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	4618      	mov	r0, r3
 8004576:	4603      	mov	r3, r0
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4403      	add	r3, r0
 800457c:	409a      	lsls	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b06      	cmp	r3, #6
 800458c:	d824      	bhi.n	80045d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	3b05      	subs	r3, #5
 80045a0:	221f      	movs	r2, #31
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43da      	mvns	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	400a      	ands	r2, r1
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4618      	mov	r0, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	3b05      	subs	r3, #5
 80045ca:	fa00 f203 	lsl.w	r2, r0, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	635a      	str	r2, [r3, #52]	; 0x34
 80045d6:	e04c      	b.n	8004672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d824      	bhi.n	800462a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	3b23      	subs	r3, #35	; 0x23
 80045f2:	221f      	movs	r2, #31
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43da      	mvns	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	400a      	ands	r2, r1
 8004600:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	4618      	mov	r0, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	3b23      	subs	r3, #35	; 0x23
 800461c:	fa00 f203 	lsl.w	r2, r0, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
 8004628:	e023      	b.n	8004672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	3b41      	subs	r3, #65	; 0x41
 800463c:	221f      	movs	r2, #31
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	400a      	ands	r2, r1
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	4618      	mov	r0, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	3b41      	subs	r3, #65	; 0x41
 8004666:	fa00 f203 	lsl.w	r2, r0, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004672:	4b22      	ldr	r3, [pc, #136]	; (80046fc <HAL_ADC_ConfigChannel+0x234>)
 8004674:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a21      	ldr	r2, [pc, #132]	; (8004700 <HAL_ADC_ConfigChannel+0x238>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d109      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x1cc>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b12      	cmp	r3, #18
 8004686:	d105      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <HAL_ADC_ConfigChannel+0x238>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d123      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x21e>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d003      	beq.n	80046ae <HAL_ADC_ConfigChannel+0x1e6>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b11      	cmp	r3, #17
 80046ac:	d11b      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d111      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_ADC_ConfigChannel+0x23c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a10      	ldr	r2, [pc, #64]	; (8004708 <HAL_ADC_ConfigChannel+0x240>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	0c9a      	lsrs	r2, r3, #18
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046d8:	e002      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3b01      	subs	r3, #1
 80046de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f9      	bne.n	80046da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40012300 	.word	0x40012300
 8004700:	40012000 	.word	0x40012000
 8004704:	20000028 	.word	0x20000028
 8004708:	431bde83 	.word	0x431bde83

0800470c <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800472c:	4b79      	ldr	r3, [pc, #484]	; (8004914 <ADC_Init+0x1f0>)
 800472e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6859      	ldr	r1, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	021a      	lsls	r2, r3, #8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800477c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	4a58      	ldr	r2, [pc, #352]	; (8004918 <ADC_Init+0x1f4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6899      	ldr	r1, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6899      	ldr	r1, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	e00f      	b.n	8004822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0202 	bic.w	r2, r2, #2
 8004830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7e1b      	ldrb	r3, [r3, #24]
 800483c:	005a      	lsls	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01b      	beq.n	8004888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800486e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	3b01      	subs	r3, #1
 800487c:	035a      	lsls	r2, r3, #13
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	e007      	b.n	8004898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004896:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	051a      	lsls	r2, r3, #20
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048da:	025a      	lsls	r2, r3, #9
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6899      	ldr	r1, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	029a      	lsls	r2, r3, #10
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40012300 	.word	0x40012300
 8004918:	0f000001 	.word	0x0f000001

0800491c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <__NVIC_SetPriorityGrouping+0x44>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800494c:	4013      	ands	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800495c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <__NVIC_SetPriorityGrouping+0x44>)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	60d3      	str	r3, [r2, #12]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	e000ed00 	.word	0xe000ed00

08004978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <__NVIC_GetPriorityGrouping+0x18>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	f003 0307 	and.w	r3, r3, #7
}
 8004986:	4618      	mov	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800499e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	db0b      	blt.n	80049be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	f003 021f 	and.w	r2, r3, #31
 80049ac:	4907      	ldr	r1, [pc, #28]	; (80049cc <__NVIC_EnableIRQ+0x38>)
 80049ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	2001      	movs	r0, #1
 80049b6:	fa00 f202 	lsl.w	r2, r0, r2
 80049ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e000e100 	.word	0xe000e100

080049d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	6039      	str	r1, [r7, #0]
 80049da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	db0a      	blt.n	80049fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	490c      	ldr	r1, [pc, #48]	; (8004a1c <__NVIC_SetPriority+0x4c>)
 80049ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ee:	0112      	lsls	r2, r2, #4
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	440b      	add	r3, r1
 80049f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f8:	e00a      	b.n	8004a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	4908      	ldr	r1, [pc, #32]	; (8004a20 <__NVIC_SetPriority+0x50>)
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	3b04      	subs	r3, #4
 8004a08:	0112      	lsls	r2, r2, #4
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	761a      	strb	r2, [r3, #24]
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000e100 	.word	0xe000e100
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f1c3 0307 	rsb	r3, r3, #7
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	bf28      	it	cs
 8004a42:	2304      	movcs	r3, #4
 8004a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	2b06      	cmp	r3, #6
 8004a4c:	d902      	bls.n	8004a54 <NVIC_EncodePriority+0x30>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3b03      	subs	r3, #3
 8004a52:	e000      	b.n	8004a56 <NVIC_EncodePriority+0x32>
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a58:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	43da      	mvns	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	401a      	ands	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	43d9      	mvns	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a7c:	4313      	orrs	r3, r2
         );
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3724      	adds	r7, #36	; 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a9c:	d301      	bcc.n	8004aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e00f      	b.n	8004ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <SysTick_Config+0x40>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aaa:	210f      	movs	r1, #15
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	f7ff ff8e 	bl	80049d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <SysTick_Config+0x40>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aba:	4b04      	ldr	r3, [pc, #16]	; (8004acc <SysTick_Config+0x40>)
 8004abc:	2207      	movs	r2, #7
 8004abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	e000e010 	.word	0xe000e010

08004ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ff29 	bl	8004930 <__NVIC_SetPriorityGrouping>
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b086      	sub	sp, #24
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	4603      	mov	r3, r0
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004af8:	f7ff ff3e 	bl	8004978 <__NVIC_GetPriorityGrouping>
 8004afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	6978      	ldr	r0, [r7, #20]
 8004b04:	f7ff ff8e 	bl	8004a24 <NVIC_EncodePriority>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff ff5d 	bl	80049d0 <__NVIC_SetPriority>
}
 8004b16:	bf00      	nop
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ff31 	bl	8004994 <__NVIC_EnableIRQ>
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ffa2 	bl	8004a8c <SysTick_Config>
 8004b48:	4603      	mov	r3, r0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e00e      	b.n	8004b82 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	795b      	ldrb	r3, [r3, #5]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fe fdad 	bl	80036d4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b98:	f7ff f976 	bl	8003e88 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e099      	b.n	8004cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bc8:	e00f      	b.n	8004bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bca:	f7ff f95d 	bl	8003e88 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d908      	bls.n	8004bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2203      	movs	r2, #3
 8004be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e078      	b.n	8004cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e8      	bne.n	8004bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <HAL_DMA_Init+0x158>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d107      	bne.n	8004c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0307 	bic.w	r3, r3, #7
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d117      	bne.n	8004cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00e      	beq.n	8004cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fa7b 	bl	800518c <DMA_CheckFifoParam>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2240      	movs	r2, #64	; 0x40
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004caa:	2301      	movs	r3, #1
 8004cac:	e016      	b.n	8004cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fa32 	bl	8005120 <DMA_CalcBaseAndBitshift>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	223f      	movs	r2, #63	; 0x3f
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	f010803f 	.word	0xf010803f

08004ce8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cf6:	f7ff f8c7 	bl	8003e88 <HAL_GetTick>
 8004cfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d008      	beq.n	8004d1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2280      	movs	r2, #128	; 0x80
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e052      	b.n	8004dc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0216 	bic.w	r2, r2, #22
 8004d28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <HAL_DMA_Abort+0x62>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0208 	bic.w	r2, r2, #8
 8004d58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6a:	e013      	b.n	8004d94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d6c:	f7ff f88c 	bl	8003e88 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b05      	cmp	r3, #5
 8004d78:	d90c      	bls.n	8004d94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2203      	movs	r2, #3
 8004d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e015      	b.n	8004dc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e4      	bne.n	8004d6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da6:	223f      	movs	r2, #63	; 0x3f
 8004da8:	409a      	lsls	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d004      	beq.n	8004de6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e00c      	b.n	8004e00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2205      	movs	r2, #5
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e18:	4b8e      	ldr	r3, [pc, #568]	; (8005054 <HAL_DMA_IRQHandler+0x248>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a8e      	ldr	r2, [pc, #568]	; (8005058 <HAL_DMA_IRQHandler+0x24c>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	0a9b      	lsrs	r3, r3, #10
 8004e24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e36:	2208      	movs	r2, #8
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01a      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d013      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e64:	2208      	movs	r2, #8
 8004e66:	409a      	lsls	r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	f043 0201 	orr.w	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d012      	beq.n	8004eae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	f043 0202 	orr.w	r2, r3, #2
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d012      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004edc:	f043 0204 	orr.w	r2, r3, #4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee8:	2210      	movs	r2, #16
 8004eea:	409a      	lsls	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d043      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d03c      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f06:	2210      	movs	r2, #16
 8004f08:	409a      	lsls	r2, r3
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d024      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
 8004f3a:	e01f      	b.n	8004f7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
 8004f4c:	e016      	b.n	8004f7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d107      	bne.n	8004f6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0208 	bic.w	r2, r2, #8
 8004f6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	2220      	movs	r2, #32
 8004f82:	409a      	lsls	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 808f 	beq.w	80050ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8087 	beq.w	80050ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d136      	bne.n	8005024 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0216 	bic.w	r2, r2, #22
 8004fc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <HAL_DMA_IRQHandler+0x1da>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0208 	bic.w	r2, r2, #8
 8004ff4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffa:	223f      	movs	r2, #63	; 0x3f
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005016:	2b00      	cmp	r3, #0
 8005018:	d07e      	beq.n	8005118 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	4798      	blx	r3
        }
        return;
 8005022:	e079      	b.n	8005118 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01d      	beq.n	800506e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10d      	bne.n	800505c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	2b00      	cmp	r3, #0
 8005046:	d031      	beq.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
 8005050:	e02c      	b.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
 8005052:	bf00      	nop
 8005054:	20000028 	.word	0x20000028
 8005058:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d023      	beq.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
 800506c:	e01e      	b.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10f      	bne.n	800509c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0210 	bic.w	r2, r2, #16
 800508a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d032      	beq.n	800511a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d022      	beq.n	8005106 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2205      	movs	r2, #5
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	3301      	adds	r3, #1
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d307      	bcc.n	80050f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f2      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x2cc>
 80050f2:	e000      	b.n	80050f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
 8005116:	e000      	b.n	800511a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005118:	bf00      	nop
    }
  }
}
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	3b10      	subs	r3, #16
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <DMA_CalcBaseAndBitshift+0x64>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800513a:	4a13      	ldr	r2, [pc, #76]	; (8005188 <DMA_CalcBaseAndBitshift+0x68>)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b03      	cmp	r3, #3
 800514c:	d909      	bls.n	8005162 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	1d1a      	adds	r2, r3, #4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	659a      	str	r2, [r3, #88]	; 0x58
 8005160:	e007      	b.n	8005172 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	aaaaaaab 	.word	0xaaaaaaab
 8005188:	0800afb8 	.word	0x0800afb8

0800518c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d11f      	bne.n	80051e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d856      	bhi.n	800525a <DMA_CheckFifoParam+0xce>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <DMA_CheckFifoParam+0x28>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051d7 	.word	0x080051d7
 80051bc:	080051c5 	.word	0x080051c5
 80051c0:	0800525b 	.word	0x0800525b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d046      	beq.n	800525e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d4:	e043      	b.n	800525e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051de:	d140      	bne.n	8005262 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e4:	e03d      	b.n	8005262 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ee:	d121      	bne.n	8005234 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d837      	bhi.n	8005266 <DMA_CheckFifoParam+0xda>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <DMA_CheckFifoParam+0x70>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	0800520d 	.word	0x0800520d
 8005200:	08005213 	.word	0x08005213
 8005204:	0800520d 	.word	0x0800520d
 8005208:	08005225 	.word	0x08005225
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e030      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d025      	beq.n	800526a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005222:	e022      	b.n	800526a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800522c:	d11f      	bne.n	800526e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005232:	e01c      	b.n	800526e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d903      	bls.n	8005242 <DMA_CheckFifoParam+0xb6>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d003      	beq.n	8005248 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005240:	e018      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
      break;
 8005246:	e015      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      break;
 8005258:	e00b      	b.n	8005272 <DMA_CheckFifoParam+0xe6>
      break;
 800525a:	bf00      	nop
 800525c:	e00a      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 800525e:	bf00      	nop
 8005260:	e008      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 8005262:	bf00      	nop
 8005264:	e006      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 8005266:	bf00      	nop
 8005268:	e004      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 800526a:	bf00      	nop
 800526c:	e002      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;   
 800526e:	bf00      	nop
 8005270:	e000      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 8005272:	bf00      	nop
    }
  } 
  
  return status; 
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop

08005284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	; 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
 800529e:	e159      	b.n	8005554 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052a0:	2201      	movs	r2, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4013      	ands	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	f040 8148 	bne.w	800554e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d005      	beq.n	80052d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d130      	bne.n	8005338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	2203      	movs	r2, #3
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800530c:	2201      	movs	r2, #1
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	43db      	mvns	r3, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4013      	ands	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	f003 0201 	and.w	r2, r3, #1
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4313      	orrs	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b03      	cmp	r3, #3
 8005342:	d017      	beq.n	8005374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2203      	movs	r2, #3
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d123      	bne.n	80053c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	08da      	lsrs	r2, r3, #3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3208      	adds	r2, #8
 8005388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	220f      	movs	r2, #15
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	43db      	mvns	r3, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4013      	ands	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	08da      	lsrs	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3208      	adds	r2, #8
 80053c2:	69b9      	ldr	r1, [r7, #24]
 80053c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	2203      	movs	r2, #3
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f003 0203 	and.w	r2, r3, #3
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80a2 	beq.w	800554e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4b57      	ldr	r3, [pc, #348]	; (800556c <HAL_GPIO_Init+0x2e8>)
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	4a56      	ldr	r2, [pc, #344]	; (800556c <HAL_GPIO_Init+0x2e8>)
 8005414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005418:	6453      	str	r3, [r2, #68]	; 0x44
 800541a:	4b54      	ldr	r3, [pc, #336]	; (800556c <HAL_GPIO_Init+0x2e8>)
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005426:	4a52      	ldr	r2, [pc, #328]	; (8005570 <HAL_GPIO_Init+0x2ec>)
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	3302      	adds	r3, #2
 800542e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	220f      	movs	r2, #15
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4013      	ands	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a49      	ldr	r2, [pc, #292]	; (8005574 <HAL_GPIO_Init+0x2f0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d019      	beq.n	8005486 <HAL_GPIO_Init+0x202>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a48      	ldr	r2, [pc, #288]	; (8005578 <HAL_GPIO_Init+0x2f4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_GPIO_Init+0x1fe>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a47      	ldr	r2, [pc, #284]	; (800557c <HAL_GPIO_Init+0x2f8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00d      	beq.n	800547e <HAL_GPIO_Init+0x1fa>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a46      	ldr	r2, [pc, #280]	; (8005580 <HAL_GPIO_Init+0x2fc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d007      	beq.n	800547a <HAL_GPIO_Init+0x1f6>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a45      	ldr	r2, [pc, #276]	; (8005584 <HAL_GPIO_Init+0x300>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d101      	bne.n	8005476 <HAL_GPIO_Init+0x1f2>
 8005472:	2304      	movs	r3, #4
 8005474:	e008      	b.n	8005488 <HAL_GPIO_Init+0x204>
 8005476:	2307      	movs	r3, #7
 8005478:	e006      	b.n	8005488 <HAL_GPIO_Init+0x204>
 800547a:	2303      	movs	r3, #3
 800547c:	e004      	b.n	8005488 <HAL_GPIO_Init+0x204>
 800547e:	2302      	movs	r3, #2
 8005480:	e002      	b.n	8005488 <HAL_GPIO_Init+0x204>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <HAL_GPIO_Init+0x204>
 8005486:	2300      	movs	r3, #0
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	f002 0203 	and.w	r2, r2, #3
 800548e:	0092      	lsls	r2, r2, #2
 8005490:	4093      	lsls	r3, r2
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4313      	orrs	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005498:	4935      	ldr	r1, [pc, #212]	; (8005570 <HAL_GPIO_Init+0x2ec>)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	089b      	lsrs	r3, r3, #2
 800549e:	3302      	adds	r3, #2
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054a6:	4b38      	ldr	r3, [pc, #224]	; (8005588 <HAL_GPIO_Init+0x304>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	43db      	mvns	r3, r3
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4013      	ands	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054ca:	4a2f      	ldr	r2, [pc, #188]	; (8005588 <HAL_GPIO_Init+0x304>)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054d0:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <HAL_GPIO_Init+0x304>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	43db      	mvns	r3, r3
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	4013      	ands	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054f4:	4a24      	ldr	r2, [pc, #144]	; (8005588 <HAL_GPIO_Init+0x304>)
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054fa:	4b23      	ldr	r3, [pc, #140]	; (8005588 <HAL_GPIO_Init+0x304>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800551e:	4a1a      	ldr	r2, [pc, #104]	; (8005588 <HAL_GPIO_Init+0x304>)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005524:	4b18      	ldr	r3, [pc, #96]	; (8005588 <HAL_GPIO_Init+0x304>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005548:	4a0f      	ldr	r2, [pc, #60]	; (8005588 <HAL_GPIO_Init+0x304>)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	3301      	adds	r3, #1
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b0f      	cmp	r3, #15
 8005558:	f67f aea2 	bls.w	80052a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	3724      	adds	r7, #36	; 0x24
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40023800 	.word	0x40023800
 8005570:	40013800 	.word	0x40013800
 8005574:	40020000 	.word	0x40020000
 8005578:	40020400 	.word	0x40020400
 800557c:	40020800 	.word	0x40020800
 8005580:	40020c00 	.word	0x40020c00
 8005584:	40021000 	.word	0x40021000
 8005588:	40013c00 	.word	0x40013c00

0800558c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	807b      	strh	r3, [r7, #2]
 8005598:	4613      	mov	r3, r2
 800559a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800559c:	787b      	ldrb	r3, [r7, #1]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055a2:	887a      	ldrh	r2, [r7, #2]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055a8:	e003      	b.n	80055b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055aa:	887b      	ldrh	r3, [r7, #2]
 80055ac:	041a      	lsls	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	619a      	str	r2, [r3, #24]
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055d6:	4a05      	ldr	r2, [pc, #20]	; (80055ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fd fe12 	bl	8003208 <HAL_GPIO_EXTI_Callback>
  }
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40013c00 	.word	0x40013c00

080055f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e267      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d075      	beq.n	80056fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800560e:	4b88      	ldr	r3, [pc, #544]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b04      	cmp	r3, #4
 8005618:	d00c      	beq.n	8005634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800561a:	4b85      	ldr	r3, [pc, #532]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005622:	2b08      	cmp	r3, #8
 8005624:	d112      	bne.n	800564c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005626:	4b82      	ldr	r3, [pc, #520]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005632:	d10b      	bne.n	800564c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005634:	4b7e      	ldr	r3, [pc, #504]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d05b      	beq.n	80056f8 <HAL_RCC_OscConfig+0x108>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d157      	bne.n	80056f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e242      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005654:	d106      	bne.n	8005664 <HAL_RCC_OscConfig+0x74>
 8005656:	4b76      	ldr	r3, [pc, #472]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a75      	ldr	r2, [pc, #468]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 800565c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e01d      	b.n	80056a0 <HAL_RCC_OscConfig+0xb0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x98>
 800566e:	4b70      	ldr	r3, [pc, #448]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6f      	ldr	r2, [pc, #444]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b6d      	ldr	r3, [pc, #436]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a6c      	ldr	r2, [pc, #432]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0xb0>
 8005688:	4b69      	ldr	r3, [pc, #420]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a68      	ldr	r2, [pc, #416]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 800568e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b66      	ldr	r3, [pc, #408]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a65      	ldr	r2, [pc, #404]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 800569a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800569e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a8:	f7fe fbee 	bl	8003e88 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fe fbea 	bl	8003e88 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e207      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	4b5b      	ldr	r3, [pc, #364]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0xc0>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fe fbda 	bl	8003e88 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fe fbd6 	bl	8003e88 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	; 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e1f3      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ea:	4b51      	ldr	r3, [pc, #324]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0xe8>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d063      	beq.n	80057ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005706:	4b4a      	ldr	r3, [pc, #296]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005712:	4b47      	ldr	r3, [pc, #284]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800571a:	2b08      	cmp	r3, #8
 800571c:	d11c      	bne.n	8005758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800571e:	4b44      	ldr	r3, [pc, #272]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d116      	bne.n	8005758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572a:	4b41      	ldr	r3, [pc, #260]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_RCC_OscConfig+0x152>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e1c7      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	4b3b      	ldr	r3, [pc, #236]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4937      	ldr	r1, [pc, #220]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005752:	4313      	orrs	r3, r2
 8005754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005756:	e03a      	b.n	80057ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005760:	4b34      	ldr	r3, [pc, #208]	; (8005834 <HAL_RCC_OscConfig+0x244>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005766:	f7fe fb8f 	bl	8003e88 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800576e:	f7fe fb8b 	bl	8003e88 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e1a8      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005780:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578c:	4b28      	ldr	r3, [pc, #160]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4925      	ldr	r1, [pc, #148]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]
 80057a0:	e015      	b.n	80057ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <HAL_RCC_OscConfig+0x244>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fe fb6e 	bl	8003e88 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057b0:	f7fe fb6a 	bl	8003e88 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e187      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d036      	beq.n	8005848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e2:	4b15      	ldr	r3, [pc, #84]	; (8005838 <HAL_RCC_OscConfig+0x248>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fe fb4e 	bl	8003e88 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fe fb4a 	bl	8003e88 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e167      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <HAL_RCC_OscConfig+0x240>)
 8005804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x200>
 800580e:	e01b      	b.n	8005848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005810:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_OscConfig+0x248>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005816:	f7fe fb37 	bl	8003e88 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800581c:	e00e      	b.n	800583c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800581e:	f7fe fb33 	bl	8003e88 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d907      	bls.n	800583c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e150      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
 8005830:	40023800 	.word	0x40023800
 8005834:	42470000 	.word	0x42470000
 8005838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800583c:	4b88      	ldr	r3, [pc, #544]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 800583e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1ea      	bne.n	800581e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8097 	beq.w	8005984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585a:	4b81      	ldr	r3, [pc, #516]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005866:	2300      	movs	r3, #0
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	4b7d      	ldr	r3, [pc, #500]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	4a7c      	ldr	r2, [pc, #496]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005874:	6413      	str	r3, [r2, #64]	; 0x40
 8005876:	4b7a      	ldr	r3, [pc, #488]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005882:	2301      	movs	r3, #1
 8005884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005886:	4b77      	ldr	r3, [pc, #476]	; (8005a64 <HAL_RCC_OscConfig+0x474>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d118      	bne.n	80058c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005892:	4b74      	ldr	r3, [pc, #464]	; (8005a64 <HAL_RCC_OscConfig+0x474>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a73      	ldr	r2, [pc, #460]	; (8005a64 <HAL_RCC_OscConfig+0x474>)
 8005898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800589e:	f7fe faf3 	bl	8003e88 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a6:	f7fe faef 	bl	8003e88 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e10c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b8:	4b6a      	ldr	r3, [pc, #424]	; (8005a64 <HAL_RCC_OscConfig+0x474>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d106      	bne.n	80058da <HAL_RCC_OscConfig+0x2ea>
 80058cc:	4b64      	ldr	r3, [pc, #400]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d0:	4a63      	ldr	r2, [pc, #396]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	6713      	str	r3, [r2, #112]	; 0x70
 80058d8:	e01c      	b.n	8005914 <HAL_RCC_OscConfig+0x324>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d10c      	bne.n	80058fc <HAL_RCC_OscConfig+0x30c>
 80058e2:	4b5f      	ldr	r3, [pc, #380]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	4a5e      	ldr	r2, [pc, #376]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	6713      	str	r3, [r2, #112]	; 0x70
 80058ee:	4b5c      	ldr	r3, [pc, #368]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	4a5b      	ldr	r2, [pc, #364]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6713      	str	r3, [r2, #112]	; 0x70
 80058fa:	e00b      	b.n	8005914 <HAL_RCC_OscConfig+0x324>
 80058fc:	4b58      	ldr	r3, [pc, #352]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	4a57      	ldr	r2, [pc, #348]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	6713      	str	r3, [r2, #112]	; 0x70
 8005908:	4b55      	ldr	r3, [pc, #340]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a54      	ldr	r2, [pc, #336]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 800590e:	f023 0304 	bic.w	r3, r3, #4
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d015      	beq.n	8005948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fe fab4 	bl	8003e88 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005922:	e00a      	b.n	800593a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005924:	f7fe fab0 	bl	8003e88 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e0cb      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593a:	4b49      	ldr	r3, [pc, #292]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0ee      	beq.n	8005924 <HAL_RCC_OscConfig+0x334>
 8005946:	e014      	b.n	8005972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005948:	f7fe fa9e 	bl	8003e88 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800594e:	e00a      	b.n	8005966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005950:	f7fe fa9a 	bl	8003e88 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	; 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e0b5      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005966:	4b3e      	ldr	r3, [pc, #248]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1ee      	bne.n	8005950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d105      	bne.n	8005984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	4a38      	ldr	r2, [pc, #224]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 800597e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80a1 	beq.w	8005ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800598e:	4b34      	ldr	r3, [pc, #208]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
 8005996:	2b08      	cmp	r3, #8
 8005998:	d05c      	beq.n	8005a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d141      	bne.n	8005a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a2:	4b31      	ldr	r3, [pc, #196]	; (8005a68 <HAL_RCC_OscConfig+0x478>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fe fa6e 	bl	8003e88 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fe fa6a 	bl	8003e88 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e087      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c2:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	019b      	lsls	r3, r3, #6
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	3b01      	subs	r3, #1
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	491b      	ldr	r1, [pc, #108]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f8:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <HAL_RCC_OscConfig+0x478>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fe:	f7fe fa43 	bl	8003e88 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fe fa3f 	bl	8003e88 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e05c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <HAL_RCC_OscConfig+0x416>
 8005a24:	e054      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <HAL_RCC_OscConfig+0x478>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2c:	f7fe fa2c 	bl	8003e88 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fe fa28 	bl	8003e88 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e045      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x444>
 8005a52:	e03d      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e038      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40007000 	.word	0x40007000
 8005a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <HAL_RCC_OscConfig+0x4ec>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d028      	beq.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d121      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d11a      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d111      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d107      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40023800 	.word	0x40023800

08005ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0cc      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b68      	ldr	r3, [pc, #416]	; (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d90c      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b65      	ldr	r3, [pc, #404]	; (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b63      	ldr	r3, [pc, #396]	; (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0b8      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d020      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b34:	4b59      	ldr	r3, [pc, #356]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4a58      	ldr	r2, [pc, #352]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b4c:	4b53      	ldr	r3, [pc, #332]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a52      	ldr	r2, [pc, #328]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b58:	4b50      	ldr	r3, [pc, #320]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	494d      	ldr	r1, [pc, #308]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d044      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7e:	4b47      	ldr	r3, [pc, #284]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d119      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d003      	beq.n	8005b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	4b3f      	ldr	r3, [pc, #252]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e06f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bae:	4b3b      	ldr	r3, [pc, #236]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e067      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bbe:	4b37      	ldr	r3, [pc, #220]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4934      	ldr	r1, [pc, #208]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd0:	f7fe f95a 	bl	8003e88 <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd6:	e00a      	b.n	8005bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd8:	f7fe f956 	bl	8003e88 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e04f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	4b2b      	ldr	r3, [pc, #172]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 020c 	and.w	r2, r3, #12
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1eb      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20c      	bcs.n	8005c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c16:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e032      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c34:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4916      	ldr	r1, [pc, #88]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c52:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	490e      	ldr	r1, [pc, #56]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c66:	f000 f821 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	490a      	ldr	r1, [pc, #40]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c78:	5ccb      	ldrb	r3, [r1, r3]
 8005c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7e:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c82:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe f8ba 	bl	8003e00 <HAL_InitTick>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40023c00 	.word	0x40023c00
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	0800afa0 	.word	0x0800afa0
 8005ca4:	20000028 	.word	0x20000028
 8005ca8:	2000002c 	.word	0x2000002c

08005cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb0:	b094      	sub	sp, #80	; 0x50
 8005cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb8:	2300      	movs	r3, #0
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc4:	4b79      	ldr	r3, [pc, #484]	; (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 030c 	and.w	r3, r3, #12
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d00d      	beq.n	8005cec <HAL_RCC_GetSysClockFreq+0x40>
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	f200 80e1 	bhi.w	8005e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cde:	e0db      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ce0:	4b73      	ldr	r3, [pc, #460]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ce2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ce4:	e0db      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ce6:	4b73      	ldr	r3, [pc, #460]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cea:	e0d8      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cec:	4b6f      	ldr	r3, [pc, #444]	; (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cf4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cf6:	4b6d      	ldr	r3, [pc, #436]	; (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d063      	beq.n	8005dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d02:	4b6a      	ldr	r3, [pc, #424]	; (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	099b      	lsrs	r3, r3, #6
 8005d08:	2200      	movs	r2, #0
 8005d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d14:	633b      	str	r3, [r7, #48]	; 0x30
 8005d16:	2300      	movs	r3, #0
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	0159      	lsls	r1, r3, #5
 8005d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d30:	0150      	lsls	r0, r2, #5
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4621      	mov	r1, r4
 8005d38:	1a51      	subs	r1, r2, r1
 8005d3a:	6139      	str	r1, [r7, #16]
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d50:	4659      	mov	r1, fp
 8005d52:	018b      	lsls	r3, r1, #6
 8005d54:	4651      	mov	r1, sl
 8005d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d5a:	4651      	mov	r1, sl
 8005d5c:	018a      	lsls	r2, r1, #6
 8005d5e:	4651      	mov	r1, sl
 8005d60:	ebb2 0801 	subs.w	r8, r2, r1
 8005d64:	4659      	mov	r1, fp
 8005d66:	eb63 0901 	sbc.w	r9, r3, r1
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d7e:	4690      	mov	r8, r2
 8005d80:	4699      	mov	r9, r3
 8005d82:	4623      	mov	r3, r4
 8005d84:	eb18 0303 	adds.w	r3, r8, r3
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	eb49 0303 	adc.w	r3, r9, r3
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d9e:	4629      	mov	r1, r5
 8005da0:	024b      	lsls	r3, r1, #9
 8005da2:	4621      	mov	r1, r4
 8005da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005da8:	4621      	mov	r1, r4
 8005daa:	024a      	lsls	r2, r1, #9
 8005dac:	4610      	mov	r0, r2
 8005dae:	4619      	mov	r1, r3
 8005db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db2:	2200      	movs	r2, #0
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dbc:	f7fa ff5c 	bl	8000c78 <__aeabi_uldivmod>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc8:	e058      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dca:	4b38      	ldr	r3, [pc, #224]	; (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	099b      	lsrs	r3, r3, #6
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dda:	623b      	str	r3, [r7, #32]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
 8005de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	f04f 0000 	mov.w	r0, #0
 8005dec:	f04f 0100 	mov.w	r1, #0
 8005df0:	0159      	lsls	r1, r3, #5
 8005df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df6:	0150      	lsls	r0, r2, #5
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e02:	4649      	mov	r1, r9
 8005e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e20:	eb63 050b 	sbc.w	r5, r3, fp
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	00eb      	lsls	r3, r5, #3
 8005e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e32:	00e2      	lsls	r2, r4, #3
 8005e34:	4614      	mov	r4, r2
 8005e36:	461d      	mov	r5, r3
 8005e38:	4643      	mov	r3, r8
 8005e3a:	18e3      	adds	r3, r4, r3
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	464b      	mov	r3, r9
 8005e40:	eb45 0303 	adc.w	r3, r5, r3
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e52:	4629      	mov	r1, r5
 8005e54:	028b      	lsls	r3, r1, #10
 8005e56:	4621      	mov	r1, r4
 8005e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	028a      	lsls	r2, r1, #10
 8005e60:	4610      	mov	r0, r2
 8005e62:	4619      	mov	r1, r3
 8005e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e66:	2200      	movs	r2, #0
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	61fa      	str	r2, [r7, #28]
 8005e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e70:	f7fa ff02 	bl	8000c78 <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4613      	mov	r3, r2
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	3301      	adds	r3, #1
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e96:	e002      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3750      	adds	r7, #80	; 0x50
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	00f42400 	.word	0x00f42400
 8005eb4:	007a1200 	.word	0x007a1200

08005eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20000028 	.word	0x20000028

08005ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ed4:	f7ff fff0 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	0a9b      	lsrs	r3, r3, #10
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	4903      	ldr	r1, [pc, #12]	; (8005ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	0800afb0 	.word	0x0800afb0

08005ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005efc:	f7ff ffdc 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005f00:	4602      	mov	r2, r0
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	0b5b      	lsrs	r3, r3, #13
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	4903      	ldr	r1, [pc, #12]	; (8005f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f0e:	5ccb      	ldrb	r3, [r1, r3]
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	0800afb0 	.word	0x0800afb0

08005f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e07b      	b.n	800602a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d108      	bne.n	8005f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f42:	d009      	beq.n	8005f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	61da      	str	r2, [r3, #28]
 8005f4a:	e005      	b.n	8005f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fd fbd0 	bl	8003718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fdc:	ea42 0103 	orr.w	r1, r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	f003 0104 	and.w	r1, r3, #4
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	f003 0210 	and.w	r2, r3, #16
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b088      	sub	sp, #32
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	4613      	mov	r3, r2
 8006040:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_SPI_Transmit+0x22>
 8006050:	2302      	movs	r3, #2
 8006052:	e126      	b.n	80062a2 <HAL_SPI_Transmit+0x270>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800605c:	f7fd ff14 	bl	8003e88 <HAL_GetTick>
 8006060:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	d002      	beq.n	8006078 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006072:	2302      	movs	r3, #2
 8006074:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006076:	e10b      	b.n	8006290 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_SPI_Transmit+0x52>
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d102      	bne.n	800608a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006088:	e102      	b.n	8006290 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2203      	movs	r2, #3
 800608e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d0:	d10f      	bne.n	80060f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	d007      	beq.n	8006110 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800610e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006118:	d14b      	bne.n	80061b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_SPI_Transmit+0xf6>
 8006122:	8afb      	ldrh	r3, [r7, #22]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d13e      	bne.n	80061a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	881a      	ldrh	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	1c9a      	adds	r2, r3, #2
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800614c:	e02b      	b.n	80061a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b02      	cmp	r3, #2
 800615a:	d112      	bne.n	8006182 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	881a      	ldrh	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616c:	1c9a      	adds	r2, r3, #2
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006180:	e011      	b.n	80061a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006182:	f7fd fe81 	bl	8003e88 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d803      	bhi.n	800619a <HAL_SPI_Transmit+0x168>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d102      	bne.n	80061a0 <HAL_SPI_Transmit+0x16e>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061a4:	e074      	b.n	8006290 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1ce      	bne.n	800614e <HAL_SPI_Transmit+0x11c>
 80061b0:	e04c      	b.n	800624c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_SPI_Transmit+0x18e>
 80061ba:	8afb      	ldrh	r3, [r7, #22]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d140      	bne.n	8006242 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	330c      	adds	r3, #12
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061e6:	e02c      	b.n	8006242 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d113      	bne.n	800621e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	86da      	strh	r2, [r3, #54]	; 0x36
 800621c:	e011      	b.n	8006242 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800621e:	f7fd fe33 	bl	8003e88 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d803      	bhi.n	8006236 <HAL_SPI_Transmit+0x204>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d102      	bne.n	800623c <HAL_SPI_Transmit+0x20a>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006240:	e026      	b.n	8006290 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1cd      	bne.n	80061e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fa63 	bl	800671c <SPI_EndRxTxTransaction>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e000      	b.n	8006290 <HAL_SPI_Transmit+0x25e>
  }

error:
 800628e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b08c      	sub	sp, #48	; 0x30
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062b8:	2301      	movs	r3, #1
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_SPI_TransmitReceive+0x26>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e18a      	b.n	80065e6 <HAL_SPI_TransmitReceive+0x33c>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062d8:	f7fd fdd6 	bl	8003e88 <HAL_GetTick>
 80062dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062ee:	887b      	ldrh	r3, [r7, #2]
 80062f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d00f      	beq.n	800631a <HAL_SPI_TransmitReceive+0x70>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006300:	d107      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d103      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x68>
 800630a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800630e:	2b04      	cmp	r3, #4
 8006310:	d003      	beq.n	800631a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006312:	2302      	movs	r3, #2
 8006314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006318:	e15b      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_SPI_TransmitReceive+0x82>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_SPI_TransmitReceive+0x82>
 8006326:	887b      	ldrh	r3, [r7, #2]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006332:	e14e      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b04      	cmp	r3, #4
 800633e:	d003      	beq.n	8006348 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2205      	movs	r2, #5
 8006344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	887a      	ldrh	r2, [r7, #2]
 8006358:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	887a      	ldrh	r2, [r7, #2]
 800635e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	887a      	ldrh	r2, [r7, #2]
 800636a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	887a      	ldrh	r2, [r7, #2]
 8006370:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d007      	beq.n	800639c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a4:	d178      	bne.n	8006498 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x10a>
 80063ae:	8b7b      	ldrh	r3, [r7, #26]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d166      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	881a      	ldrh	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	1c9a      	adds	r2, r3, #2
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063d8:	e053      	b.n	8006482 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d11b      	bne.n	8006420 <HAL_SPI_TransmitReceive+0x176>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <HAL_SPI_TransmitReceive+0x176>
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d113      	bne.n	8006420 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	881a      	ldrh	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	1c9a      	adds	r2, r3, #2
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b01      	cmp	r3, #1
 800642c:	d119      	bne.n	8006462 <HAL_SPI_TransmitReceive+0x1b8>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d014      	beq.n	8006462 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	b292      	uxth	r2, r2
 8006444:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	1c9a      	adds	r2, r3, #2
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006454:	b29b      	uxth	r3, r3
 8006456:	3b01      	subs	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800645e:	2301      	movs	r3, #1
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006462:	f7fd fd11 	bl	8003e88 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800646e:	429a      	cmp	r2, r3
 8006470:	d807      	bhi.n	8006482 <HAL_SPI_TransmitReceive+0x1d8>
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d003      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006480:	e0a7      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1a6      	bne.n	80063da <HAL_SPI_TransmitReceive+0x130>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1a1      	bne.n	80063da <HAL_SPI_TransmitReceive+0x130>
 8006496:	e07c      	b.n	8006592 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <HAL_SPI_TransmitReceive+0x1fc>
 80064a0:	8b7b      	ldrh	r3, [r7, #26]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d16b      	bne.n	800657e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	7812      	ldrb	r2, [r2, #0]
 80064b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064cc:	e057      	b.n	800657e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d11c      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x26c>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d017      	beq.n	8006516 <HAL_SPI_TransmitReceive+0x26c>
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d114      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	7812      	ldrb	r2, [r2, #0]
 80064f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d119      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x2ae>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d014      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006554:	2301      	movs	r3, #1
 8006556:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006558:	f7fd fc96 	bl	8003e88 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006564:	429a      	cmp	r2, r3
 8006566:	d803      	bhi.n	8006570 <HAL_SPI_TransmitReceive+0x2c6>
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d102      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x2cc>
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	2b00      	cmp	r3, #0
 8006574:	d103      	bne.n	800657e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800657c:	e029      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1a2      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x224>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d19d      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006594:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f8c0 	bl	800671c <SPI_EndRxTxTransaction>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065ae:	e010      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	e000      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80065d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3730      	adds	r7, #48	; 0x30
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065fc:	b2db      	uxtb	r3, r3
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800661c:	f7fd fc34 	bl	8003e88 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	4413      	add	r3, r2
 800662a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800662c:	f7fd fc2c 	bl	8003e88 <HAL_GetTick>
 8006630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006632:	4b39      	ldr	r3, [pc, #228]	; (8006718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	015b      	lsls	r3, r3, #5
 8006638:	0d1b      	lsrs	r3, r3, #20
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	fb02 f303 	mul.w	r3, r2, r3
 8006640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006642:	e054      	b.n	80066ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d050      	beq.n	80066ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800664c:	f7fd fc1c 	bl	8003e88 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	429a      	cmp	r2, r3
 800665a:	d902      	bls.n	8006662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d13d      	bne.n	80066de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800667a:	d111      	bne.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006684:	d004      	beq.n	8006690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668e:	d107      	bne.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800669e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a8:	d10f      	bne.n	80066ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e017      	b.n	800670e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4013      	ands	r3, r2
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	bf0c      	ite	eq
 80066fe:	2301      	moveq	r3, #1
 8006700:	2300      	movne	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	461a      	mov	r2, r3
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	429a      	cmp	r2, r3
 800670a:	d19b      	bne.n	8006644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000028 	.word	0x20000028

0800671c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006728:	4b1b      	ldr	r3, [pc, #108]	; (8006798 <SPI_EndRxTxTransaction+0x7c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1b      	ldr	r2, [pc, #108]	; (800679c <SPI_EndRxTxTransaction+0x80>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	0d5b      	lsrs	r3, r3, #21
 8006734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006746:	d112      	bne.n	800676e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	2180      	movs	r1, #128	; 0x80
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff5a 	bl	800660c <SPI_WaitFlagStateUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e00f      	b.n	800678e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	3b01      	subs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	2b80      	cmp	r3, #128	; 0x80
 8006786:	d0f2      	beq.n	800676e <SPI_EndRxTxTransaction+0x52>
 8006788:	e000      	b.n	800678c <SPI_EndRxTxTransaction+0x70>
        break;
 800678a:	bf00      	nop
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000028 	.word	0x20000028
 800679c:	165e9f81 	.word	0x165e9f81

080067a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e041      	b.n	8006836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fc ffee 	bl	80037a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3304      	adds	r3, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f000 fab6 	bl	8006d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d001      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e044      	b.n	80068e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1e      	ldr	r2, [pc, #120]	; (80068f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d018      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x6c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006882:	d013      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x6c>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1a      	ldr	r2, [pc, #104]	; (80068f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00e      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x6c>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a19      	ldr	r2, [pc, #100]	; (80068f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d009      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x6c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a17      	ldr	r2, [pc, #92]	; (80068fc <HAL_TIM_Base_Start_IT+0xbc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x6c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a16      	ldr	r2, [pc, #88]	; (8006900 <HAL_TIM_Base_Start_IT+0xc0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d111      	bne.n	80068d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b06      	cmp	r3, #6
 80068bc:	d010      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0201 	orr.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ce:	e007      	b.n	80068e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	40000c00 	.word	0x40000c00
 8006900:	40014000 	.word	0x40014000

08006904 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	f241 1311 	movw	r3, #4369	; 0x1111
 8006926:	4013      	ands	r3, r2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10f      	bne.n	800694c <HAL_TIM_Base_Stop_IT+0x48>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6a1a      	ldr	r2, [r3, #32]
 8006932:	f240 4344 	movw	r3, #1092	; 0x444
 8006936:	4013      	ands	r3, r2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d107      	bne.n	800694c <HAL_TIM_Base_Stop_IT+0x48>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0201 	bic.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b02      	cmp	r3, #2
 8006976:	d122      	bne.n	80069be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b02      	cmp	r3, #2
 8006984:	d11b      	bne.n	80069be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f06f 0202 	mvn.w	r2, #2
 800698e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f9b5 	bl	8006d14 <HAL_TIM_IC_CaptureCallback>
 80069aa:	e005      	b.n	80069b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f9a7 	bl	8006d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9b8 	bl	8006d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d122      	bne.n	8006a12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d11b      	bne.n	8006a12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f06f 0204 	mvn.w	r2, #4
 80069e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f98b 	bl	8006d14 <HAL_TIM_IC_CaptureCallback>
 80069fe:	e005      	b.n	8006a0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f97d 	bl	8006d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f98e 	bl	8006d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d122      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d11b      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f06f 0208 	mvn.w	r2, #8
 8006a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f961 	bl	8006d14 <HAL_TIM_IC_CaptureCallback>
 8006a52:	e005      	b.n	8006a60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f953 	bl	8006d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f964 	bl	8006d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d122      	bne.n	8006aba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d11b      	bne.n	8006aba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f06f 0210 	mvn.w	r2, #16
 8006a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2208      	movs	r2, #8
 8006a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f937 	bl	8006d14 <HAL_TIM_IC_CaptureCallback>
 8006aa6:	e005      	b.n	8006ab4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f929 	bl	8006d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f93a 	bl	8006d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10e      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d107      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0201 	mvn.w	r2, #1
 8006ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7fc fb4d 	bl	8003180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af0:	2b80      	cmp	r3, #128	; 0x80
 8006af2:	d10e      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b80      	cmp	r3, #128	; 0x80
 8006b00:	d107      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fab1 	bl	8007074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d10e      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d107      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f8ff 	bl	8006d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d10e      	bne.n	8006b6a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d107      	bne.n	8006b6a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f06f 0220 	mvn.w	r2, #32
 8006b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa7b 	bl	8007060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_TIM_ConfigClockSource+0x1c>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e0b4      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x186>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bb4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc6:	d03e      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0xd4>
 8006bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bcc:	f200 8087 	bhi.w	8006cde <HAL_TIM_ConfigClockSource+0x16c>
 8006bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd4:	f000 8086 	beq.w	8006ce4 <HAL_TIM_ConfigClockSource+0x172>
 8006bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bdc:	d87f      	bhi.n	8006cde <HAL_TIM_ConfigClockSource+0x16c>
 8006bde:	2b70      	cmp	r3, #112	; 0x70
 8006be0:	d01a      	beq.n	8006c18 <HAL_TIM_ConfigClockSource+0xa6>
 8006be2:	2b70      	cmp	r3, #112	; 0x70
 8006be4:	d87b      	bhi.n	8006cde <HAL_TIM_ConfigClockSource+0x16c>
 8006be6:	2b60      	cmp	r3, #96	; 0x60
 8006be8:	d050      	beq.n	8006c8c <HAL_TIM_ConfigClockSource+0x11a>
 8006bea:	2b60      	cmp	r3, #96	; 0x60
 8006bec:	d877      	bhi.n	8006cde <HAL_TIM_ConfigClockSource+0x16c>
 8006bee:	2b50      	cmp	r3, #80	; 0x50
 8006bf0:	d03c      	beq.n	8006c6c <HAL_TIM_ConfigClockSource+0xfa>
 8006bf2:	2b50      	cmp	r3, #80	; 0x50
 8006bf4:	d873      	bhi.n	8006cde <HAL_TIM_ConfigClockSource+0x16c>
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d058      	beq.n	8006cac <HAL_TIM_ConfigClockSource+0x13a>
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d86f      	bhi.n	8006cde <HAL_TIM_ConfigClockSource+0x16c>
 8006bfe:	2b30      	cmp	r3, #48	; 0x30
 8006c00:	d064      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0x15a>
 8006c02:	2b30      	cmp	r3, #48	; 0x30
 8006c04:	d86b      	bhi.n	8006cde <HAL_TIM_ConfigClockSource+0x16c>
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d060      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0x15a>
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d867      	bhi.n	8006cde <HAL_TIM_ConfigClockSource+0x16c>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d05c      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0x15a>
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d05a      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0x15a>
 8006c16:	e062      	b.n	8006cde <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	6899      	ldr	r1, [r3, #8]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f000 f98c 	bl	8006f44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	609a      	str	r2, [r3, #8]
      break;
 8006c44:	e04f      	b.n	8006ce6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6899      	ldr	r1, [r3, #8]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f000 f975 	bl	8006f44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c68:	609a      	str	r2, [r3, #8]
      break;
 8006c6a:	e03c      	b.n	8006ce6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	6859      	ldr	r1, [r3, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f000 f8e9 	bl	8006e50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2150      	movs	r1, #80	; 0x50
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 f942 	bl	8006f0e <TIM_ITRx_SetConfig>
      break;
 8006c8a:	e02c      	b.n	8006ce6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	6859      	ldr	r1, [r3, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f000 f908 	bl	8006eae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2160      	movs	r1, #96	; 0x60
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f932 	bl	8006f0e <TIM_ITRx_SetConfig>
      break;
 8006caa:	e01c      	b.n	8006ce6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	6859      	ldr	r1, [r3, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f000 f8c9 	bl	8006e50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2140      	movs	r1, #64	; 0x40
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 f922 	bl	8006f0e <TIM_ITRx_SetConfig>
      break;
 8006cca:	e00c      	b.n	8006ce6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f000 f919 	bl	8006f0e <TIM_ITRx_SetConfig>
      break;
 8006cdc:	e003      	b.n	8006ce6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce2:	e000      	b.n	8006ce6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ce4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a34      	ldr	r2, [pc, #208]	; (8006e34 <TIM_Base_SetConfig+0xe4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_Base_SetConfig+0x38>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6e:	d00b      	beq.n	8006d88 <TIM_Base_SetConfig+0x38>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a31      	ldr	r2, [pc, #196]	; (8006e38 <TIM_Base_SetConfig+0xe8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_Base_SetConfig+0x38>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a30      	ldr	r2, [pc, #192]	; (8006e3c <TIM_Base_SetConfig+0xec>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0x38>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a2f      	ldr	r2, [pc, #188]	; (8006e40 <TIM_Base_SetConfig+0xf0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d108      	bne.n	8006d9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a25      	ldr	r2, [pc, #148]	; (8006e34 <TIM_Base_SetConfig+0xe4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d01b      	beq.n	8006dda <TIM_Base_SetConfig+0x8a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da8:	d017      	beq.n	8006dda <TIM_Base_SetConfig+0x8a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a22      	ldr	r2, [pc, #136]	; (8006e38 <TIM_Base_SetConfig+0xe8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <TIM_Base_SetConfig+0x8a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a21      	ldr	r2, [pc, #132]	; (8006e3c <TIM_Base_SetConfig+0xec>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00f      	beq.n	8006dda <TIM_Base_SetConfig+0x8a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a20      	ldr	r2, [pc, #128]	; (8006e40 <TIM_Base_SetConfig+0xf0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00b      	beq.n	8006dda <TIM_Base_SetConfig+0x8a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1f      	ldr	r2, [pc, #124]	; (8006e44 <TIM_Base_SetConfig+0xf4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d007      	beq.n	8006dda <TIM_Base_SetConfig+0x8a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1e      	ldr	r2, [pc, #120]	; (8006e48 <TIM_Base_SetConfig+0xf8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d003      	beq.n	8006dda <TIM_Base_SetConfig+0x8a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1d      	ldr	r2, [pc, #116]	; (8006e4c <TIM_Base_SetConfig+0xfc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d108      	bne.n	8006dec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a08      	ldr	r2, [pc, #32]	; (8006e34 <TIM_Base_SetConfig+0xe4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d103      	bne.n	8006e20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	615a      	str	r2, [r3, #20]
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40010000 	.word	0x40010000
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40000800 	.word	0x40000800
 8006e40:	40000c00 	.word	0x40000c00
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800

08006e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	f023 0201 	bic.w	r2, r3, #1
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f023 030a 	bic.w	r3, r3, #10
 8006e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b087      	sub	sp, #28
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f023 0210 	bic.w	r2, r3, #16
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	031b      	lsls	r3, r3, #12
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	621a      	str	r2, [r3, #32]
}
 8006f02:	bf00      	nop
 8006f04:	371c      	adds	r7, #28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f043 0307 	orr.w	r3, r3, #7
 8006f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	609a      	str	r2, [r3, #8]
}
 8006f38:	bf00      	nop
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	021a      	lsls	r2, r3, #8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	431a      	orrs	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	609a      	str	r2, [r3, #8]
}
 8006f78:	bf00      	nop
 8006f7a:	371c      	adds	r7, #28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e050      	b.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1c      	ldr	r2, [pc, #112]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d018      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe8:	d013      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a18      	ldr	r2, [pc, #96]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a16      	ldr	r2, [pc, #88]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a15      	ldr	r2, [pc, #84]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a13      	ldr	r2, [pc, #76]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d10c      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4313      	orrs	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40014000 	.word	0x40014000

08007060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e03f      	b.n	800711a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fc fbfa 	bl	80038a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2224      	movs	r2, #36	; 0x24
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fd15 	bl	8007afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695a      	ldr	r2, [r3, #20]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	4613      	mov	r3, r2
 800712e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b20      	cmp	r3, #32
 800713a:	d130      	bne.n	800719e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_UART_Transmit_IT+0x26>
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e029      	b.n	80071a0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_UART_Transmit_IT+0x38>
 8007156:	2302      	movs	r3, #2
 8007158:	e022      	b.n	80071a0 <HAL_UART_Transmit_IT+0x7e>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	88fa      	ldrh	r2, [r7, #6]
 800716c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	88fa      	ldrh	r2, [r7, #6]
 8007172:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2221      	movs	r2, #33	; 0x21
 800717e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007198:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	e000      	b.n	80071a0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800719e:	2302      	movs	r3, #2
  }
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d11d      	bne.n	8007202 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_UART_Receive_IT+0x26>
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e016      	b.n	8007204 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_UART_Receive_IT+0x38>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e00f      	b.n	8007204 <HAL_UART_Receive_IT+0x58>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	461a      	mov	r2, r3
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 faab 	bl	8007754 <UART_Start_Receive_IT>
 80071fe:	4603      	mov	r3, r0
 8007200:	e000      	b.n	8007204 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007202:	2302      	movs	r3, #2
  }
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b0ba      	sub	sp, #232	; 0xe8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007232:	2300      	movs	r3, #0
 8007234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007238:	2300      	movs	r3, #0
 800723a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800723e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800724a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10f      	bne.n	8007272 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <HAL_UART_IRQHandler+0x66>
 800725e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fb8b 	bl	8007986 <UART_Receive_IT>
      return;
 8007270:	e256      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 80de 	beq.w	8007438 <HAL_UART_IRQHandler+0x22c>
 800727c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80d1 	beq.w	8007438 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <HAL_UART_IRQHandler+0xae>
 80072a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f043 0201 	orr.w	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00b      	beq.n	80072de <HAL_UART_IRQHandler+0xd2>
 80072c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f043 0202 	orr.w	r2, r3, #2
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00b      	beq.n	8007302 <HAL_UART_IRQHandler+0xf6>
 80072ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f043 0204 	orr.w	r2, r3, #4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d011      	beq.n	8007332 <HAL_UART_IRQHandler+0x126>
 800730e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800731a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f043 0208 	orr.w	r2, r3, #8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 81ed 	beq.w	8007716 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <HAL_UART_IRQHandler+0x14e>
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fb16 	bl	8007986 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <HAL_UART_IRQHandler+0x17a>
 800737e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d04f      	beq.n	8007426 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa1e 	bl	80077c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d141      	bne.n	800741e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3314      	adds	r3, #20
 80073c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1d9      	bne.n	800739a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d013      	beq.n	8007416 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	4a7d      	ldr	r2, [pc, #500]	; (80075e8 <HAL_UART_IRQHandler+0x3dc>)
 80073f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd fce4 	bl	8004dc8 <HAL_DMA_Abort_IT>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007410:	4610      	mov	r0, r2
 8007412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	e00e      	b.n	8007434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fb fe5e 	bl	80030d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	e00a      	b.n	8007434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fb fe5a 	bl	80030d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	e006      	b.n	8007434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fb fe56 	bl	80030d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007432:	e170      	b.n	8007716 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	bf00      	nop
    return;
 8007436:	e16e      	b.n	8007716 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	2b01      	cmp	r3, #1
 800743e:	f040 814a 	bne.w	80076d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8143 	beq.w	80076d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 813c 	beq.w	80076d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	60bb      	str	r3, [r7, #8]
 8007472:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	f040 80b4 	bne.w	80075ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8140 	beq.w	800771a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800749e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074a2:	429a      	cmp	r2, r3
 80074a4:	f080 8139 	bcs.w	800771a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ba:	f000 8088 	beq.w	80075ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1d9      	bne.n	80074be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800751a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3314      	adds	r3, #20
 800752a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800752e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e1      	bne.n	800750a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3314      	adds	r3, #20
 800754c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3314      	adds	r3, #20
 8007566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800756a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800756c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e3      	bne.n	8007546 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	330c      	adds	r3, #12
 8007592:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800759c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800759e:	f023 0310 	bic.w	r3, r3, #16
 80075a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80075b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e3      	bne.n	800758c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fd fb8d 	bl	8004ce8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f8ac 	bl	800773c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075e4:	e099      	b.n	800771a <HAL_UART_IRQHandler+0x50e>
 80075e6:	bf00      	nop
 80075e8:	0800788f 	.word	0x0800788f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 808b 	beq.w	800771e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8086 	beq.w	800771e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	330c      	adds	r3, #12
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007636:	647a      	str	r2, [r7, #68]	; 0x44
 8007638:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e3      	bne.n	8007612 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3314      	adds	r3, #20
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	623b      	str	r3, [r7, #32]
   return(result);
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3314      	adds	r3, #20
 800766a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800766e:	633a      	str	r2, [r7, #48]	; 0x30
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e3      	bne.n	800764a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0310 	bic.w	r3, r3, #16
 80076a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	330c      	adds	r3, #12
 80076b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076b4:	61fa      	str	r2, [r7, #28]
 80076b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	69b9      	ldr	r1, [r7, #24]
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	617b      	str	r3, [r7, #20]
   return(result);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e3      	bne.n	8007690 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f834 	bl	800773c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076d4:	e023      	b.n	800771e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <HAL_UART_IRQHandler+0x4ea>
 80076e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f8e1 	bl	80078b6 <UART_Transmit_IT>
    return;
 80076f4:	e014      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00e      	beq.n	8007720 <HAL_UART_IRQHandler+0x514>
 8007702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d008      	beq.n	8007720 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f921 	bl	8007956 <UART_EndTransmit_IT>
    return;
 8007714:	e004      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
    return;
 8007716:	bf00      	nop
 8007718:	e002      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
      return;
 800771a:	bf00      	nop
 800771c:	e000      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
      return;
 800771e:	bf00      	nop
  }
}
 8007720:	37e8      	adds	r7, #232	; 0xe8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop

08007728 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	88fa      	ldrh	r2, [r7, #6]
 8007772:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2222      	movs	r2, #34	; 0x22
 800777e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007798:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	695a      	ldr	r2, [r3, #20]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0201 	orr.w	r2, r2, #1
 80077a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0220 	orr.w	r2, r2, #32
 80077b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b095      	sub	sp, #84	; 0x54
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077f0:	643a      	str	r2, [r7, #64]	; 0x40
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3314      	adds	r3, #20
 800780a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	61fb      	str	r3, [r7, #28]
   return(result);
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	64bb      	str	r3, [r7, #72]	; 0x48
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3314      	adds	r3, #20
 8007822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800782a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	2b01      	cmp	r3, #1
 800783e:	d119      	bne.n	8007874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f023 0310 	bic.w	r3, r3, #16
 8007856:	647b      	str	r3, [r7, #68]	; 0x44
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007860:	61ba      	str	r2, [r7, #24]
 8007862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6979      	ldr	r1, [r7, #20]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	613b      	str	r3, [r7, #16]
   return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007882:	bf00      	nop
 8007884:	3754      	adds	r7, #84	; 0x54
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7fb fc15 	bl	80030d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b21      	cmp	r3, #33	; 0x21
 80078c8:	d13e      	bne.n	8007948 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d2:	d114      	bne.n	80078fe <UART_Transmit_IT+0x48>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d110      	bne.n	80078fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	1c9a      	adds	r2, r3, #2
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	621a      	str	r2, [r3, #32]
 80078fc:	e008      	b.n	8007910 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	1c59      	adds	r1, r3, #1
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6211      	str	r1, [r2, #32]
 8007908:	781a      	ldrb	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007914:	b29b      	uxth	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	b29b      	uxth	r3, r3
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	4619      	mov	r1, r3
 800791e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10f      	bne.n	8007944 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007932:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007942:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	e000      	b.n	800794a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007948:	2302      	movs	r3, #2
  }
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fed6 	bl	8007728 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b08c      	sub	sp, #48	; 0x30
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b22      	cmp	r3, #34	; 0x22
 8007998:	f040 80ab 	bne.w	8007af2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	d117      	bne.n	80079d6 <UART_Receive_IT+0x50>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d113      	bne.n	80079d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	1c9a      	adds	r2, r3, #2
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	629a      	str	r2, [r3, #40]	; 0x28
 80079d4:	e026      	b.n	8007a24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e8:	d007      	beq.n	80079fa <UART_Receive_IT+0x74>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <UART_Receive_IT+0x82>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e008      	b.n	8007a1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	4619      	mov	r1, r3
 8007a32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d15a      	bne.n	8007aee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0220 	bic.w	r2, r2, #32
 8007a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d135      	bne.n	8007ae4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330c      	adds	r3, #12
 8007a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f023 0310 	bic.w	r3, r3, #16
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	623a      	str	r2, [r7, #32]
 8007aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	69f9      	ldr	r1, [r7, #28]
 8007aa4:	6a3a      	ldr	r2, [r7, #32]
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e5      	bne.n	8007a7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b10      	cmp	r3, #16
 8007abe:	d10a      	bne.n	8007ad6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff fe2d 	bl	800773c <HAL_UARTEx_RxEventCallback>
 8007ae2:	e002      	b.n	8007aea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7fb fa2d 	bl	8002f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e002      	b.n	8007af4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e000      	b.n	8007af4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007af2:	2302      	movs	r3, #2
  }
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3730      	adds	r7, #48	; 0x30
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b00:	b0c0      	sub	sp, #256	; 0x100
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b18:	68d9      	ldr	r1, [r3, #12]
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	ea40 0301 	orr.w	r3, r0, r1
 8007b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b54:	f021 010c 	bic.w	r1, r1, #12
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b62:	430b      	orrs	r3, r1
 8007b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b76:	6999      	ldr	r1, [r3, #24]
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	ea40 0301 	orr.w	r3, r0, r1
 8007b82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4b8f      	ldr	r3, [pc, #572]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d005      	beq.n	8007b9c <UART_SetConfig+0xa0>
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b8d      	ldr	r3, [pc, #564]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d104      	bne.n	8007ba6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b9c:	f7fe f9ac 	bl	8005ef8 <HAL_RCC_GetPCLK2Freq>
 8007ba0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ba4:	e003      	b.n	8007bae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ba6:	f7fe f993 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 8007baa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb8:	f040 810c 	bne.w	8007dd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007bca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007bce:	4622      	mov	r2, r4
 8007bd0:	462b      	mov	r3, r5
 8007bd2:	1891      	adds	r1, r2, r2
 8007bd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bd6:	415b      	adcs	r3, r3
 8007bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bde:	4621      	mov	r1, r4
 8007be0:	eb12 0801 	adds.w	r8, r2, r1
 8007be4:	4629      	mov	r1, r5
 8007be6:	eb43 0901 	adc.w	r9, r3, r1
 8007bea:	f04f 0200 	mov.w	r2, #0
 8007bee:	f04f 0300 	mov.w	r3, #0
 8007bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bfe:	4690      	mov	r8, r2
 8007c00:	4699      	mov	r9, r3
 8007c02:	4623      	mov	r3, r4
 8007c04:	eb18 0303 	adds.w	r3, r8, r3
 8007c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	eb49 0303 	adc.w	r3, r9, r3
 8007c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	18db      	adds	r3, r3, r3
 8007c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c30:	4613      	mov	r3, r2
 8007c32:	eb42 0303 	adc.w	r3, r2, r3
 8007c36:	657b      	str	r3, [r7, #84]	; 0x54
 8007c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c40:	f7f9 f81a 	bl	8000c78 <__aeabi_uldivmod>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4b61      	ldr	r3, [pc, #388]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	011c      	lsls	r4, r3, #4
 8007c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c64:	4642      	mov	r2, r8
 8007c66:	464b      	mov	r3, r9
 8007c68:	1891      	adds	r1, r2, r2
 8007c6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c6c:	415b      	adcs	r3, r3
 8007c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c74:	4641      	mov	r1, r8
 8007c76:	eb12 0a01 	adds.w	sl, r2, r1
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	eb43 0b01 	adc.w	fp, r3, r1
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c94:	4692      	mov	sl, r2
 8007c96:	469b      	mov	fp, r3
 8007c98:	4643      	mov	r3, r8
 8007c9a:	eb1a 0303 	adds.w	r3, sl, r3
 8007c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007cbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	18db      	adds	r3, r3, r3
 8007cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	eb42 0303 	adc.w	r3, r2, r3
 8007ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cd6:	f7f8 ffcf 	bl	8000c78 <__aeabi_uldivmod>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4611      	mov	r1, r2
 8007ce0:	4b3b      	ldr	r3, [pc, #236]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	2264      	movs	r2, #100	; 0x64
 8007cea:	fb02 f303 	mul.w	r3, r2, r3
 8007cee:	1acb      	subs	r3, r1, r3
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007cf6:	4b36      	ldr	r3, [pc, #216]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d04:	441c      	add	r4, r3
 8007d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d18:	4642      	mov	r2, r8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	1891      	adds	r1, r2, r2
 8007d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d20:	415b      	adcs	r3, r3
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d28:	4641      	mov	r1, r8
 8007d2a:	1851      	adds	r1, r2, r1
 8007d2c:	6339      	str	r1, [r7, #48]	; 0x30
 8007d2e:	4649      	mov	r1, r9
 8007d30:	414b      	adcs	r3, r1
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d40:	4659      	mov	r1, fp
 8007d42:	00cb      	lsls	r3, r1, #3
 8007d44:	4651      	mov	r1, sl
 8007d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d4a:	4651      	mov	r1, sl
 8007d4c:	00ca      	lsls	r2, r1, #3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	4642      	mov	r2, r8
 8007d56:	189b      	adds	r3, r3, r2
 8007d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	460a      	mov	r2, r1
 8007d60:	eb42 0303 	adc.w	r3, r2, r3
 8007d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	18db      	adds	r3, r3, r3
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d82:	4613      	mov	r3, r2
 8007d84:	eb42 0303 	adc.w	r3, r2, r3
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d92:	f7f8 ff71 	bl	8000c78 <__aeabi_uldivmod>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007da0:	095b      	lsrs	r3, r3, #5
 8007da2:	2164      	movs	r1, #100	; 0x64
 8007da4:	fb01 f303 	mul.w	r3, r1, r3
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	3332      	adds	r3, #50	; 0x32
 8007dae:	4a08      	ldr	r2, [pc, #32]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007db0:	fba2 2303 	umull	r2, r3, r2, r3
 8007db4:	095b      	lsrs	r3, r3, #5
 8007db6:	f003 0207 	and.w	r2, r3, #7
 8007dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4422      	add	r2, r4
 8007dc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007dc4:	e105      	b.n	8007fd2 <UART_SetConfig+0x4d6>
 8007dc6:	bf00      	nop
 8007dc8:	40011000 	.word	0x40011000
 8007dcc:	40011400 	.word	0x40011400
 8007dd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007de2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007de6:	4642      	mov	r2, r8
 8007de8:	464b      	mov	r3, r9
 8007dea:	1891      	adds	r1, r2, r2
 8007dec:	6239      	str	r1, [r7, #32]
 8007dee:	415b      	adcs	r3, r3
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
 8007df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007df6:	4641      	mov	r1, r8
 8007df8:	1854      	adds	r4, r2, r1
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	eb43 0501 	adc.w	r5, r3, r1
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	00eb      	lsls	r3, r5, #3
 8007e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e0e:	00e2      	lsls	r2, r4, #3
 8007e10:	4614      	mov	r4, r2
 8007e12:	461d      	mov	r5, r3
 8007e14:	4643      	mov	r3, r8
 8007e16:	18e3      	adds	r3, r4, r3
 8007e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	eb45 0303 	adc.w	r3, r5, r3
 8007e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	f04f 0300 	mov.w	r3, #0
 8007e3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e42:	4629      	mov	r1, r5
 8007e44:	008b      	lsls	r3, r1, #2
 8007e46:	4621      	mov	r1, r4
 8007e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	008a      	lsls	r2, r1, #2
 8007e50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e54:	f7f8 ff10 	bl	8000c78 <__aeabi_uldivmod>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4b60      	ldr	r3, [pc, #384]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	011c      	lsls	r4, r3, #4
 8007e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e78:	4642      	mov	r2, r8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	1891      	adds	r1, r2, r2
 8007e7e:	61b9      	str	r1, [r7, #24]
 8007e80:	415b      	adcs	r3, r3
 8007e82:	61fb      	str	r3, [r7, #28]
 8007e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e88:	4641      	mov	r1, r8
 8007e8a:	1851      	adds	r1, r2, r1
 8007e8c:	6139      	str	r1, [r7, #16]
 8007e8e:	4649      	mov	r1, r9
 8007e90:	414b      	adcs	r3, r1
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ea0:	4659      	mov	r1, fp
 8007ea2:	00cb      	lsls	r3, r1, #3
 8007ea4:	4651      	mov	r1, sl
 8007ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eaa:	4651      	mov	r1, sl
 8007eac:	00ca      	lsls	r2, r1, #3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	189b      	adds	r3, r3, r2
 8007eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ebc:	464b      	mov	r3, r9
 8007ebe:	460a      	mov	r2, r1
 8007ec0:	eb42 0303 	adc.w	r3, r2, r3
 8007ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ed2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	008b      	lsls	r3, r1, #2
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eea:	4641      	mov	r1, r8
 8007eec:	008a      	lsls	r2, r1, #2
 8007eee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ef2:	f7f8 fec1 	bl	8000c78 <__aeabi_uldivmod>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4b39      	ldr	r3, [pc, #228]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007efc:	fba3 1302 	umull	r1, r3, r3, r2
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	2164      	movs	r1, #100	; 0x64
 8007f04:	fb01 f303 	mul.w	r3, r1, r3
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	3332      	adds	r3, #50	; 0x32
 8007f0e:	4a34      	ldr	r2, [pc, #208]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007f10:	fba2 2303 	umull	r2, r3, r2, r3
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f1a:	441c      	add	r4, r3
 8007f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f20:	2200      	movs	r2, #0
 8007f22:	673b      	str	r3, [r7, #112]	; 0x70
 8007f24:	677a      	str	r2, [r7, #116]	; 0x74
 8007f26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	1891      	adds	r1, r2, r2
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	415b      	adcs	r3, r3
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f3a:	4641      	mov	r1, r8
 8007f3c:	1851      	adds	r1, r2, r1
 8007f3e:	6039      	str	r1, [r7, #0]
 8007f40:	4649      	mov	r1, r9
 8007f42:	414b      	adcs	r3, r1
 8007f44:	607b      	str	r3, [r7, #4]
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f52:	4659      	mov	r1, fp
 8007f54:	00cb      	lsls	r3, r1, #3
 8007f56:	4651      	mov	r1, sl
 8007f58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f5c:	4651      	mov	r1, sl
 8007f5e:	00ca      	lsls	r2, r1, #3
 8007f60:	4610      	mov	r0, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	4603      	mov	r3, r0
 8007f66:	4642      	mov	r2, r8
 8007f68:	189b      	adds	r3, r3, r2
 8007f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	460a      	mov	r2, r1
 8007f70:	eb42 0303 	adc.w	r3, r2, r3
 8007f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8007f80:	667a      	str	r2, [r7, #100]	; 0x64
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	f04f 0300 	mov.w	r3, #0
 8007f8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f8e:	4649      	mov	r1, r9
 8007f90:	008b      	lsls	r3, r1, #2
 8007f92:	4641      	mov	r1, r8
 8007f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f98:	4641      	mov	r1, r8
 8007f9a:	008a      	lsls	r2, r1, #2
 8007f9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fa0:	f7f8 fe6a 	bl	8000c78 <__aeabi_uldivmod>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007faa:	fba3 1302 	umull	r1, r3, r3, r2
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	2164      	movs	r1, #100	; 0x64
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	3332      	adds	r3, #50	; 0x32
 8007fbc:	4a08      	ldr	r2, [pc, #32]	; (8007fe0 <UART_SetConfig+0x4e4>)
 8007fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	f003 020f 	and.w	r2, r3, #15
 8007fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4422      	add	r2, r4
 8007fd0:	609a      	str	r2, [r3, #8]
}
 8007fd2:	bf00      	nop
 8007fd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fde:	bf00      	nop
 8007fe0:	51eb851f 	.word	0x51eb851f

08007fe4 <__errno>:
 8007fe4:	4b01      	ldr	r3, [pc, #4]	; (8007fec <__errno+0x8>)
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000034 	.word	0x20000034

08007ff0 <__libc_init_array>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	4d0d      	ldr	r5, [pc, #52]	; (8008028 <__libc_init_array+0x38>)
 8007ff4:	4c0d      	ldr	r4, [pc, #52]	; (800802c <__libc_init_array+0x3c>)
 8007ff6:	1b64      	subs	r4, r4, r5
 8007ff8:	10a4      	asrs	r4, r4, #2
 8007ffa:	2600      	movs	r6, #0
 8007ffc:	42a6      	cmp	r6, r4
 8007ffe:	d109      	bne.n	8008014 <__libc_init_array+0x24>
 8008000:	4d0b      	ldr	r5, [pc, #44]	; (8008030 <__libc_init_array+0x40>)
 8008002:	4c0c      	ldr	r4, [pc, #48]	; (8008034 <__libc_init_array+0x44>)
 8008004:	f002 ff4c 	bl	800aea0 <_init>
 8008008:	1b64      	subs	r4, r4, r5
 800800a:	10a4      	asrs	r4, r4, #2
 800800c:	2600      	movs	r6, #0
 800800e:	42a6      	cmp	r6, r4
 8008010:	d105      	bne.n	800801e <__libc_init_array+0x2e>
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	f855 3b04 	ldr.w	r3, [r5], #4
 8008018:	4798      	blx	r3
 800801a:	3601      	adds	r6, #1
 800801c:	e7ee      	b.n	8007ffc <__libc_init_array+0xc>
 800801e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008022:	4798      	blx	r3
 8008024:	3601      	adds	r6, #1
 8008026:	e7f2      	b.n	800800e <__libc_init_array+0x1e>
 8008028:	0800b3a4 	.word	0x0800b3a4
 800802c:	0800b3a4 	.word	0x0800b3a4
 8008030:	0800b3a4 	.word	0x0800b3a4
 8008034:	0800b3a8 	.word	0x0800b3a8

08008038 <memcpy>:
 8008038:	440a      	add	r2, r1
 800803a:	4291      	cmp	r1, r2
 800803c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008040:	d100      	bne.n	8008044 <memcpy+0xc>
 8008042:	4770      	bx	lr
 8008044:	b510      	push	{r4, lr}
 8008046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800804a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800804e:	4291      	cmp	r1, r2
 8008050:	d1f9      	bne.n	8008046 <memcpy+0xe>
 8008052:	bd10      	pop	{r4, pc}

08008054 <memset>:
 8008054:	4402      	add	r2, r0
 8008056:	4603      	mov	r3, r0
 8008058:	4293      	cmp	r3, r2
 800805a:	d100      	bne.n	800805e <memset+0xa>
 800805c:	4770      	bx	lr
 800805e:	f803 1b01 	strb.w	r1, [r3], #1
 8008062:	e7f9      	b.n	8008058 <memset+0x4>

08008064 <__cvt>:
 8008064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	ec55 4b10 	vmov	r4, r5, d0
 800806c:	2d00      	cmp	r5, #0
 800806e:	460e      	mov	r6, r1
 8008070:	4619      	mov	r1, r3
 8008072:	462b      	mov	r3, r5
 8008074:	bfbb      	ittet	lt
 8008076:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800807a:	461d      	movlt	r5, r3
 800807c:	2300      	movge	r3, #0
 800807e:	232d      	movlt	r3, #45	; 0x2d
 8008080:	700b      	strb	r3, [r1, #0]
 8008082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008084:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008088:	4691      	mov	r9, r2
 800808a:	f023 0820 	bic.w	r8, r3, #32
 800808e:	bfbc      	itt	lt
 8008090:	4622      	movlt	r2, r4
 8008092:	4614      	movlt	r4, r2
 8008094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008098:	d005      	beq.n	80080a6 <__cvt+0x42>
 800809a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800809e:	d100      	bne.n	80080a2 <__cvt+0x3e>
 80080a0:	3601      	adds	r6, #1
 80080a2:	2102      	movs	r1, #2
 80080a4:	e000      	b.n	80080a8 <__cvt+0x44>
 80080a6:	2103      	movs	r1, #3
 80080a8:	ab03      	add	r3, sp, #12
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	ab02      	add	r3, sp, #8
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	ec45 4b10 	vmov	d0, r4, r5
 80080b4:	4653      	mov	r3, sl
 80080b6:	4632      	mov	r2, r6
 80080b8:	f000 fd26 	bl	8008b08 <_dtoa_r>
 80080bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080c0:	4607      	mov	r7, r0
 80080c2:	d102      	bne.n	80080ca <__cvt+0x66>
 80080c4:	f019 0f01 	tst.w	r9, #1
 80080c8:	d022      	beq.n	8008110 <__cvt+0xac>
 80080ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080ce:	eb07 0906 	add.w	r9, r7, r6
 80080d2:	d110      	bne.n	80080f6 <__cvt+0x92>
 80080d4:	783b      	ldrb	r3, [r7, #0]
 80080d6:	2b30      	cmp	r3, #48	; 0x30
 80080d8:	d10a      	bne.n	80080f0 <__cvt+0x8c>
 80080da:	2200      	movs	r2, #0
 80080dc:	2300      	movs	r3, #0
 80080de:	4620      	mov	r0, r4
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7f8 fd09 	bl	8000af8 <__aeabi_dcmpeq>
 80080e6:	b918      	cbnz	r0, 80080f0 <__cvt+0x8c>
 80080e8:	f1c6 0601 	rsb	r6, r6, #1
 80080ec:	f8ca 6000 	str.w	r6, [sl]
 80080f0:	f8da 3000 	ldr.w	r3, [sl]
 80080f4:	4499      	add	r9, r3
 80080f6:	2200      	movs	r2, #0
 80080f8:	2300      	movs	r3, #0
 80080fa:	4620      	mov	r0, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7f8 fcfb 	bl	8000af8 <__aeabi_dcmpeq>
 8008102:	b108      	cbz	r0, 8008108 <__cvt+0xa4>
 8008104:	f8cd 900c 	str.w	r9, [sp, #12]
 8008108:	2230      	movs	r2, #48	; 0x30
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	454b      	cmp	r3, r9
 800810e:	d307      	bcc.n	8008120 <__cvt+0xbc>
 8008110:	9b03      	ldr	r3, [sp, #12]
 8008112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008114:	1bdb      	subs	r3, r3, r7
 8008116:	4638      	mov	r0, r7
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	b004      	add	sp, #16
 800811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008120:	1c59      	adds	r1, r3, #1
 8008122:	9103      	str	r1, [sp, #12]
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	e7f0      	b.n	800810a <__cvt+0xa6>

08008128 <__exponent>:
 8008128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800812a:	4603      	mov	r3, r0
 800812c:	2900      	cmp	r1, #0
 800812e:	bfb8      	it	lt
 8008130:	4249      	neglt	r1, r1
 8008132:	f803 2b02 	strb.w	r2, [r3], #2
 8008136:	bfb4      	ite	lt
 8008138:	222d      	movlt	r2, #45	; 0x2d
 800813a:	222b      	movge	r2, #43	; 0x2b
 800813c:	2909      	cmp	r1, #9
 800813e:	7042      	strb	r2, [r0, #1]
 8008140:	dd2a      	ble.n	8008198 <__exponent+0x70>
 8008142:	f10d 0407 	add.w	r4, sp, #7
 8008146:	46a4      	mov	ip, r4
 8008148:	270a      	movs	r7, #10
 800814a:	46a6      	mov	lr, r4
 800814c:	460a      	mov	r2, r1
 800814e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008152:	fb07 1516 	mls	r5, r7, r6, r1
 8008156:	3530      	adds	r5, #48	; 0x30
 8008158:	2a63      	cmp	r2, #99	; 0x63
 800815a:	f104 34ff 	add.w	r4, r4, #4294967295
 800815e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008162:	4631      	mov	r1, r6
 8008164:	dcf1      	bgt.n	800814a <__exponent+0x22>
 8008166:	3130      	adds	r1, #48	; 0x30
 8008168:	f1ae 0502 	sub.w	r5, lr, #2
 800816c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008170:	1c44      	adds	r4, r0, #1
 8008172:	4629      	mov	r1, r5
 8008174:	4561      	cmp	r1, ip
 8008176:	d30a      	bcc.n	800818e <__exponent+0x66>
 8008178:	f10d 0209 	add.w	r2, sp, #9
 800817c:	eba2 020e 	sub.w	r2, r2, lr
 8008180:	4565      	cmp	r5, ip
 8008182:	bf88      	it	hi
 8008184:	2200      	movhi	r2, #0
 8008186:	4413      	add	r3, r2
 8008188:	1a18      	subs	r0, r3, r0
 800818a:	b003      	add	sp, #12
 800818c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008192:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008196:	e7ed      	b.n	8008174 <__exponent+0x4c>
 8008198:	2330      	movs	r3, #48	; 0x30
 800819a:	3130      	adds	r1, #48	; 0x30
 800819c:	7083      	strb	r3, [r0, #2]
 800819e:	70c1      	strb	r1, [r0, #3]
 80081a0:	1d03      	adds	r3, r0, #4
 80081a2:	e7f1      	b.n	8008188 <__exponent+0x60>

080081a4 <_printf_float>:
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	ed2d 8b02 	vpush	{d8}
 80081ac:	b08d      	sub	sp, #52	; 0x34
 80081ae:	460c      	mov	r4, r1
 80081b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081b4:	4616      	mov	r6, r2
 80081b6:	461f      	mov	r7, r3
 80081b8:	4605      	mov	r5, r0
 80081ba:	f001 fa93 	bl	80096e4 <_localeconv_r>
 80081be:	f8d0 a000 	ldr.w	sl, [r0]
 80081c2:	4650      	mov	r0, sl
 80081c4:	f7f8 f816 	bl	80001f4 <strlen>
 80081c8:	2300      	movs	r3, #0
 80081ca:	930a      	str	r3, [sp, #40]	; 0x28
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	9305      	str	r3, [sp, #20]
 80081d0:	f8d8 3000 	ldr.w	r3, [r8]
 80081d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081d8:	3307      	adds	r3, #7
 80081da:	f023 0307 	bic.w	r3, r3, #7
 80081de:	f103 0208 	add.w	r2, r3, #8
 80081e2:	f8c8 2000 	str.w	r2, [r8]
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081f6:	9307      	str	r3, [sp, #28]
 80081f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80081fc:	ee08 0a10 	vmov	s16, r0
 8008200:	4b9f      	ldr	r3, [pc, #636]	; (8008480 <_printf_float+0x2dc>)
 8008202:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008206:	f04f 32ff 	mov.w	r2, #4294967295
 800820a:	f7f8 fca7 	bl	8000b5c <__aeabi_dcmpun>
 800820e:	bb88      	cbnz	r0, 8008274 <_printf_float+0xd0>
 8008210:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008214:	4b9a      	ldr	r3, [pc, #616]	; (8008480 <_printf_float+0x2dc>)
 8008216:	f04f 32ff 	mov.w	r2, #4294967295
 800821a:	f7f8 fc81 	bl	8000b20 <__aeabi_dcmple>
 800821e:	bb48      	cbnz	r0, 8008274 <_printf_float+0xd0>
 8008220:	2200      	movs	r2, #0
 8008222:	2300      	movs	r3, #0
 8008224:	4640      	mov	r0, r8
 8008226:	4649      	mov	r1, r9
 8008228:	f7f8 fc70 	bl	8000b0c <__aeabi_dcmplt>
 800822c:	b110      	cbz	r0, 8008234 <_printf_float+0x90>
 800822e:	232d      	movs	r3, #45	; 0x2d
 8008230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008234:	4b93      	ldr	r3, [pc, #588]	; (8008484 <_printf_float+0x2e0>)
 8008236:	4894      	ldr	r0, [pc, #592]	; (8008488 <_printf_float+0x2e4>)
 8008238:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800823c:	bf94      	ite	ls
 800823e:	4698      	movls	r8, r3
 8008240:	4680      	movhi	r8, r0
 8008242:	2303      	movs	r3, #3
 8008244:	6123      	str	r3, [r4, #16]
 8008246:	9b05      	ldr	r3, [sp, #20]
 8008248:	f023 0204 	bic.w	r2, r3, #4
 800824c:	6022      	str	r2, [r4, #0]
 800824e:	f04f 0900 	mov.w	r9, #0
 8008252:	9700      	str	r7, [sp, #0]
 8008254:	4633      	mov	r3, r6
 8008256:	aa0b      	add	r2, sp, #44	; 0x2c
 8008258:	4621      	mov	r1, r4
 800825a:	4628      	mov	r0, r5
 800825c:	f000 f9d8 	bl	8008610 <_printf_common>
 8008260:	3001      	adds	r0, #1
 8008262:	f040 8090 	bne.w	8008386 <_printf_float+0x1e2>
 8008266:	f04f 30ff 	mov.w	r0, #4294967295
 800826a:	b00d      	add	sp, #52	; 0x34
 800826c:	ecbd 8b02 	vpop	{d8}
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008274:	4642      	mov	r2, r8
 8008276:	464b      	mov	r3, r9
 8008278:	4640      	mov	r0, r8
 800827a:	4649      	mov	r1, r9
 800827c:	f7f8 fc6e 	bl	8000b5c <__aeabi_dcmpun>
 8008280:	b140      	cbz	r0, 8008294 <_printf_float+0xf0>
 8008282:	464b      	mov	r3, r9
 8008284:	2b00      	cmp	r3, #0
 8008286:	bfbc      	itt	lt
 8008288:	232d      	movlt	r3, #45	; 0x2d
 800828a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800828e:	487f      	ldr	r0, [pc, #508]	; (800848c <_printf_float+0x2e8>)
 8008290:	4b7f      	ldr	r3, [pc, #508]	; (8008490 <_printf_float+0x2ec>)
 8008292:	e7d1      	b.n	8008238 <_printf_float+0x94>
 8008294:	6863      	ldr	r3, [r4, #4]
 8008296:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800829a:	9206      	str	r2, [sp, #24]
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	d13f      	bne.n	8008320 <_printf_float+0x17c>
 80082a0:	2306      	movs	r3, #6
 80082a2:	6063      	str	r3, [r4, #4]
 80082a4:	9b05      	ldr	r3, [sp, #20]
 80082a6:	6861      	ldr	r1, [r4, #4]
 80082a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082ac:	2300      	movs	r3, #0
 80082ae:	9303      	str	r3, [sp, #12]
 80082b0:	ab0a      	add	r3, sp, #40	; 0x28
 80082b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082b6:	ab09      	add	r3, sp, #36	; 0x24
 80082b8:	ec49 8b10 	vmov	d0, r8, r9
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	6022      	str	r2, [r4, #0]
 80082c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082c4:	4628      	mov	r0, r5
 80082c6:	f7ff fecd 	bl	8008064 <__cvt>
 80082ca:	9b06      	ldr	r3, [sp, #24]
 80082cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ce:	2b47      	cmp	r3, #71	; 0x47
 80082d0:	4680      	mov	r8, r0
 80082d2:	d108      	bne.n	80082e6 <_printf_float+0x142>
 80082d4:	1cc8      	adds	r0, r1, #3
 80082d6:	db02      	blt.n	80082de <_printf_float+0x13a>
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	4299      	cmp	r1, r3
 80082dc:	dd41      	ble.n	8008362 <_printf_float+0x1be>
 80082de:	f1ab 0b02 	sub.w	fp, fp, #2
 80082e2:	fa5f fb8b 	uxtb.w	fp, fp
 80082e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082ea:	d820      	bhi.n	800832e <_printf_float+0x18a>
 80082ec:	3901      	subs	r1, #1
 80082ee:	465a      	mov	r2, fp
 80082f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082f4:	9109      	str	r1, [sp, #36]	; 0x24
 80082f6:	f7ff ff17 	bl	8008128 <__exponent>
 80082fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082fc:	1813      	adds	r3, r2, r0
 80082fe:	2a01      	cmp	r2, #1
 8008300:	4681      	mov	r9, r0
 8008302:	6123      	str	r3, [r4, #16]
 8008304:	dc02      	bgt.n	800830c <_printf_float+0x168>
 8008306:	6822      	ldr	r2, [r4, #0]
 8008308:	07d2      	lsls	r2, r2, #31
 800830a:	d501      	bpl.n	8008310 <_printf_float+0x16c>
 800830c:	3301      	adds	r3, #1
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008314:	2b00      	cmp	r3, #0
 8008316:	d09c      	beq.n	8008252 <_printf_float+0xae>
 8008318:	232d      	movs	r3, #45	; 0x2d
 800831a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800831e:	e798      	b.n	8008252 <_printf_float+0xae>
 8008320:	9a06      	ldr	r2, [sp, #24]
 8008322:	2a47      	cmp	r2, #71	; 0x47
 8008324:	d1be      	bne.n	80082a4 <_printf_float+0x100>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1bc      	bne.n	80082a4 <_printf_float+0x100>
 800832a:	2301      	movs	r3, #1
 800832c:	e7b9      	b.n	80082a2 <_printf_float+0xfe>
 800832e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008332:	d118      	bne.n	8008366 <_printf_float+0x1c2>
 8008334:	2900      	cmp	r1, #0
 8008336:	6863      	ldr	r3, [r4, #4]
 8008338:	dd0b      	ble.n	8008352 <_printf_float+0x1ae>
 800833a:	6121      	str	r1, [r4, #16]
 800833c:	b913      	cbnz	r3, 8008344 <_printf_float+0x1a0>
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	07d0      	lsls	r0, r2, #31
 8008342:	d502      	bpl.n	800834a <_printf_float+0x1a6>
 8008344:	3301      	adds	r3, #1
 8008346:	440b      	add	r3, r1
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	65a1      	str	r1, [r4, #88]	; 0x58
 800834c:	f04f 0900 	mov.w	r9, #0
 8008350:	e7de      	b.n	8008310 <_printf_float+0x16c>
 8008352:	b913      	cbnz	r3, 800835a <_printf_float+0x1b6>
 8008354:	6822      	ldr	r2, [r4, #0]
 8008356:	07d2      	lsls	r2, r2, #31
 8008358:	d501      	bpl.n	800835e <_printf_float+0x1ba>
 800835a:	3302      	adds	r3, #2
 800835c:	e7f4      	b.n	8008348 <_printf_float+0x1a4>
 800835e:	2301      	movs	r3, #1
 8008360:	e7f2      	b.n	8008348 <_printf_float+0x1a4>
 8008362:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008368:	4299      	cmp	r1, r3
 800836a:	db05      	blt.n	8008378 <_printf_float+0x1d4>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	6121      	str	r1, [r4, #16]
 8008370:	07d8      	lsls	r0, r3, #31
 8008372:	d5ea      	bpl.n	800834a <_printf_float+0x1a6>
 8008374:	1c4b      	adds	r3, r1, #1
 8008376:	e7e7      	b.n	8008348 <_printf_float+0x1a4>
 8008378:	2900      	cmp	r1, #0
 800837a:	bfd4      	ite	le
 800837c:	f1c1 0202 	rsble	r2, r1, #2
 8008380:	2201      	movgt	r2, #1
 8008382:	4413      	add	r3, r2
 8008384:	e7e0      	b.n	8008348 <_printf_float+0x1a4>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	055a      	lsls	r2, r3, #21
 800838a:	d407      	bmi.n	800839c <_printf_float+0x1f8>
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	4642      	mov	r2, r8
 8008390:	4631      	mov	r1, r6
 8008392:	4628      	mov	r0, r5
 8008394:	47b8      	blx	r7
 8008396:	3001      	adds	r0, #1
 8008398:	d12c      	bne.n	80083f4 <_printf_float+0x250>
 800839a:	e764      	b.n	8008266 <_printf_float+0xc2>
 800839c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083a0:	f240 80e0 	bls.w	8008564 <_printf_float+0x3c0>
 80083a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083a8:	2200      	movs	r2, #0
 80083aa:	2300      	movs	r3, #0
 80083ac:	f7f8 fba4 	bl	8000af8 <__aeabi_dcmpeq>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d034      	beq.n	800841e <_printf_float+0x27a>
 80083b4:	4a37      	ldr	r2, [pc, #220]	; (8008494 <_printf_float+0x2f0>)
 80083b6:	2301      	movs	r3, #1
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f af51 	beq.w	8008266 <_printf_float+0xc2>
 80083c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083c8:	429a      	cmp	r2, r3
 80083ca:	db02      	blt.n	80083d2 <_printf_float+0x22e>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	07d8      	lsls	r0, r3, #31
 80083d0:	d510      	bpl.n	80083f4 <_printf_float+0x250>
 80083d2:	ee18 3a10 	vmov	r3, s16
 80083d6:	4652      	mov	r2, sl
 80083d8:	4631      	mov	r1, r6
 80083da:	4628      	mov	r0, r5
 80083dc:	47b8      	blx	r7
 80083de:	3001      	adds	r0, #1
 80083e0:	f43f af41 	beq.w	8008266 <_printf_float+0xc2>
 80083e4:	f04f 0800 	mov.w	r8, #0
 80083e8:	f104 091a 	add.w	r9, r4, #26
 80083ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ee:	3b01      	subs	r3, #1
 80083f0:	4543      	cmp	r3, r8
 80083f2:	dc09      	bgt.n	8008408 <_printf_float+0x264>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	079b      	lsls	r3, r3, #30
 80083f8:	f100 8105 	bmi.w	8008606 <_printf_float+0x462>
 80083fc:	68e0      	ldr	r0, [r4, #12]
 80083fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008400:	4298      	cmp	r0, r3
 8008402:	bfb8      	it	lt
 8008404:	4618      	movlt	r0, r3
 8008406:	e730      	b.n	800826a <_printf_float+0xc6>
 8008408:	2301      	movs	r3, #1
 800840a:	464a      	mov	r2, r9
 800840c:	4631      	mov	r1, r6
 800840e:	4628      	mov	r0, r5
 8008410:	47b8      	blx	r7
 8008412:	3001      	adds	r0, #1
 8008414:	f43f af27 	beq.w	8008266 <_printf_float+0xc2>
 8008418:	f108 0801 	add.w	r8, r8, #1
 800841c:	e7e6      	b.n	80083ec <_printf_float+0x248>
 800841e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	dc39      	bgt.n	8008498 <_printf_float+0x2f4>
 8008424:	4a1b      	ldr	r2, [pc, #108]	; (8008494 <_printf_float+0x2f0>)
 8008426:	2301      	movs	r3, #1
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f af19 	beq.w	8008266 <_printf_float+0xc2>
 8008434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008438:	4313      	orrs	r3, r2
 800843a:	d102      	bne.n	8008442 <_printf_float+0x29e>
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	07d9      	lsls	r1, r3, #31
 8008440:	d5d8      	bpl.n	80083f4 <_printf_float+0x250>
 8008442:	ee18 3a10 	vmov	r3, s16
 8008446:	4652      	mov	r2, sl
 8008448:	4631      	mov	r1, r6
 800844a:	4628      	mov	r0, r5
 800844c:	47b8      	blx	r7
 800844e:	3001      	adds	r0, #1
 8008450:	f43f af09 	beq.w	8008266 <_printf_float+0xc2>
 8008454:	f04f 0900 	mov.w	r9, #0
 8008458:	f104 0a1a 	add.w	sl, r4, #26
 800845c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845e:	425b      	negs	r3, r3
 8008460:	454b      	cmp	r3, r9
 8008462:	dc01      	bgt.n	8008468 <_printf_float+0x2c4>
 8008464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008466:	e792      	b.n	800838e <_printf_float+0x1ea>
 8008468:	2301      	movs	r3, #1
 800846a:	4652      	mov	r2, sl
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f aef7 	beq.w	8008266 <_printf_float+0xc2>
 8008478:	f109 0901 	add.w	r9, r9, #1
 800847c:	e7ee      	b.n	800845c <_printf_float+0x2b8>
 800847e:	bf00      	nop
 8008480:	7fefffff 	.word	0x7fefffff
 8008484:	0800afc4 	.word	0x0800afc4
 8008488:	0800afc8 	.word	0x0800afc8
 800848c:	0800afd0 	.word	0x0800afd0
 8008490:	0800afcc 	.word	0x0800afcc
 8008494:	0800afd4 	.word	0x0800afd4
 8008498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800849a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800849c:	429a      	cmp	r2, r3
 800849e:	bfa8      	it	ge
 80084a0:	461a      	movge	r2, r3
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	4691      	mov	r9, r2
 80084a6:	dc37      	bgt.n	8008518 <_printf_float+0x374>
 80084a8:	f04f 0b00 	mov.w	fp, #0
 80084ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084b0:	f104 021a 	add.w	r2, r4, #26
 80084b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084b6:	9305      	str	r3, [sp, #20]
 80084b8:	eba3 0309 	sub.w	r3, r3, r9
 80084bc:	455b      	cmp	r3, fp
 80084be:	dc33      	bgt.n	8008528 <_printf_float+0x384>
 80084c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084c4:	429a      	cmp	r2, r3
 80084c6:	db3b      	blt.n	8008540 <_printf_float+0x39c>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	07da      	lsls	r2, r3, #31
 80084cc:	d438      	bmi.n	8008540 <_printf_float+0x39c>
 80084ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d0:	9a05      	ldr	r2, [sp, #20]
 80084d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084d4:	1a9a      	subs	r2, r3, r2
 80084d6:	eba3 0901 	sub.w	r9, r3, r1
 80084da:	4591      	cmp	r9, r2
 80084dc:	bfa8      	it	ge
 80084de:	4691      	movge	r9, r2
 80084e0:	f1b9 0f00 	cmp.w	r9, #0
 80084e4:	dc35      	bgt.n	8008552 <_printf_float+0x3ae>
 80084e6:	f04f 0800 	mov.w	r8, #0
 80084ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084ee:	f104 0a1a 	add.w	sl, r4, #26
 80084f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f6:	1a9b      	subs	r3, r3, r2
 80084f8:	eba3 0309 	sub.w	r3, r3, r9
 80084fc:	4543      	cmp	r3, r8
 80084fe:	f77f af79 	ble.w	80083f4 <_printf_float+0x250>
 8008502:	2301      	movs	r3, #1
 8008504:	4652      	mov	r2, sl
 8008506:	4631      	mov	r1, r6
 8008508:	4628      	mov	r0, r5
 800850a:	47b8      	blx	r7
 800850c:	3001      	adds	r0, #1
 800850e:	f43f aeaa 	beq.w	8008266 <_printf_float+0xc2>
 8008512:	f108 0801 	add.w	r8, r8, #1
 8008516:	e7ec      	b.n	80084f2 <_printf_float+0x34e>
 8008518:	4613      	mov	r3, r2
 800851a:	4631      	mov	r1, r6
 800851c:	4642      	mov	r2, r8
 800851e:	4628      	mov	r0, r5
 8008520:	47b8      	blx	r7
 8008522:	3001      	adds	r0, #1
 8008524:	d1c0      	bne.n	80084a8 <_printf_float+0x304>
 8008526:	e69e      	b.n	8008266 <_printf_float+0xc2>
 8008528:	2301      	movs	r3, #1
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	9205      	str	r2, [sp, #20]
 8008530:	47b8      	blx	r7
 8008532:	3001      	adds	r0, #1
 8008534:	f43f ae97 	beq.w	8008266 <_printf_float+0xc2>
 8008538:	9a05      	ldr	r2, [sp, #20]
 800853a:	f10b 0b01 	add.w	fp, fp, #1
 800853e:	e7b9      	b.n	80084b4 <_printf_float+0x310>
 8008540:	ee18 3a10 	vmov	r3, s16
 8008544:	4652      	mov	r2, sl
 8008546:	4631      	mov	r1, r6
 8008548:	4628      	mov	r0, r5
 800854a:	47b8      	blx	r7
 800854c:	3001      	adds	r0, #1
 800854e:	d1be      	bne.n	80084ce <_printf_float+0x32a>
 8008550:	e689      	b.n	8008266 <_printf_float+0xc2>
 8008552:	9a05      	ldr	r2, [sp, #20]
 8008554:	464b      	mov	r3, r9
 8008556:	4442      	add	r2, r8
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	d1c1      	bne.n	80084e6 <_printf_float+0x342>
 8008562:	e680      	b.n	8008266 <_printf_float+0xc2>
 8008564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008566:	2a01      	cmp	r2, #1
 8008568:	dc01      	bgt.n	800856e <_printf_float+0x3ca>
 800856a:	07db      	lsls	r3, r3, #31
 800856c:	d538      	bpl.n	80085e0 <_printf_float+0x43c>
 800856e:	2301      	movs	r3, #1
 8008570:	4642      	mov	r2, r8
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	f43f ae74 	beq.w	8008266 <_printf_float+0xc2>
 800857e:	ee18 3a10 	vmov	r3, s16
 8008582:	4652      	mov	r2, sl
 8008584:	4631      	mov	r1, r6
 8008586:	4628      	mov	r0, r5
 8008588:	47b8      	blx	r7
 800858a:	3001      	adds	r0, #1
 800858c:	f43f ae6b 	beq.w	8008266 <_printf_float+0xc2>
 8008590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008594:	2200      	movs	r2, #0
 8008596:	2300      	movs	r3, #0
 8008598:	f7f8 faae 	bl	8000af8 <__aeabi_dcmpeq>
 800859c:	b9d8      	cbnz	r0, 80085d6 <_printf_float+0x432>
 800859e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a0:	f108 0201 	add.w	r2, r8, #1
 80085a4:	3b01      	subs	r3, #1
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	d10e      	bne.n	80085ce <_printf_float+0x42a>
 80085b0:	e659      	b.n	8008266 <_printf_float+0xc2>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4652      	mov	r2, sl
 80085b6:	4631      	mov	r1, r6
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b8      	blx	r7
 80085bc:	3001      	adds	r0, #1
 80085be:	f43f ae52 	beq.w	8008266 <_printf_float+0xc2>
 80085c2:	f108 0801 	add.w	r8, r8, #1
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	3b01      	subs	r3, #1
 80085ca:	4543      	cmp	r3, r8
 80085cc:	dcf1      	bgt.n	80085b2 <_printf_float+0x40e>
 80085ce:	464b      	mov	r3, r9
 80085d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085d4:	e6dc      	b.n	8008390 <_printf_float+0x1ec>
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	f104 0a1a 	add.w	sl, r4, #26
 80085de:	e7f2      	b.n	80085c6 <_printf_float+0x422>
 80085e0:	2301      	movs	r3, #1
 80085e2:	4642      	mov	r2, r8
 80085e4:	e7df      	b.n	80085a6 <_printf_float+0x402>
 80085e6:	2301      	movs	r3, #1
 80085e8:	464a      	mov	r2, r9
 80085ea:	4631      	mov	r1, r6
 80085ec:	4628      	mov	r0, r5
 80085ee:	47b8      	blx	r7
 80085f0:	3001      	adds	r0, #1
 80085f2:	f43f ae38 	beq.w	8008266 <_printf_float+0xc2>
 80085f6:	f108 0801 	add.w	r8, r8, #1
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085fe:	1a5b      	subs	r3, r3, r1
 8008600:	4543      	cmp	r3, r8
 8008602:	dcf0      	bgt.n	80085e6 <_printf_float+0x442>
 8008604:	e6fa      	b.n	80083fc <_printf_float+0x258>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	f104 0919 	add.w	r9, r4, #25
 800860e:	e7f4      	b.n	80085fa <_printf_float+0x456>

08008610 <_printf_common>:
 8008610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008614:	4616      	mov	r6, r2
 8008616:	4699      	mov	r9, r3
 8008618:	688a      	ldr	r2, [r1, #8]
 800861a:	690b      	ldr	r3, [r1, #16]
 800861c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008620:	4293      	cmp	r3, r2
 8008622:	bfb8      	it	lt
 8008624:	4613      	movlt	r3, r2
 8008626:	6033      	str	r3, [r6, #0]
 8008628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800862c:	4607      	mov	r7, r0
 800862e:	460c      	mov	r4, r1
 8008630:	b10a      	cbz	r2, 8008636 <_printf_common+0x26>
 8008632:	3301      	adds	r3, #1
 8008634:	6033      	str	r3, [r6, #0]
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	0699      	lsls	r1, r3, #26
 800863a:	bf42      	ittt	mi
 800863c:	6833      	ldrmi	r3, [r6, #0]
 800863e:	3302      	addmi	r3, #2
 8008640:	6033      	strmi	r3, [r6, #0]
 8008642:	6825      	ldr	r5, [r4, #0]
 8008644:	f015 0506 	ands.w	r5, r5, #6
 8008648:	d106      	bne.n	8008658 <_printf_common+0x48>
 800864a:	f104 0a19 	add.w	sl, r4, #25
 800864e:	68e3      	ldr	r3, [r4, #12]
 8008650:	6832      	ldr	r2, [r6, #0]
 8008652:	1a9b      	subs	r3, r3, r2
 8008654:	42ab      	cmp	r3, r5
 8008656:	dc26      	bgt.n	80086a6 <_printf_common+0x96>
 8008658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800865c:	1e13      	subs	r3, r2, #0
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	bf18      	it	ne
 8008662:	2301      	movne	r3, #1
 8008664:	0692      	lsls	r2, r2, #26
 8008666:	d42b      	bmi.n	80086c0 <_printf_common+0xb0>
 8008668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800866c:	4649      	mov	r1, r9
 800866e:	4638      	mov	r0, r7
 8008670:	47c0      	blx	r8
 8008672:	3001      	adds	r0, #1
 8008674:	d01e      	beq.n	80086b4 <_printf_common+0xa4>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	68e5      	ldr	r5, [r4, #12]
 800867a:	6832      	ldr	r2, [r6, #0]
 800867c:	f003 0306 	and.w	r3, r3, #6
 8008680:	2b04      	cmp	r3, #4
 8008682:	bf08      	it	eq
 8008684:	1aad      	subeq	r5, r5, r2
 8008686:	68a3      	ldr	r3, [r4, #8]
 8008688:	6922      	ldr	r2, [r4, #16]
 800868a:	bf0c      	ite	eq
 800868c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008690:	2500      	movne	r5, #0
 8008692:	4293      	cmp	r3, r2
 8008694:	bfc4      	itt	gt
 8008696:	1a9b      	subgt	r3, r3, r2
 8008698:	18ed      	addgt	r5, r5, r3
 800869a:	2600      	movs	r6, #0
 800869c:	341a      	adds	r4, #26
 800869e:	42b5      	cmp	r5, r6
 80086a0:	d11a      	bne.n	80086d8 <_printf_common+0xc8>
 80086a2:	2000      	movs	r0, #0
 80086a4:	e008      	b.n	80086b8 <_printf_common+0xa8>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4652      	mov	r2, sl
 80086aa:	4649      	mov	r1, r9
 80086ac:	4638      	mov	r0, r7
 80086ae:	47c0      	blx	r8
 80086b0:	3001      	adds	r0, #1
 80086b2:	d103      	bne.n	80086bc <_printf_common+0xac>
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295
 80086b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086bc:	3501      	adds	r5, #1
 80086be:	e7c6      	b.n	800864e <_printf_common+0x3e>
 80086c0:	18e1      	adds	r1, r4, r3
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	2030      	movs	r0, #48	; 0x30
 80086c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ca:	4422      	add	r2, r4
 80086cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086d4:	3302      	adds	r3, #2
 80086d6:	e7c7      	b.n	8008668 <_printf_common+0x58>
 80086d8:	2301      	movs	r3, #1
 80086da:	4622      	mov	r2, r4
 80086dc:	4649      	mov	r1, r9
 80086de:	4638      	mov	r0, r7
 80086e0:	47c0      	blx	r8
 80086e2:	3001      	adds	r0, #1
 80086e4:	d0e6      	beq.n	80086b4 <_printf_common+0xa4>
 80086e6:	3601      	adds	r6, #1
 80086e8:	e7d9      	b.n	800869e <_printf_common+0x8e>
	...

080086ec <_printf_i>:
 80086ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f0:	7e0f      	ldrb	r7, [r1, #24]
 80086f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086f4:	2f78      	cmp	r7, #120	; 0x78
 80086f6:	4691      	mov	r9, r2
 80086f8:	4680      	mov	r8, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	469a      	mov	sl, r3
 80086fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008702:	d807      	bhi.n	8008714 <_printf_i+0x28>
 8008704:	2f62      	cmp	r7, #98	; 0x62
 8008706:	d80a      	bhi.n	800871e <_printf_i+0x32>
 8008708:	2f00      	cmp	r7, #0
 800870a:	f000 80d8 	beq.w	80088be <_printf_i+0x1d2>
 800870e:	2f58      	cmp	r7, #88	; 0x58
 8008710:	f000 80a3 	beq.w	800885a <_printf_i+0x16e>
 8008714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800871c:	e03a      	b.n	8008794 <_printf_i+0xa8>
 800871e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008722:	2b15      	cmp	r3, #21
 8008724:	d8f6      	bhi.n	8008714 <_printf_i+0x28>
 8008726:	a101      	add	r1, pc, #4	; (adr r1, 800872c <_printf_i+0x40>)
 8008728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800872c:	08008785 	.word	0x08008785
 8008730:	08008799 	.word	0x08008799
 8008734:	08008715 	.word	0x08008715
 8008738:	08008715 	.word	0x08008715
 800873c:	08008715 	.word	0x08008715
 8008740:	08008715 	.word	0x08008715
 8008744:	08008799 	.word	0x08008799
 8008748:	08008715 	.word	0x08008715
 800874c:	08008715 	.word	0x08008715
 8008750:	08008715 	.word	0x08008715
 8008754:	08008715 	.word	0x08008715
 8008758:	080088a5 	.word	0x080088a5
 800875c:	080087c9 	.word	0x080087c9
 8008760:	08008887 	.word	0x08008887
 8008764:	08008715 	.word	0x08008715
 8008768:	08008715 	.word	0x08008715
 800876c:	080088c7 	.word	0x080088c7
 8008770:	08008715 	.word	0x08008715
 8008774:	080087c9 	.word	0x080087c9
 8008778:	08008715 	.word	0x08008715
 800877c:	08008715 	.word	0x08008715
 8008780:	0800888f 	.word	0x0800888f
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	1d1a      	adds	r2, r3, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	602a      	str	r2, [r5, #0]
 800878c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008794:	2301      	movs	r3, #1
 8008796:	e0a3      	b.n	80088e0 <_printf_i+0x1f4>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	6829      	ldr	r1, [r5, #0]
 800879c:	0606      	lsls	r6, r0, #24
 800879e:	f101 0304 	add.w	r3, r1, #4
 80087a2:	d50a      	bpl.n	80087ba <_printf_i+0xce>
 80087a4:	680e      	ldr	r6, [r1, #0]
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	da03      	bge.n	80087b4 <_printf_i+0xc8>
 80087ac:	232d      	movs	r3, #45	; 0x2d
 80087ae:	4276      	negs	r6, r6
 80087b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b4:	485e      	ldr	r0, [pc, #376]	; (8008930 <_printf_i+0x244>)
 80087b6:	230a      	movs	r3, #10
 80087b8:	e019      	b.n	80087ee <_printf_i+0x102>
 80087ba:	680e      	ldr	r6, [r1, #0]
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087c2:	bf18      	it	ne
 80087c4:	b236      	sxthne	r6, r6
 80087c6:	e7ef      	b.n	80087a8 <_printf_i+0xbc>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	1d19      	adds	r1, r3, #4
 80087ce:	6029      	str	r1, [r5, #0]
 80087d0:	0601      	lsls	r1, r0, #24
 80087d2:	d501      	bpl.n	80087d8 <_printf_i+0xec>
 80087d4:	681e      	ldr	r6, [r3, #0]
 80087d6:	e002      	b.n	80087de <_printf_i+0xf2>
 80087d8:	0646      	lsls	r6, r0, #25
 80087da:	d5fb      	bpl.n	80087d4 <_printf_i+0xe8>
 80087dc:	881e      	ldrh	r6, [r3, #0]
 80087de:	4854      	ldr	r0, [pc, #336]	; (8008930 <_printf_i+0x244>)
 80087e0:	2f6f      	cmp	r7, #111	; 0x6f
 80087e2:	bf0c      	ite	eq
 80087e4:	2308      	moveq	r3, #8
 80087e6:	230a      	movne	r3, #10
 80087e8:	2100      	movs	r1, #0
 80087ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ee:	6865      	ldr	r5, [r4, #4]
 80087f0:	60a5      	str	r5, [r4, #8]
 80087f2:	2d00      	cmp	r5, #0
 80087f4:	bfa2      	ittt	ge
 80087f6:	6821      	ldrge	r1, [r4, #0]
 80087f8:	f021 0104 	bicge.w	r1, r1, #4
 80087fc:	6021      	strge	r1, [r4, #0]
 80087fe:	b90e      	cbnz	r6, 8008804 <_printf_i+0x118>
 8008800:	2d00      	cmp	r5, #0
 8008802:	d04d      	beq.n	80088a0 <_printf_i+0x1b4>
 8008804:	4615      	mov	r5, r2
 8008806:	fbb6 f1f3 	udiv	r1, r6, r3
 800880a:	fb03 6711 	mls	r7, r3, r1, r6
 800880e:	5dc7      	ldrb	r7, [r0, r7]
 8008810:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008814:	4637      	mov	r7, r6
 8008816:	42bb      	cmp	r3, r7
 8008818:	460e      	mov	r6, r1
 800881a:	d9f4      	bls.n	8008806 <_printf_i+0x11a>
 800881c:	2b08      	cmp	r3, #8
 800881e:	d10b      	bne.n	8008838 <_printf_i+0x14c>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	07de      	lsls	r6, r3, #31
 8008824:	d508      	bpl.n	8008838 <_printf_i+0x14c>
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	6861      	ldr	r1, [r4, #4]
 800882a:	4299      	cmp	r1, r3
 800882c:	bfde      	ittt	le
 800882e:	2330      	movle	r3, #48	; 0x30
 8008830:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008834:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008838:	1b52      	subs	r2, r2, r5
 800883a:	6122      	str	r2, [r4, #16]
 800883c:	f8cd a000 	str.w	sl, [sp]
 8008840:	464b      	mov	r3, r9
 8008842:	aa03      	add	r2, sp, #12
 8008844:	4621      	mov	r1, r4
 8008846:	4640      	mov	r0, r8
 8008848:	f7ff fee2 	bl	8008610 <_printf_common>
 800884c:	3001      	adds	r0, #1
 800884e:	d14c      	bne.n	80088ea <_printf_i+0x1fe>
 8008850:	f04f 30ff 	mov.w	r0, #4294967295
 8008854:	b004      	add	sp, #16
 8008856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885a:	4835      	ldr	r0, [pc, #212]	; (8008930 <_printf_i+0x244>)
 800885c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008860:	6829      	ldr	r1, [r5, #0]
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	f851 6b04 	ldr.w	r6, [r1], #4
 8008868:	6029      	str	r1, [r5, #0]
 800886a:	061d      	lsls	r5, r3, #24
 800886c:	d514      	bpl.n	8008898 <_printf_i+0x1ac>
 800886e:	07df      	lsls	r7, r3, #31
 8008870:	bf44      	itt	mi
 8008872:	f043 0320 	orrmi.w	r3, r3, #32
 8008876:	6023      	strmi	r3, [r4, #0]
 8008878:	b91e      	cbnz	r6, 8008882 <_printf_i+0x196>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	f023 0320 	bic.w	r3, r3, #32
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	2310      	movs	r3, #16
 8008884:	e7b0      	b.n	80087e8 <_printf_i+0xfc>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	f043 0320 	orr.w	r3, r3, #32
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	2378      	movs	r3, #120	; 0x78
 8008890:	4828      	ldr	r0, [pc, #160]	; (8008934 <_printf_i+0x248>)
 8008892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008896:	e7e3      	b.n	8008860 <_printf_i+0x174>
 8008898:	0659      	lsls	r1, r3, #25
 800889a:	bf48      	it	mi
 800889c:	b2b6      	uxthmi	r6, r6
 800889e:	e7e6      	b.n	800886e <_printf_i+0x182>
 80088a0:	4615      	mov	r5, r2
 80088a2:	e7bb      	b.n	800881c <_printf_i+0x130>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	6826      	ldr	r6, [r4, #0]
 80088a8:	6961      	ldr	r1, [r4, #20]
 80088aa:	1d18      	adds	r0, r3, #4
 80088ac:	6028      	str	r0, [r5, #0]
 80088ae:	0635      	lsls	r5, r6, #24
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	d501      	bpl.n	80088b8 <_printf_i+0x1cc>
 80088b4:	6019      	str	r1, [r3, #0]
 80088b6:	e002      	b.n	80088be <_printf_i+0x1d2>
 80088b8:	0670      	lsls	r0, r6, #25
 80088ba:	d5fb      	bpl.n	80088b4 <_printf_i+0x1c8>
 80088bc:	8019      	strh	r1, [r3, #0]
 80088be:	2300      	movs	r3, #0
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	4615      	mov	r5, r2
 80088c4:	e7ba      	b.n	800883c <_printf_i+0x150>
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	1d1a      	adds	r2, r3, #4
 80088ca:	602a      	str	r2, [r5, #0]
 80088cc:	681d      	ldr	r5, [r3, #0]
 80088ce:	6862      	ldr	r2, [r4, #4]
 80088d0:	2100      	movs	r1, #0
 80088d2:	4628      	mov	r0, r5
 80088d4:	f7f7 fc9c 	bl	8000210 <memchr>
 80088d8:	b108      	cbz	r0, 80088de <_printf_i+0x1f2>
 80088da:	1b40      	subs	r0, r0, r5
 80088dc:	6060      	str	r0, [r4, #4]
 80088de:	6863      	ldr	r3, [r4, #4]
 80088e0:	6123      	str	r3, [r4, #16]
 80088e2:	2300      	movs	r3, #0
 80088e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e8:	e7a8      	b.n	800883c <_printf_i+0x150>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	462a      	mov	r2, r5
 80088ee:	4649      	mov	r1, r9
 80088f0:	4640      	mov	r0, r8
 80088f2:	47d0      	blx	sl
 80088f4:	3001      	adds	r0, #1
 80088f6:	d0ab      	beq.n	8008850 <_printf_i+0x164>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	079b      	lsls	r3, r3, #30
 80088fc:	d413      	bmi.n	8008926 <_printf_i+0x23a>
 80088fe:	68e0      	ldr	r0, [r4, #12]
 8008900:	9b03      	ldr	r3, [sp, #12]
 8008902:	4298      	cmp	r0, r3
 8008904:	bfb8      	it	lt
 8008906:	4618      	movlt	r0, r3
 8008908:	e7a4      	b.n	8008854 <_printf_i+0x168>
 800890a:	2301      	movs	r3, #1
 800890c:	4632      	mov	r2, r6
 800890e:	4649      	mov	r1, r9
 8008910:	4640      	mov	r0, r8
 8008912:	47d0      	blx	sl
 8008914:	3001      	adds	r0, #1
 8008916:	d09b      	beq.n	8008850 <_printf_i+0x164>
 8008918:	3501      	adds	r5, #1
 800891a:	68e3      	ldr	r3, [r4, #12]
 800891c:	9903      	ldr	r1, [sp, #12]
 800891e:	1a5b      	subs	r3, r3, r1
 8008920:	42ab      	cmp	r3, r5
 8008922:	dcf2      	bgt.n	800890a <_printf_i+0x21e>
 8008924:	e7eb      	b.n	80088fe <_printf_i+0x212>
 8008926:	2500      	movs	r5, #0
 8008928:	f104 0619 	add.w	r6, r4, #25
 800892c:	e7f5      	b.n	800891a <_printf_i+0x22e>
 800892e:	bf00      	nop
 8008930:	0800afd6 	.word	0x0800afd6
 8008934:	0800afe7 	.word	0x0800afe7

08008938 <sniprintf>:
 8008938:	b40c      	push	{r2, r3}
 800893a:	b530      	push	{r4, r5, lr}
 800893c:	4b17      	ldr	r3, [pc, #92]	; (800899c <sniprintf+0x64>)
 800893e:	1e0c      	subs	r4, r1, #0
 8008940:	681d      	ldr	r5, [r3, #0]
 8008942:	b09d      	sub	sp, #116	; 0x74
 8008944:	da08      	bge.n	8008958 <sniprintf+0x20>
 8008946:	238b      	movs	r3, #139	; 0x8b
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	f04f 30ff 	mov.w	r0, #4294967295
 800894e:	b01d      	add	sp, #116	; 0x74
 8008950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008954:	b002      	add	sp, #8
 8008956:	4770      	bx	lr
 8008958:	f44f 7302 	mov.w	r3, #520	; 0x208
 800895c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008960:	bf14      	ite	ne
 8008962:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008966:	4623      	moveq	r3, r4
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	9307      	str	r3, [sp, #28]
 800896c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008970:	9002      	str	r0, [sp, #8]
 8008972:	9006      	str	r0, [sp, #24]
 8008974:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008978:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800897a:	ab21      	add	r3, sp, #132	; 0x84
 800897c:	a902      	add	r1, sp, #8
 800897e:	4628      	mov	r0, r5
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	f001 fb91 	bl	800a0a8 <_svfiprintf_r>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	bfbc      	itt	lt
 800898a:	238b      	movlt	r3, #139	; 0x8b
 800898c:	602b      	strlt	r3, [r5, #0]
 800898e:	2c00      	cmp	r4, #0
 8008990:	d0dd      	beq.n	800894e <sniprintf+0x16>
 8008992:	9b02      	ldr	r3, [sp, #8]
 8008994:	2200      	movs	r2, #0
 8008996:	701a      	strb	r2, [r3, #0]
 8008998:	e7d9      	b.n	800894e <sniprintf+0x16>
 800899a:	bf00      	nop
 800899c:	20000034 	.word	0x20000034

080089a0 <strncmp>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	b17a      	cbz	r2, 80089c4 <strncmp+0x24>
 80089a4:	4603      	mov	r3, r0
 80089a6:	3901      	subs	r1, #1
 80089a8:	1884      	adds	r4, r0, r2
 80089aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80089b2:	4290      	cmp	r0, r2
 80089b4:	d101      	bne.n	80089ba <strncmp+0x1a>
 80089b6:	42a3      	cmp	r3, r4
 80089b8:	d101      	bne.n	80089be <strncmp+0x1e>
 80089ba:	1a80      	subs	r0, r0, r2
 80089bc:	bd10      	pop	{r4, pc}
 80089be:	2800      	cmp	r0, #0
 80089c0:	d1f3      	bne.n	80089aa <strncmp+0xa>
 80089c2:	e7fa      	b.n	80089ba <strncmp+0x1a>
 80089c4:	4610      	mov	r0, r2
 80089c6:	e7f9      	b.n	80089bc <strncmp+0x1c>

080089c8 <strrchr>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4603      	mov	r3, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	b969      	cbnz	r1, 80089ec <strrchr+0x24>
 80089d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089d4:	f001 bc78 	b.w	800a2c8 <strchr>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	4605      	mov	r5, r0
 80089dc:	4621      	mov	r1, r4
 80089de:	4618      	mov	r0, r3
 80089e0:	f001 fc72 	bl	800a2c8 <strchr>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d1f7      	bne.n	80089d8 <strrchr+0x10>
 80089e8:	4628      	mov	r0, r5
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	2500      	movs	r5, #0
 80089ee:	e7f5      	b.n	80089dc <strrchr+0x14>

080089f0 <quorem>:
 80089f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	6903      	ldr	r3, [r0, #16]
 80089f6:	690c      	ldr	r4, [r1, #16]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	4607      	mov	r7, r0
 80089fc:	f2c0 8081 	blt.w	8008b02 <quorem+0x112>
 8008a00:	3c01      	subs	r4, #1
 8008a02:	f101 0814 	add.w	r8, r1, #20
 8008a06:	f100 0514 	add.w	r5, r0, #20
 8008a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a24:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a28:	d331      	bcc.n	8008a8e <quorem+0x9e>
 8008a2a:	f04f 0e00 	mov.w	lr, #0
 8008a2e:	4640      	mov	r0, r8
 8008a30:	46ac      	mov	ip, r5
 8008a32:	46f2      	mov	sl, lr
 8008a34:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a38:	b293      	uxth	r3, r2
 8008a3a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ebaa 0303 	sub.w	r3, sl, r3
 8008a48:	f8dc a000 	ldr.w	sl, [ip]
 8008a4c:	0c12      	lsrs	r2, r2, #16
 8008a4e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a52:	fb06 e202 	mla	r2, r6, r2, lr
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a68:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a6c:	4581      	cmp	r9, r0
 8008a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a72:	f84c 3b04 	str.w	r3, [ip], #4
 8008a76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a7a:	d2db      	bcs.n	8008a34 <quorem+0x44>
 8008a7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a80:	b92b      	cbnz	r3, 8008a8e <quorem+0x9e>
 8008a82:	9b01      	ldr	r3, [sp, #4]
 8008a84:	3b04      	subs	r3, #4
 8008a86:	429d      	cmp	r5, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	d32e      	bcc.n	8008aea <quorem+0xfa>
 8008a8c:	613c      	str	r4, [r7, #16]
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f001 f8b6 	bl	8009c00 <__mcmp>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	db24      	blt.n	8008ae2 <quorem+0xf2>
 8008a98:	3601      	adds	r6, #1
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f04f 0c00 	mov.w	ip, #0
 8008aa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aa4:	f8d0 e000 	ldr.w	lr, [r0]
 8008aa8:	b293      	uxth	r3, r2
 8008aaa:	ebac 0303 	sub.w	r3, ip, r3
 8008aae:	0c12      	lsrs	r2, r2, #16
 8008ab0:	fa13 f38e 	uxtah	r3, r3, lr
 8008ab4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ac2:	45c1      	cmp	r9, r8
 8008ac4:	f840 3b04 	str.w	r3, [r0], #4
 8008ac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008acc:	d2e8      	bcs.n	8008aa0 <quorem+0xb0>
 8008ace:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ad6:	b922      	cbnz	r2, 8008ae2 <quorem+0xf2>
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	429d      	cmp	r5, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	d30a      	bcc.n	8008af6 <quorem+0x106>
 8008ae0:	613c      	str	r4, [r7, #16]
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	b003      	add	sp, #12
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	6812      	ldr	r2, [r2, #0]
 8008aec:	3b04      	subs	r3, #4
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	d1cc      	bne.n	8008a8c <quorem+0x9c>
 8008af2:	3c01      	subs	r4, #1
 8008af4:	e7c7      	b.n	8008a86 <quorem+0x96>
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	3b04      	subs	r3, #4
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	d1f0      	bne.n	8008ae0 <quorem+0xf0>
 8008afe:	3c01      	subs	r4, #1
 8008b00:	e7eb      	b.n	8008ada <quorem+0xea>
 8008b02:	2000      	movs	r0, #0
 8008b04:	e7ee      	b.n	8008ae4 <quorem+0xf4>
	...

08008b08 <_dtoa_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	ed2d 8b04 	vpush	{d8-d9}
 8008b10:	ec57 6b10 	vmov	r6, r7, d0
 8008b14:	b093      	sub	sp, #76	; 0x4c
 8008b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b1c:	9106      	str	r1, [sp, #24]
 8008b1e:	ee10 aa10 	vmov	sl, s0
 8008b22:	4604      	mov	r4, r0
 8008b24:	9209      	str	r2, [sp, #36]	; 0x24
 8008b26:	930c      	str	r3, [sp, #48]	; 0x30
 8008b28:	46bb      	mov	fp, r7
 8008b2a:	b975      	cbnz	r5, 8008b4a <_dtoa_r+0x42>
 8008b2c:	2010      	movs	r0, #16
 8008b2e:	f000 fddd 	bl	80096ec <malloc>
 8008b32:	4602      	mov	r2, r0
 8008b34:	6260      	str	r0, [r4, #36]	; 0x24
 8008b36:	b920      	cbnz	r0, 8008b42 <_dtoa_r+0x3a>
 8008b38:	4ba7      	ldr	r3, [pc, #668]	; (8008dd8 <_dtoa_r+0x2d0>)
 8008b3a:	21ea      	movs	r1, #234	; 0xea
 8008b3c:	48a7      	ldr	r0, [pc, #668]	; (8008ddc <_dtoa_r+0x2d4>)
 8008b3e:	f001 fbd1 	bl	800a2e4 <__assert_func>
 8008b42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b46:	6005      	str	r5, [r0, #0]
 8008b48:	60c5      	str	r5, [r0, #12]
 8008b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	b151      	cbz	r1, 8008b66 <_dtoa_r+0x5e>
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	604a      	str	r2, [r1, #4]
 8008b54:	2301      	movs	r3, #1
 8008b56:	4093      	lsls	r3, r2
 8008b58:	608b      	str	r3, [r1, #8]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fe0e 	bl	800977c <_Bfree>
 8008b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	1e3b      	subs	r3, r7, #0
 8008b68:	bfaa      	itet	ge
 8008b6a:	2300      	movge	r3, #0
 8008b6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b70:	f8c8 3000 	strge.w	r3, [r8]
 8008b74:	4b9a      	ldr	r3, [pc, #616]	; (8008de0 <_dtoa_r+0x2d8>)
 8008b76:	bfbc      	itt	lt
 8008b78:	2201      	movlt	r2, #1
 8008b7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008b7e:	ea33 030b 	bics.w	r3, r3, fp
 8008b82:	d11b      	bne.n	8008bbc <_dtoa_r+0xb4>
 8008b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b90:	4333      	orrs	r3, r6
 8008b92:	f000 8592 	beq.w	80096ba <_dtoa_r+0xbb2>
 8008b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b98:	b963      	cbnz	r3, 8008bb4 <_dtoa_r+0xac>
 8008b9a:	4b92      	ldr	r3, [pc, #584]	; (8008de4 <_dtoa_r+0x2dc>)
 8008b9c:	e022      	b.n	8008be4 <_dtoa_r+0xdc>
 8008b9e:	4b92      	ldr	r3, [pc, #584]	; (8008de8 <_dtoa_r+0x2e0>)
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	9801      	ldr	r0, [sp, #4]
 8008baa:	b013      	add	sp, #76	; 0x4c
 8008bac:	ecbd 8b04 	vpop	{d8-d9}
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	4b8b      	ldr	r3, [pc, #556]	; (8008de4 <_dtoa_r+0x2dc>)
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	3303      	adds	r3, #3
 8008bba:	e7f3      	b.n	8008ba4 <_dtoa_r+0x9c>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	4659      	mov	r1, fp
 8008bc4:	f7f7 ff98 	bl	8000af8 <__aeabi_dcmpeq>
 8008bc8:	ec4b ab19 	vmov	d9, sl, fp
 8008bcc:	4680      	mov	r8, r0
 8008bce:	b158      	cbz	r0, 8008be8 <_dtoa_r+0xe0>
 8008bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 856b 	beq.w	80096b4 <_dtoa_r+0xbac>
 8008bde:	4883      	ldr	r0, [pc, #524]	; (8008dec <_dtoa_r+0x2e4>)
 8008be0:	6018      	str	r0, [r3, #0]
 8008be2:	1e43      	subs	r3, r0, #1
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	e7df      	b.n	8008ba8 <_dtoa_r+0xa0>
 8008be8:	ec4b ab10 	vmov	d0, sl, fp
 8008bec:	aa10      	add	r2, sp, #64	; 0x40
 8008bee:	a911      	add	r1, sp, #68	; 0x44
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f001 f8ab 	bl	8009d4c <__d2b>
 8008bf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008bfa:	ee08 0a10 	vmov	s16, r0
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	f000 8084 	beq.w	8008d0c <_dtoa_r+0x204>
 8008c04:	ee19 3a90 	vmov	r3, s19
 8008c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c10:	4656      	mov	r6, sl
 8008c12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c1e:	4b74      	ldr	r3, [pc, #464]	; (8008df0 <_dtoa_r+0x2e8>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f7 fb47 	bl	80002b8 <__aeabi_dsub>
 8008c2a:	a365      	add	r3, pc, #404	; (adr r3, 8008dc0 <_dtoa_r+0x2b8>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fcfa 	bl	8000628 <__aeabi_dmul>
 8008c34:	a364      	add	r3, pc, #400	; (adr r3, 8008dc8 <_dtoa_r+0x2c0>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fb3f 	bl	80002bc <__adddf3>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	4628      	mov	r0, r5
 8008c42:	460f      	mov	r7, r1
 8008c44:	f7f7 fc86 	bl	8000554 <__aeabi_i2d>
 8008c48:	a361      	add	r3, pc, #388	; (adr r3, 8008dd0 <_dtoa_r+0x2c8>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fceb 	bl	8000628 <__aeabi_dmul>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4630      	mov	r0, r6
 8008c58:	4639      	mov	r1, r7
 8008c5a:	f7f7 fb2f 	bl	80002bc <__adddf3>
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460f      	mov	r7, r1
 8008c62:	f7f7 ff91 	bl	8000b88 <__aeabi_d2iz>
 8008c66:	2200      	movs	r2, #0
 8008c68:	9000      	str	r0, [sp, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 ff4c 	bl	8000b0c <__aeabi_dcmplt>
 8008c74:	b150      	cbz	r0, 8008c8c <_dtoa_r+0x184>
 8008c76:	9800      	ldr	r0, [sp, #0]
 8008c78:	f7f7 fc6c 	bl	8000554 <__aeabi_i2d>
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	463b      	mov	r3, r7
 8008c80:	f7f7 ff3a 	bl	8000af8 <__aeabi_dcmpeq>
 8008c84:	b910      	cbnz	r0, 8008c8c <_dtoa_r+0x184>
 8008c86:	9b00      	ldr	r3, [sp, #0]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	9b00      	ldr	r3, [sp, #0]
 8008c8e:	2b16      	cmp	r3, #22
 8008c90:	d85a      	bhi.n	8008d48 <_dtoa_r+0x240>
 8008c92:	9a00      	ldr	r2, [sp, #0]
 8008c94:	4b57      	ldr	r3, [pc, #348]	; (8008df4 <_dtoa_r+0x2ec>)
 8008c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	ec51 0b19 	vmov	r0, r1, d9
 8008ca2:	f7f7 ff33 	bl	8000b0c <__aeabi_dcmplt>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d050      	beq.n	8008d4c <_dtoa_r+0x244>
 8008caa:	9b00      	ldr	r3, [sp, #0]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cb6:	1b5d      	subs	r5, r3, r5
 8008cb8:	1e6b      	subs	r3, r5, #1
 8008cba:	9305      	str	r3, [sp, #20]
 8008cbc:	bf45      	ittet	mi
 8008cbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008cc2:	9304      	strmi	r3, [sp, #16]
 8008cc4:	2300      	movpl	r3, #0
 8008cc6:	2300      	movmi	r3, #0
 8008cc8:	bf4c      	ite	mi
 8008cca:	9305      	strmi	r3, [sp, #20]
 8008ccc:	9304      	strpl	r3, [sp, #16]
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db3d      	blt.n	8008d50 <_dtoa_r+0x248>
 8008cd4:	9b05      	ldr	r3, [sp, #20]
 8008cd6:	9a00      	ldr	r2, [sp, #0]
 8008cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008cda:	4413      	add	r3, r2
 8008cdc:	9305      	str	r3, [sp, #20]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9307      	str	r3, [sp, #28]
 8008ce2:	9b06      	ldr	r3, [sp, #24]
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	f200 8089 	bhi.w	8008dfc <_dtoa_r+0x2f4>
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	bfc4      	itt	gt
 8008cee:	3b04      	subgt	r3, #4
 8008cf0:	9306      	strgt	r3, [sp, #24]
 8008cf2:	9b06      	ldr	r3, [sp, #24]
 8008cf4:	f1a3 0302 	sub.w	r3, r3, #2
 8008cf8:	bfcc      	ite	gt
 8008cfa:	2500      	movgt	r5, #0
 8008cfc:	2501      	movle	r5, #1
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	f200 8087 	bhi.w	8008e12 <_dtoa_r+0x30a>
 8008d04:	e8df f003 	tbb	[pc, r3]
 8008d08:	59383a2d 	.word	0x59383a2d
 8008d0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d10:	441d      	add	r5, r3
 8008d12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	bfc1      	itttt	gt
 8008d1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d22:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d2a:	bfda      	itte	le
 8008d2c:	f1c3 0320 	rsble	r3, r3, #32
 8008d30:	fa06 f003 	lslle.w	r0, r6, r3
 8008d34:	4318      	orrgt	r0, r3
 8008d36:	f7f7 fbfd 	bl	8000534 <__aeabi_ui2d>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d42:	3d01      	subs	r5, #1
 8008d44:	930e      	str	r3, [sp, #56]	; 0x38
 8008d46:	e76a      	b.n	8008c1e <_dtoa_r+0x116>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7b2      	b.n	8008cb2 <_dtoa_r+0x1aa>
 8008d4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d4e:	e7b1      	b.n	8008cb4 <_dtoa_r+0x1ac>
 8008d50:	9b04      	ldr	r3, [sp, #16]
 8008d52:	9a00      	ldr	r2, [sp, #0]
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	4253      	negs	r3, r2
 8008d5a:	9307      	str	r3, [sp, #28]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d60:	e7bf      	b.n	8008ce2 <_dtoa_r+0x1da>
 8008d62:	2300      	movs	r3, #0
 8008d64:	9308      	str	r3, [sp, #32]
 8008d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dc55      	bgt.n	8008e18 <_dtoa_r+0x310>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d72:	461a      	mov	r2, r3
 8008d74:	9209      	str	r2, [sp, #36]	; 0x24
 8008d76:	e00c      	b.n	8008d92 <_dtoa_r+0x28a>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7f3      	b.n	8008d64 <_dtoa_r+0x25c>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d80:	9308      	str	r3, [sp, #32]
 8008d82:	9b00      	ldr	r3, [sp, #0]
 8008d84:	4413      	add	r3, r2
 8008d86:	9302      	str	r3, [sp, #8]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	9303      	str	r3, [sp, #12]
 8008d8e:	bfb8      	it	lt
 8008d90:	2301      	movlt	r3, #1
 8008d92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d94:	2200      	movs	r2, #0
 8008d96:	6042      	str	r2, [r0, #4]
 8008d98:	2204      	movs	r2, #4
 8008d9a:	f102 0614 	add.w	r6, r2, #20
 8008d9e:	429e      	cmp	r6, r3
 8008da0:	6841      	ldr	r1, [r0, #4]
 8008da2:	d93d      	bls.n	8008e20 <_dtoa_r+0x318>
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fca9 	bl	80096fc <_Balloc>
 8008daa:	9001      	str	r0, [sp, #4]
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d13b      	bne.n	8008e28 <_dtoa_r+0x320>
 8008db0:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <_dtoa_r+0x2f0>)
 8008db2:	4602      	mov	r2, r0
 8008db4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008db8:	e6c0      	b.n	8008b3c <_dtoa_r+0x34>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7df      	b.n	8008d7e <_dtoa_r+0x276>
 8008dbe:	bf00      	nop
 8008dc0:	636f4361 	.word	0x636f4361
 8008dc4:	3fd287a7 	.word	0x3fd287a7
 8008dc8:	8b60c8b3 	.word	0x8b60c8b3
 8008dcc:	3fc68a28 	.word	0x3fc68a28
 8008dd0:	509f79fb 	.word	0x509f79fb
 8008dd4:	3fd34413 	.word	0x3fd34413
 8008dd8:	0800b005 	.word	0x0800b005
 8008ddc:	0800b01c 	.word	0x0800b01c
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	0800b001 	.word	0x0800b001
 8008de8:	0800aff8 	.word	0x0800aff8
 8008dec:	0800afd5 	.word	0x0800afd5
 8008df0:	3ff80000 	.word	0x3ff80000
 8008df4:	0800b110 	.word	0x0800b110
 8008df8:	0800b077 	.word	0x0800b077
 8008dfc:	2501      	movs	r5, #1
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9306      	str	r3, [sp, #24]
 8008e02:	9508      	str	r5, [sp, #32]
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295
 8008e08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2312      	movs	r3, #18
 8008e10:	e7b0      	b.n	8008d74 <_dtoa_r+0x26c>
 8008e12:	2301      	movs	r3, #1
 8008e14:	9308      	str	r3, [sp, #32]
 8008e16:	e7f5      	b.n	8008e04 <_dtoa_r+0x2fc>
 8008e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e1e:	e7b8      	b.n	8008d92 <_dtoa_r+0x28a>
 8008e20:	3101      	adds	r1, #1
 8008e22:	6041      	str	r1, [r0, #4]
 8008e24:	0052      	lsls	r2, r2, #1
 8008e26:	e7b8      	b.n	8008d9a <_dtoa_r+0x292>
 8008e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2a:	9a01      	ldr	r2, [sp, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	2b0e      	cmp	r3, #14
 8008e32:	f200 809d 	bhi.w	8008f70 <_dtoa_r+0x468>
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	f000 809a 	beq.w	8008f70 <_dtoa_r+0x468>
 8008e3c:	9b00      	ldr	r3, [sp, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd32      	ble.n	8008ea8 <_dtoa_r+0x3a0>
 8008e42:	4ab7      	ldr	r2, [pc, #732]	; (8009120 <_dtoa_r+0x618>)
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e50:	9b00      	ldr	r3, [sp, #0]
 8008e52:	05d8      	lsls	r0, r3, #23
 8008e54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e58:	d516      	bpl.n	8008e88 <_dtoa_r+0x380>
 8008e5a:	4bb2      	ldr	r3, [pc, #712]	; (8009124 <_dtoa_r+0x61c>)
 8008e5c:	ec51 0b19 	vmov	r0, r1, d9
 8008e60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e64:	f7f7 fd0a 	bl	800087c <__aeabi_ddiv>
 8008e68:	f007 070f 	and.w	r7, r7, #15
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	468b      	mov	fp, r1
 8008e70:	2503      	movs	r5, #3
 8008e72:	4eac      	ldr	r6, [pc, #688]	; (8009124 <_dtoa_r+0x61c>)
 8008e74:	b957      	cbnz	r7, 8008e8c <_dtoa_r+0x384>
 8008e76:	4642      	mov	r2, r8
 8008e78:	464b      	mov	r3, r9
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	f7f7 fcfd 	bl	800087c <__aeabi_ddiv>
 8008e82:	4682      	mov	sl, r0
 8008e84:	468b      	mov	fp, r1
 8008e86:	e028      	b.n	8008eda <_dtoa_r+0x3d2>
 8008e88:	2502      	movs	r5, #2
 8008e8a:	e7f2      	b.n	8008e72 <_dtoa_r+0x36a>
 8008e8c:	07f9      	lsls	r1, r7, #31
 8008e8e:	d508      	bpl.n	8008ea2 <_dtoa_r+0x39a>
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e98:	f7f7 fbc6 	bl	8000628 <__aeabi_dmul>
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	107f      	asrs	r7, r7, #1
 8008ea4:	3608      	adds	r6, #8
 8008ea6:	e7e5      	b.n	8008e74 <_dtoa_r+0x36c>
 8008ea8:	f000 809b 	beq.w	8008fe2 <_dtoa_r+0x4da>
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	4f9d      	ldr	r7, [pc, #628]	; (8009124 <_dtoa_r+0x61c>)
 8008eb0:	425e      	negs	r6, r3
 8008eb2:	4b9b      	ldr	r3, [pc, #620]	; (8009120 <_dtoa_r+0x618>)
 8008eb4:	f006 020f 	and.w	r2, r6, #15
 8008eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	ec51 0b19 	vmov	r0, r1, d9
 8008ec4:	f7f7 fbb0 	bl	8000628 <__aeabi_dmul>
 8008ec8:	1136      	asrs	r6, r6, #4
 8008eca:	4682      	mov	sl, r0
 8008ecc:	468b      	mov	fp, r1
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2502      	movs	r5, #2
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	d17a      	bne.n	8008fcc <_dtoa_r+0x4c4>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1d3      	bne.n	8008e82 <_dtoa_r+0x37a>
 8008eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8082 	beq.w	8008fe6 <_dtoa_r+0x4de>
 8008ee2:	4b91      	ldr	r3, [pc, #580]	; (8009128 <_dtoa_r+0x620>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	4659      	mov	r1, fp
 8008eea:	f7f7 fe0f 	bl	8000b0c <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d079      	beq.n	8008fe6 <_dtoa_r+0x4de>
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d076      	beq.n	8008fe6 <_dtoa_r+0x4de>
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	dd36      	ble.n	8008f6c <_dtoa_r+0x464>
 8008efe:	9b00      	ldr	r3, [sp, #0]
 8008f00:	4650      	mov	r0, sl
 8008f02:	4659      	mov	r1, fp
 8008f04:	1e5f      	subs	r7, r3, #1
 8008f06:	2200      	movs	r2, #0
 8008f08:	4b88      	ldr	r3, [pc, #544]	; (800912c <_dtoa_r+0x624>)
 8008f0a:	f7f7 fb8d 	bl	8000628 <__aeabi_dmul>
 8008f0e:	9e02      	ldr	r6, [sp, #8]
 8008f10:	4682      	mov	sl, r0
 8008f12:	468b      	mov	fp, r1
 8008f14:	3501      	adds	r5, #1
 8008f16:	4628      	mov	r0, r5
 8008f18:	f7f7 fb1c 	bl	8000554 <__aeabi_i2d>
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	465b      	mov	r3, fp
 8008f20:	f7f7 fb82 	bl	8000628 <__aeabi_dmul>
 8008f24:	4b82      	ldr	r3, [pc, #520]	; (8009130 <_dtoa_r+0x628>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	f7f7 f9c8 	bl	80002bc <__adddf3>
 8008f2c:	46d0      	mov	r8, sl
 8008f2e:	46d9      	mov	r9, fp
 8008f30:	4682      	mov	sl, r0
 8008f32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d158      	bne.n	8008fec <_dtoa_r+0x4e4>
 8008f3a:	4b7e      	ldr	r3, [pc, #504]	; (8009134 <_dtoa_r+0x62c>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4640      	mov	r0, r8
 8008f40:	4649      	mov	r1, r9
 8008f42:	f7f7 f9b9 	bl	80002b8 <__aeabi_dsub>
 8008f46:	4652      	mov	r2, sl
 8008f48:	465b      	mov	r3, fp
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	4689      	mov	r9, r1
 8008f4e:	f7f7 fdfb 	bl	8000b48 <__aeabi_dcmpgt>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	f040 8295 	bne.w	8009482 <_dtoa_r+0x97a>
 8008f58:	4652      	mov	r2, sl
 8008f5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 fdd3 	bl	8000b0c <__aeabi_dcmplt>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f040 8289 	bne.w	800947e <_dtoa_r+0x976>
 8008f6c:	ec5b ab19 	vmov	sl, fp, d9
 8008f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f2c0 8148 	blt.w	8009208 <_dtoa_r+0x700>
 8008f78:	9a00      	ldr	r2, [sp, #0]
 8008f7a:	2a0e      	cmp	r2, #14
 8008f7c:	f300 8144 	bgt.w	8009208 <_dtoa_r+0x700>
 8008f80:	4b67      	ldr	r3, [pc, #412]	; (8009120 <_dtoa_r+0x618>)
 8008f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f280 80d5 	bge.w	800913c <_dtoa_r+0x634>
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f300 80d1 	bgt.w	800913c <_dtoa_r+0x634>
 8008f9a:	f040 826f 	bne.w	800947c <_dtoa_r+0x974>
 8008f9e:	4b65      	ldr	r3, [pc, #404]	; (8009134 <_dtoa_r+0x62c>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 fb3f 	bl	8000628 <__aeabi_dmul>
 8008faa:	4652      	mov	r2, sl
 8008fac:	465b      	mov	r3, fp
 8008fae:	f7f7 fdc1 	bl	8000b34 <__aeabi_dcmpge>
 8008fb2:	9e03      	ldr	r6, [sp, #12]
 8008fb4:	4637      	mov	r7, r6
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f040 8245 	bne.w	8009446 <_dtoa_r+0x93e>
 8008fbc:	9d01      	ldr	r5, [sp, #4]
 8008fbe:	2331      	movs	r3, #49	; 0x31
 8008fc0:	f805 3b01 	strb.w	r3, [r5], #1
 8008fc4:	9b00      	ldr	r3, [sp, #0]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	e240      	b.n	800944e <_dtoa_r+0x946>
 8008fcc:	07f2      	lsls	r2, r6, #31
 8008fce:	d505      	bpl.n	8008fdc <_dtoa_r+0x4d4>
 8008fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd4:	f7f7 fb28 	bl	8000628 <__aeabi_dmul>
 8008fd8:	3501      	adds	r5, #1
 8008fda:	2301      	movs	r3, #1
 8008fdc:	1076      	asrs	r6, r6, #1
 8008fde:	3708      	adds	r7, #8
 8008fe0:	e777      	b.n	8008ed2 <_dtoa_r+0x3ca>
 8008fe2:	2502      	movs	r5, #2
 8008fe4:	e779      	b.n	8008eda <_dtoa_r+0x3d2>
 8008fe6:	9f00      	ldr	r7, [sp, #0]
 8008fe8:	9e03      	ldr	r6, [sp, #12]
 8008fea:	e794      	b.n	8008f16 <_dtoa_r+0x40e>
 8008fec:	9901      	ldr	r1, [sp, #4]
 8008fee:	4b4c      	ldr	r3, [pc, #304]	; (8009120 <_dtoa_r+0x618>)
 8008ff0:	4431      	add	r1, r6
 8008ff2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ff4:	9908      	ldr	r1, [sp, #32]
 8008ff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ffa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ffe:	2900      	cmp	r1, #0
 8009000:	d043      	beq.n	800908a <_dtoa_r+0x582>
 8009002:	494d      	ldr	r1, [pc, #308]	; (8009138 <_dtoa_r+0x630>)
 8009004:	2000      	movs	r0, #0
 8009006:	f7f7 fc39 	bl	800087c <__aeabi_ddiv>
 800900a:	4652      	mov	r2, sl
 800900c:	465b      	mov	r3, fp
 800900e:	f7f7 f953 	bl	80002b8 <__aeabi_dsub>
 8009012:	9d01      	ldr	r5, [sp, #4]
 8009014:	4682      	mov	sl, r0
 8009016:	468b      	mov	fp, r1
 8009018:	4649      	mov	r1, r9
 800901a:	4640      	mov	r0, r8
 800901c:	f7f7 fdb4 	bl	8000b88 <__aeabi_d2iz>
 8009020:	4606      	mov	r6, r0
 8009022:	f7f7 fa97 	bl	8000554 <__aeabi_i2d>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4640      	mov	r0, r8
 800902c:	4649      	mov	r1, r9
 800902e:	f7f7 f943 	bl	80002b8 <__aeabi_dsub>
 8009032:	3630      	adds	r6, #48	; 0x30
 8009034:	f805 6b01 	strb.w	r6, [r5], #1
 8009038:	4652      	mov	r2, sl
 800903a:	465b      	mov	r3, fp
 800903c:	4680      	mov	r8, r0
 800903e:	4689      	mov	r9, r1
 8009040:	f7f7 fd64 	bl	8000b0c <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	d163      	bne.n	8009110 <_dtoa_r+0x608>
 8009048:	4642      	mov	r2, r8
 800904a:	464b      	mov	r3, r9
 800904c:	4936      	ldr	r1, [pc, #216]	; (8009128 <_dtoa_r+0x620>)
 800904e:	2000      	movs	r0, #0
 8009050:	f7f7 f932 	bl	80002b8 <__aeabi_dsub>
 8009054:	4652      	mov	r2, sl
 8009056:	465b      	mov	r3, fp
 8009058:	f7f7 fd58 	bl	8000b0c <__aeabi_dcmplt>
 800905c:	2800      	cmp	r0, #0
 800905e:	f040 80b5 	bne.w	80091cc <_dtoa_r+0x6c4>
 8009062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009064:	429d      	cmp	r5, r3
 8009066:	d081      	beq.n	8008f6c <_dtoa_r+0x464>
 8009068:	4b30      	ldr	r3, [pc, #192]	; (800912c <_dtoa_r+0x624>)
 800906a:	2200      	movs	r2, #0
 800906c:	4650      	mov	r0, sl
 800906e:	4659      	mov	r1, fp
 8009070:	f7f7 fada 	bl	8000628 <__aeabi_dmul>
 8009074:	4b2d      	ldr	r3, [pc, #180]	; (800912c <_dtoa_r+0x624>)
 8009076:	4682      	mov	sl, r0
 8009078:	468b      	mov	fp, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	2200      	movs	r2, #0
 8009080:	f7f7 fad2 	bl	8000628 <__aeabi_dmul>
 8009084:	4680      	mov	r8, r0
 8009086:	4689      	mov	r9, r1
 8009088:	e7c6      	b.n	8009018 <_dtoa_r+0x510>
 800908a:	4650      	mov	r0, sl
 800908c:	4659      	mov	r1, fp
 800908e:	f7f7 facb 	bl	8000628 <__aeabi_dmul>
 8009092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009094:	9d01      	ldr	r5, [sp, #4]
 8009096:	930f      	str	r3, [sp, #60]	; 0x3c
 8009098:	4682      	mov	sl, r0
 800909a:	468b      	mov	fp, r1
 800909c:	4649      	mov	r1, r9
 800909e:	4640      	mov	r0, r8
 80090a0:	f7f7 fd72 	bl	8000b88 <__aeabi_d2iz>
 80090a4:	4606      	mov	r6, r0
 80090a6:	f7f7 fa55 	bl	8000554 <__aeabi_i2d>
 80090aa:	3630      	adds	r6, #48	; 0x30
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 f900 	bl	80002b8 <__aeabi_dsub>
 80090b8:	f805 6b01 	strb.w	r6, [r5], #1
 80090bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090be:	429d      	cmp	r5, r3
 80090c0:	4680      	mov	r8, r0
 80090c2:	4689      	mov	r9, r1
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	d124      	bne.n	8009114 <_dtoa_r+0x60c>
 80090ca:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <_dtoa_r+0x630>)
 80090cc:	4650      	mov	r0, sl
 80090ce:	4659      	mov	r1, fp
 80090d0:	f7f7 f8f4 	bl	80002bc <__adddf3>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 fd34 	bl	8000b48 <__aeabi_dcmpgt>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d173      	bne.n	80091cc <_dtoa_r+0x6c4>
 80090e4:	4652      	mov	r2, sl
 80090e6:	465b      	mov	r3, fp
 80090e8:	4913      	ldr	r1, [pc, #76]	; (8009138 <_dtoa_r+0x630>)
 80090ea:	2000      	movs	r0, #0
 80090ec:	f7f7 f8e4 	bl	80002b8 <__aeabi_dsub>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4640      	mov	r0, r8
 80090f6:	4649      	mov	r1, r9
 80090f8:	f7f7 fd08 	bl	8000b0c <__aeabi_dcmplt>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f43f af35 	beq.w	8008f6c <_dtoa_r+0x464>
 8009102:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009104:	1e6b      	subs	r3, r5, #1
 8009106:	930f      	str	r3, [sp, #60]	; 0x3c
 8009108:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800910c:	2b30      	cmp	r3, #48	; 0x30
 800910e:	d0f8      	beq.n	8009102 <_dtoa_r+0x5fa>
 8009110:	9700      	str	r7, [sp, #0]
 8009112:	e049      	b.n	80091a8 <_dtoa_r+0x6a0>
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <_dtoa_r+0x624>)
 8009116:	f7f7 fa87 	bl	8000628 <__aeabi_dmul>
 800911a:	4680      	mov	r8, r0
 800911c:	4689      	mov	r9, r1
 800911e:	e7bd      	b.n	800909c <_dtoa_r+0x594>
 8009120:	0800b110 	.word	0x0800b110
 8009124:	0800b0e8 	.word	0x0800b0e8
 8009128:	3ff00000 	.word	0x3ff00000
 800912c:	40240000 	.word	0x40240000
 8009130:	401c0000 	.word	0x401c0000
 8009134:	40140000 	.word	0x40140000
 8009138:	3fe00000 	.word	0x3fe00000
 800913c:	9d01      	ldr	r5, [sp, #4]
 800913e:	4656      	mov	r6, sl
 8009140:	465f      	mov	r7, fp
 8009142:	4642      	mov	r2, r8
 8009144:	464b      	mov	r3, r9
 8009146:	4630      	mov	r0, r6
 8009148:	4639      	mov	r1, r7
 800914a:	f7f7 fb97 	bl	800087c <__aeabi_ddiv>
 800914e:	f7f7 fd1b 	bl	8000b88 <__aeabi_d2iz>
 8009152:	4682      	mov	sl, r0
 8009154:	f7f7 f9fe 	bl	8000554 <__aeabi_i2d>
 8009158:	4642      	mov	r2, r8
 800915a:	464b      	mov	r3, r9
 800915c:	f7f7 fa64 	bl	8000628 <__aeabi_dmul>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4630      	mov	r0, r6
 8009166:	4639      	mov	r1, r7
 8009168:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800916c:	f7f7 f8a4 	bl	80002b8 <__aeabi_dsub>
 8009170:	f805 6b01 	strb.w	r6, [r5], #1
 8009174:	9e01      	ldr	r6, [sp, #4]
 8009176:	9f03      	ldr	r7, [sp, #12]
 8009178:	1bae      	subs	r6, r5, r6
 800917a:	42b7      	cmp	r7, r6
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	d135      	bne.n	80091ee <_dtoa_r+0x6e6>
 8009182:	f7f7 f89b 	bl	80002bc <__adddf3>
 8009186:	4642      	mov	r2, r8
 8009188:	464b      	mov	r3, r9
 800918a:	4606      	mov	r6, r0
 800918c:	460f      	mov	r7, r1
 800918e:	f7f7 fcdb 	bl	8000b48 <__aeabi_dcmpgt>
 8009192:	b9d0      	cbnz	r0, 80091ca <_dtoa_r+0x6c2>
 8009194:	4642      	mov	r2, r8
 8009196:	464b      	mov	r3, r9
 8009198:	4630      	mov	r0, r6
 800919a:	4639      	mov	r1, r7
 800919c:	f7f7 fcac 	bl	8000af8 <__aeabi_dcmpeq>
 80091a0:	b110      	cbz	r0, 80091a8 <_dtoa_r+0x6a0>
 80091a2:	f01a 0f01 	tst.w	sl, #1
 80091a6:	d110      	bne.n	80091ca <_dtoa_r+0x6c2>
 80091a8:	4620      	mov	r0, r4
 80091aa:	ee18 1a10 	vmov	r1, s16
 80091ae:	f000 fae5 	bl	800977c <_Bfree>
 80091b2:	2300      	movs	r3, #0
 80091b4:	9800      	ldr	r0, [sp, #0]
 80091b6:	702b      	strb	r3, [r5, #0]
 80091b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ba:	3001      	adds	r0, #1
 80091bc:	6018      	str	r0, [r3, #0]
 80091be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f43f acf1 	beq.w	8008ba8 <_dtoa_r+0xa0>
 80091c6:	601d      	str	r5, [r3, #0]
 80091c8:	e4ee      	b.n	8008ba8 <_dtoa_r+0xa0>
 80091ca:	9f00      	ldr	r7, [sp, #0]
 80091cc:	462b      	mov	r3, r5
 80091ce:	461d      	mov	r5, r3
 80091d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091d4:	2a39      	cmp	r2, #57	; 0x39
 80091d6:	d106      	bne.n	80091e6 <_dtoa_r+0x6de>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d1f7      	bne.n	80091ce <_dtoa_r+0x6c6>
 80091de:	9901      	ldr	r1, [sp, #4]
 80091e0:	2230      	movs	r2, #48	; 0x30
 80091e2:	3701      	adds	r7, #1
 80091e4:	700a      	strb	r2, [r1, #0]
 80091e6:	781a      	ldrb	r2, [r3, #0]
 80091e8:	3201      	adds	r2, #1
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	e790      	b.n	8009110 <_dtoa_r+0x608>
 80091ee:	4ba6      	ldr	r3, [pc, #664]	; (8009488 <_dtoa_r+0x980>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7f7 fa19 	bl	8000628 <__aeabi_dmul>
 80091f6:	2200      	movs	r2, #0
 80091f8:	2300      	movs	r3, #0
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	f7f7 fc7b 	bl	8000af8 <__aeabi_dcmpeq>
 8009202:	2800      	cmp	r0, #0
 8009204:	d09d      	beq.n	8009142 <_dtoa_r+0x63a>
 8009206:	e7cf      	b.n	80091a8 <_dtoa_r+0x6a0>
 8009208:	9a08      	ldr	r2, [sp, #32]
 800920a:	2a00      	cmp	r2, #0
 800920c:	f000 80d7 	beq.w	80093be <_dtoa_r+0x8b6>
 8009210:	9a06      	ldr	r2, [sp, #24]
 8009212:	2a01      	cmp	r2, #1
 8009214:	f300 80ba 	bgt.w	800938c <_dtoa_r+0x884>
 8009218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800921a:	2a00      	cmp	r2, #0
 800921c:	f000 80b2 	beq.w	8009384 <_dtoa_r+0x87c>
 8009220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009224:	9e07      	ldr	r6, [sp, #28]
 8009226:	9d04      	ldr	r5, [sp, #16]
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	441a      	add	r2, r3
 800922c:	9204      	str	r2, [sp, #16]
 800922e:	9a05      	ldr	r2, [sp, #20]
 8009230:	2101      	movs	r1, #1
 8009232:	441a      	add	r2, r3
 8009234:	4620      	mov	r0, r4
 8009236:	9205      	str	r2, [sp, #20]
 8009238:	f000 fb58 	bl	80098ec <__i2b>
 800923c:	4607      	mov	r7, r0
 800923e:	2d00      	cmp	r5, #0
 8009240:	dd0c      	ble.n	800925c <_dtoa_r+0x754>
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd09      	ble.n	800925c <_dtoa_r+0x754>
 8009248:	42ab      	cmp	r3, r5
 800924a:	9a04      	ldr	r2, [sp, #16]
 800924c:	bfa8      	it	ge
 800924e:	462b      	movge	r3, r5
 8009250:	1ad2      	subs	r2, r2, r3
 8009252:	9204      	str	r2, [sp, #16]
 8009254:	9a05      	ldr	r2, [sp, #20]
 8009256:	1aed      	subs	r5, r5, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	b31b      	cbz	r3, 80092a8 <_dtoa_r+0x7a0>
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 80af 	beq.w	80093c6 <_dtoa_r+0x8be>
 8009268:	2e00      	cmp	r6, #0
 800926a:	dd13      	ble.n	8009294 <_dtoa_r+0x78c>
 800926c:	4639      	mov	r1, r7
 800926e:	4632      	mov	r2, r6
 8009270:	4620      	mov	r0, r4
 8009272:	f000 fbfb 	bl	8009a6c <__pow5mult>
 8009276:	ee18 2a10 	vmov	r2, s16
 800927a:	4601      	mov	r1, r0
 800927c:	4607      	mov	r7, r0
 800927e:	4620      	mov	r0, r4
 8009280:	f000 fb4a 	bl	8009918 <__multiply>
 8009284:	ee18 1a10 	vmov	r1, s16
 8009288:	4680      	mov	r8, r0
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fa76 	bl	800977c <_Bfree>
 8009290:	ee08 8a10 	vmov	s16, r8
 8009294:	9b07      	ldr	r3, [sp, #28]
 8009296:	1b9a      	subs	r2, r3, r6
 8009298:	d006      	beq.n	80092a8 <_dtoa_r+0x7a0>
 800929a:	ee18 1a10 	vmov	r1, s16
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 fbe4 	bl	8009a6c <__pow5mult>
 80092a4:	ee08 0a10 	vmov	s16, r0
 80092a8:	2101      	movs	r1, #1
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 fb1e 	bl	80098ec <__i2b>
 80092b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	4606      	mov	r6, r0
 80092b6:	f340 8088 	ble.w	80093ca <_dtoa_r+0x8c2>
 80092ba:	461a      	mov	r2, r3
 80092bc:	4601      	mov	r1, r0
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 fbd4 	bl	8009a6c <__pow5mult>
 80092c4:	9b06      	ldr	r3, [sp, #24]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	4606      	mov	r6, r0
 80092ca:	f340 8081 	ble.w	80093d0 <_dtoa_r+0x8c8>
 80092ce:	f04f 0800 	mov.w	r8, #0
 80092d2:	6933      	ldr	r3, [r6, #16]
 80092d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092d8:	6918      	ldr	r0, [r3, #16]
 80092da:	f000 fab7 	bl	800984c <__hi0bits>
 80092de:	f1c0 0020 	rsb	r0, r0, #32
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	4418      	add	r0, r3
 80092e6:	f010 001f 	ands.w	r0, r0, #31
 80092ea:	f000 8092 	beq.w	8009412 <_dtoa_r+0x90a>
 80092ee:	f1c0 0320 	rsb	r3, r0, #32
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	f340 808a 	ble.w	800940c <_dtoa_r+0x904>
 80092f8:	f1c0 001c 	rsb	r0, r0, #28
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	4403      	add	r3, r0
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	4403      	add	r3, r0
 8009306:	4405      	add	r5, r0
 8009308:	9305      	str	r3, [sp, #20]
 800930a:	9b04      	ldr	r3, [sp, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	dd07      	ble.n	8009320 <_dtoa_r+0x818>
 8009310:	ee18 1a10 	vmov	r1, s16
 8009314:	461a      	mov	r2, r3
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fc02 	bl	8009b20 <__lshift>
 800931c:	ee08 0a10 	vmov	s16, r0
 8009320:	9b05      	ldr	r3, [sp, #20]
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd05      	ble.n	8009332 <_dtoa_r+0x82a>
 8009326:	4631      	mov	r1, r6
 8009328:	461a      	mov	r2, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fbf8 	bl	8009b20 <__lshift>
 8009330:	4606      	mov	r6, r0
 8009332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d06e      	beq.n	8009416 <_dtoa_r+0x90e>
 8009338:	ee18 0a10 	vmov	r0, s16
 800933c:	4631      	mov	r1, r6
 800933e:	f000 fc5f 	bl	8009c00 <__mcmp>
 8009342:	2800      	cmp	r0, #0
 8009344:	da67      	bge.n	8009416 <_dtoa_r+0x90e>
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	3b01      	subs	r3, #1
 800934a:	ee18 1a10 	vmov	r1, s16
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	220a      	movs	r2, #10
 8009352:	2300      	movs	r3, #0
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fa33 	bl	80097c0 <__multadd>
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	ee08 0a10 	vmov	s16, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 81b1 	beq.w	80096c8 <_dtoa_r+0xbc0>
 8009366:	2300      	movs	r3, #0
 8009368:	4639      	mov	r1, r7
 800936a:	220a      	movs	r2, #10
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fa27 	bl	80097c0 <__multadd>
 8009372:	9b02      	ldr	r3, [sp, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	4607      	mov	r7, r0
 8009378:	f300 808e 	bgt.w	8009498 <_dtoa_r+0x990>
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	2b02      	cmp	r3, #2
 8009380:	dc51      	bgt.n	8009426 <_dtoa_r+0x91e>
 8009382:	e089      	b.n	8009498 <_dtoa_r+0x990>
 8009384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800938a:	e74b      	b.n	8009224 <_dtoa_r+0x71c>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	1e5e      	subs	r6, r3, #1
 8009390:	9b07      	ldr	r3, [sp, #28]
 8009392:	42b3      	cmp	r3, r6
 8009394:	bfbf      	itttt	lt
 8009396:	9b07      	ldrlt	r3, [sp, #28]
 8009398:	9607      	strlt	r6, [sp, #28]
 800939a:	1af2      	sublt	r2, r6, r3
 800939c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800939e:	bfb6      	itet	lt
 80093a0:	189b      	addlt	r3, r3, r2
 80093a2:	1b9e      	subge	r6, r3, r6
 80093a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	bfb8      	it	lt
 80093aa:	2600      	movlt	r6, #0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	bfb7      	itett	lt
 80093b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093b8:	1a9d      	sublt	r5, r3, r2
 80093ba:	2300      	movlt	r3, #0
 80093bc:	e734      	b.n	8009228 <_dtoa_r+0x720>
 80093be:	9e07      	ldr	r6, [sp, #28]
 80093c0:	9d04      	ldr	r5, [sp, #16]
 80093c2:	9f08      	ldr	r7, [sp, #32]
 80093c4:	e73b      	b.n	800923e <_dtoa_r+0x736>
 80093c6:	9a07      	ldr	r2, [sp, #28]
 80093c8:	e767      	b.n	800929a <_dtoa_r+0x792>
 80093ca:	9b06      	ldr	r3, [sp, #24]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	dc18      	bgt.n	8009402 <_dtoa_r+0x8fa>
 80093d0:	f1ba 0f00 	cmp.w	sl, #0
 80093d4:	d115      	bne.n	8009402 <_dtoa_r+0x8fa>
 80093d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093da:	b993      	cbnz	r3, 8009402 <_dtoa_r+0x8fa>
 80093dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093e0:	0d1b      	lsrs	r3, r3, #20
 80093e2:	051b      	lsls	r3, r3, #20
 80093e4:	b183      	cbz	r3, 8009408 <_dtoa_r+0x900>
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	3301      	adds	r3, #1
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	9b05      	ldr	r3, [sp, #20]
 80093ee:	3301      	adds	r3, #1
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f04f 0801 	mov.w	r8, #1
 80093f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f47f af6a 	bne.w	80092d2 <_dtoa_r+0x7ca>
 80093fe:	2001      	movs	r0, #1
 8009400:	e76f      	b.n	80092e2 <_dtoa_r+0x7da>
 8009402:	f04f 0800 	mov.w	r8, #0
 8009406:	e7f6      	b.n	80093f6 <_dtoa_r+0x8ee>
 8009408:	4698      	mov	r8, r3
 800940a:	e7f4      	b.n	80093f6 <_dtoa_r+0x8ee>
 800940c:	f43f af7d 	beq.w	800930a <_dtoa_r+0x802>
 8009410:	4618      	mov	r0, r3
 8009412:	301c      	adds	r0, #28
 8009414:	e772      	b.n	80092fc <_dtoa_r+0x7f4>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc37      	bgt.n	800948c <_dtoa_r+0x984>
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	2b02      	cmp	r3, #2
 8009420:	dd34      	ble.n	800948c <_dtoa_r+0x984>
 8009422:	9b03      	ldr	r3, [sp, #12]
 8009424:	9302      	str	r3, [sp, #8]
 8009426:	9b02      	ldr	r3, [sp, #8]
 8009428:	b96b      	cbnz	r3, 8009446 <_dtoa_r+0x93e>
 800942a:	4631      	mov	r1, r6
 800942c:	2205      	movs	r2, #5
 800942e:	4620      	mov	r0, r4
 8009430:	f000 f9c6 	bl	80097c0 <__multadd>
 8009434:	4601      	mov	r1, r0
 8009436:	4606      	mov	r6, r0
 8009438:	ee18 0a10 	vmov	r0, s16
 800943c:	f000 fbe0 	bl	8009c00 <__mcmp>
 8009440:	2800      	cmp	r0, #0
 8009442:	f73f adbb 	bgt.w	8008fbc <_dtoa_r+0x4b4>
 8009446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009448:	9d01      	ldr	r5, [sp, #4]
 800944a:	43db      	mvns	r3, r3
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	f04f 0800 	mov.w	r8, #0
 8009452:	4631      	mov	r1, r6
 8009454:	4620      	mov	r0, r4
 8009456:	f000 f991 	bl	800977c <_Bfree>
 800945a:	2f00      	cmp	r7, #0
 800945c:	f43f aea4 	beq.w	80091a8 <_dtoa_r+0x6a0>
 8009460:	f1b8 0f00 	cmp.w	r8, #0
 8009464:	d005      	beq.n	8009472 <_dtoa_r+0x96a>
 8009466:	45b8      	cmp	r8, r7
 8009468:	d003      	beq.n	8009472 <_dtoa_r+0x96a>
 800946a:	4641      	mov	r1, r8
 800946c:	4620      	mov	r0, r4
 800946e:	f000 f985 	bl	800977c <_Bfree>
 8009472:	4639      	mov	r1, r7
 8009474:	4620      	mov	r0, r4
 8009476:	f000 f981 	bl	800977c <_Bfree>
 800947a:	e695      	b.n	80091a8 <_dtoa_r+0x6a0>
 800947c:	2600      	movs	r6, #0
 800947e:	4637      	mov	r7, r6
 8009480:	e7e1      	b.n	8009446 <_dtoa_r+0x93e>
 8009482:	9700      	str	r7, [sp, #0]
 8009484:	4637      	mov	r7, r6
 8009486:	e599      	b.n	8008fbc <_dtoa_r+0x4b4>
 8009488:	40240000 	.word	0x40240000
 800948c:	9b08      	ldr	r3, [sp, #32]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 80ca 	beq.w	8009628 <_dtoa_r+0xb20>
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	2d00      	cmp	r5, #0
 800949a:	dd05      	ble.n	80094a8 <_dtoa_r+0x9a0>
 800949c:	4639      	mov	r1, r7
 800949e:	462a      	mov	r2, r5
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 fb3d 	bl	8009b20 <__lshift>
 80094a6:	4607      	mov	r7, r0
 80094a8:	f1b8 0f00 	cmp.w	r8, #0
 80094ac:	d05b      	beq.n	8009566 <_dtoa_r+0xa5e>
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 f923 	bl	80096fc <_Balloc>
 80094b6:	4605      	mov	r5, r0
 80094b8:	b928      	cbnz	r0, 80094c6 <_dtoa_r+0x9be>
 80094ba:	4b87      	ldr	r3, [pc, #540]	; (80096d8 <_dtoa_r+0xbd0>)
 80094bc:	4602      	mov	r2, r0
 80094be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094c2:	f7ff bb3b 	b.w	8008b3c <_dtoa_r+0x34>
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	3202      	adds	r2, #2
 80094ca:	0092      	lsls	r2, r2, #2
 80094cc:	f107 010c 	add.w	r1, r7, #12
 80094d0:	300c      	adds	r0, #12
 80094d2:	f7fe fdb1 	bl	8008038 <memcpy>
 80094d6:	2201      	movs	r2, #1
 80094d8:	4629      	mov	r1, r5
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fb20 	bl	8009b20 <__lshift>
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	f103 0901 	add.w	r9, r3, #1
 80094e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80094ea:	4413      	add	r3, r2
 80094ec:	9305      	str	r3, [sp, #20]
 80094ee:	f00a 0301 	and.w	r3, sl, #1
 80094f2:	46b8      	mov	r8, r7
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	4607      	mov	r7, r0
 80094f8:	4631      	mov	r1, r6
 80094fa:	ee18 0a10 	vmov	r0, s16
 80094fe:	f7ff fa77 	bl	80089f0 <quorem>
 8009502:	4641      	mov	r1, r8
 8009504:	9002      	str	r0, [sp, #8]
 8009506:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800950a:	ee18 0a10 	vmov	r0, s16
 800950e:	f000 fb77 	bl	8009c00 <__mcmp>
 8009512:	463a      	mov	r2, r7
 8009514:	9003      	str	r0, [sp, #12]
 8009516:	4631      	mov	r1, r6
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fb8d 	bl	8009c38 <__mdiff>
 800951e:	68c2      	ldr	r2, [r0, #12]
 8009520:	f109 3bff 	add.w	fp, r9, #4294967295
 8009524:	4605      	mov	r5, r0
 8009526:	bb02      	cbnz	r2, 800956a <_dtoa_r+0xa62>
 8009528:	4601      	mov	r1, r0
 800952a:	ee18 0a10 	vmov	r0, s16
 800952e:	f000 fb67 	bl	8009c00 <__mcmp>
 8009532:	4602      	mov	r2, r0
 8009534:	4629      	mov	r1, r5
 8009536:	4620      	mov	r0, r4
 8009538:	9207      	str	r2, [sp, #28]
 800953a:	f000 f91f 	bl	800977c <_Bfree>
 800953e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009542:	ea43 0102 	orr.w	r1, r3, r2
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	430b      	orrs	r3, r1
 800954a:	464d      	mov	r5, r9
 800954c:	d10f      	bne.n	800956e <_dtoa_r+0xa66>
 800954e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009552:	d02a      	beq.n	80095aa <_dtoa_r+0xaa2>
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dd02      	ble.n	8009560 <_dtoa_r+0xa58>
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009560:	f88b a000 	strb.w	sl, [fp]
 8009564:	e775      	b.n	8009452 <_dtoa_r+0x94a>
 8009566:	4638      	mov	r0, r7
 8009568:	e7ba      	b.n	80094e0 <_dtoa_r+0x9d8>
 800956a:	2201      	movs	r2, #1
 800956c:	e7e2      	b.n	8009534 <_dtoa_r+0xa2c>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	db04      	blt.n	800957e <_dtoa_r+0xa76>
 8009574:	9906      	ldr	r1, [sp, #24]
 8009576:	430b      	orrs	r3, r1
 8009578:	9904      	ldr	r1, [sp, #16]
 800957a:	430b      	orrs	r3, r1
 800957c:	d122      	bne.n	80095c4 <_dtoa_r+0xabc>
 800957e:	2a00      	cmp	r2, #0
 8009580:	ddee      	ble.n	8009560 <_dtoa_r+0xa58>
 8009582:	ee18 1a10 	vmov	r1, s16
 8009586:	2201      	movs	r2, #1
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fac9 	bl	8009b20 <__lshift>
 800958e:	4631      	mov	r1, r6
 8009590:	ee08 0a10 	vmov	s16, r0
 8009594:	f000 fb34 	bl	8009c00 <__mcmp>
 8009598:	2800      	cmp	r0, #0
 800959a:	dc03      	bgt.n	80095a4 <_dtoa_r+0xa9c>
 800959c:	d1e0      	bne.n	8009560 <_dtoa_r+0xa58>
 800959e:	f01a 0f01 	tst.w	sl, #1
 80095a2:	d0dd      	beq.n	8009560 <_dtoa_r+0xa58>
 80095a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095a8:	d1d7      	bne.n	800955a <_dtoa_r+0xa52>
 80095aa:	2339      	movs	r3, #57	; 0x39
 80095ac:	f88b 3000 	strb.w	r3, [fp]
 80095b0:	462b      	mov	r3, r5
 80095b2:	461d      	mov	r5, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ba:	2a39      	cmp	r2, #57	; 0x39
 80095bc:	d071      	beq.n	80096a2 <_dtoa_r+0xb9a>
 80095be:	3201      	adds	r2, #1
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	e746      	b.n	8009452 <_dtoa_r+0x94a>
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	dd07      	ble.n	80095d8 <_dtoa_r+0xad0>
 80095c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095cc:	d0ed      	beq.n	80095aa <_dtoa_r+0xaa2>
 80095ce:	f10a 0301 	add.w	r3, sl, #1
 80095d2:	f88b 3000 	strb.w	r3, [fp]
 80095d6:	e73c      	b.n	8009452 <_dtoa_r+0x94a>
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80095de:	4599      	cmp	r9, r3
 80095e0:	d047      	beq.n	8009672 <_dtoa_r+0xb6a>
 80095e2:	ee18 1a10 	vmov	r1, s16
 80095e6:	2300      	movs	r3, #0
 80095e8:	220a      	movs	r2, #10
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 f8e8 	bl	80097c0 <__multadd>
 80095f0:	45b8      	cmp	r8, r7
 80095f2:	ee08 0a10 	vmov	s16, r0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	f04f 020a 	mov.w	r2, #10
 80095fe:	4641      	mov	r1, r8
 8009600:	4620      	mov	r0, r4
 8009602:	d106      	bne.n	8009612 <_dtoa_r+0xb0a>
 8009604:	f000 f8dc 	bl	80097c0 <__multadd>
 8009608:	4680      	mov	r8, r0
 800960a:	4607      	mov	r7, r0
 800960c:	f109 0901 	add.w	r9, r9, #1
 8009610:	e772      	b.n	80094f8 <_dtoa_r+0x9f0>
 8009612:	f000 f8d5 	bl	80097c0 <__multadd>
 8009616:	4639      	mov	r1, r7
 8009618:	4680      	mov	r8, r0
 800961a:	2300      	movs	r3, #0
 800961c:	220a      	movs	r2, #10
 800961e:	4620      	mov	r0, r4
 8009620:	f000 f8ce 	bl	80097c0 <__multadd>
 8009624:	4607      	mov	r7, r0
 8009626:	e7f1      	b.n	800960c <_dtoa_r+0xb04>
 8009628:	9b03      	ldr	r3, [sp, #12]
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	9d01      	ldr	r5, [sp, #4]
 800962e:	ee18 0a10 	vmov	r0, s16
 8009632:	4631      	mov	r1, r6
 8009634:	f7ff f9dc 	bl	80089f0 <quorem>
 8009638:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	f805 ab01 	strb.w	sl, [r5], #1
 8009642:	1aea      	subs	r2, r5, r3
 8009644:	9b02      	ldr	r3, [sp, #8]
 8009646:	4293      	cmp	r3, r2
 8009648:	dd09      	ble.n	800965e <_dtoa_r+0xb56>
 800964a:	ee18 1a10 	vmov	r1, s16
 800964e:	2300      	movs	r3, #0
 8009650:	220a      	movs	r2, #10
 8009652:	4620      	mov	r0, r4
 8009654:	f000 f8b4 	bl	80097c0 <__multadd>
 8009658:	ee08 0a10 	vmov	s16, r0
 800965c:	e7e7      	b.n	800962e <_dtoa_r+0xb26>
 800965e:	9b02      	ldr	r3, [sp, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfc8      	it	gt
 8009664:	461d      	movgt	r5, r3
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	bfd8      	it	le
 800966a:	2501      	movle	r5, #1
 800966c:	441d      	add	r5, r3
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	ee18 1a10 	vmov	r1, s16
 8009676:	2201      	movs	r2, #1
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fa51 	bl	8009b20 <__lshift>
 800967e:	4631      	mov	r1, r6
 8009680:	ee08 0a10 	vmov	s16, r0
 8009684:	f000 fabc 	bl	8009c00 <__mcmp>
 8009688:	2800      	cmp	r0, #0
 800968a:	dc91      	bgt.n	80095b0 <_dtoa_r+0xaa8>
 800968c:	d102      	bne.n	8009694 <_dtoa_r+0xb8c>
 800968e:	f01a 0f01 	tst.w	sl, #1
 8009692:	d18d      	bne.n	80095b0 <_dtoa_r+0xaa8>
 8009694:	462b      	mov	r3, r5
 8009696:	461d      	mov	r5, r3
 8009698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800969c:	2a30      	cmp	r2, #48	; 0x30
 800969e:	d0fa      	beq.n	8009696 <_dtoa_r+0xb8e>
 80096a0:	e6d7      	b.n	8009452 <_dtoa_r+0x94a>
 80096a2:	9a01      	ldr	r2, [sp, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d184      	bne.n	80095b2 <_dtoa_r+0xaaa>
 80096a8:	9b00      	ldr	r3, [sp, #0]
 80096aa:	3301      	adds	r3, #1
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	2331      	movs	r3, #49	; 0x31
 80096b0:	7013      	strb	r3, [r2, #0]
 80096b2:	e6ce      	b.n	8009452 <_dtoa_r+0x94a>
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <_dtoa_r+0xbd4>)
 80096b6:	f7ff ba95 	b.w	8008be4 <_dtoa_r+0xdc>
 80096ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f47f aa6e 	bne.w	8008b9e <_dtoa_r+0x96>
 80096c2:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <_dtoa_r+0xbd8>)
 80096c4:	f7ff ba8e 	b.w	8008be4 <_dtoa_r+0xdc>
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dcae      	bgt.n	800962c <_dtoa_r+0xb24>
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	f73f aea8 	bgt.w	8009426 <_dtoa_r+0x91e>
 80096d6:	e7a9      	b.n	800962c <_dtoa_r+0xb24>
 80096d8:	0800b077 	.word	0x0800b077
 80096dc:	0800afd4 	.word	0x0800afd4
 80096e0:	0800aff8 	.word	0x0800aff8

080096e4 <_localeconv_r>:
 80096e4:	4800      	ldr	r0, [pc, #0]	; (80096e8 <_localeconv_r+0x4>)
 80096e6:	4770      	bx	lr
 80096e8:	20000188 	.word	0x20000188

080096ec <malloc>:
 80096ec:	4b02      	ldr	r3, [pc, #8]	; (80096f8 <malloc+0xc>)
 80096ee:	4601      	mov	r1, r0
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	f000 bc09 	b.w	8009f08 <_malloc_r>
 80096f6:	bf00      	nop
 80096f8:	20000034 	.word	0x20000034

080096fc <_Balloc>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009700:	4604      	mov	r4, r0
 8009702:	460d      	mov	r5, r1
 8009704:	b976      	cbnz	r6, 8009724 <_Balloc+0x28>
 8009706:	2010      	movs	r0, #16
 8009708:	f7ff fff0 	bl	80096ec <malloc>
 800970c:	4602      	mov	r2, r0
 800970e:	6260      	str	r0, [r4, #36]	; 0x24
 8009710:	b920      	cbnz	r0, 800971c <_Balloc+0x20>
 8009712:	4b18      	ldr	r3, [pc, #96]	; (8009774 <_Balloc+0x78>)
 8009714:	4818      	ldr	r0, [pc, #96]	; (8009778 <_Balloc+0x7c>)
 8009716:	2166      	movs	r1, #102	; 0x66
 8009718:	f000 fde4 	bl	800a2e4 <__assert_func>
 800971c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009720:	6006      	str	r6, [r0, #0]
 8009722:	60c6      	str	r6, [r0, #12]
 8009724:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009726:	68f3      	ldr	r3, [r6, #12]
 8009728:	b183      	cbz	r3, 800974c <_Balloc+0x50>
 800972a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009732:	b9b8      	cbnz	r0, 8009764 <_Balloc+0x68>
 8009734:	2101      	movs	r1, #1
 8009736:	fa01 f605 	lsl.w	r6, r1, r5
 800973a:	1d72      	adds	r2, r6, #5
 800973c:	0092      	lsls	r2, r2, #2
 800973e:	4620      	mov	r0, r4
 8009740:	f000 fb60 	bl	8009e04 <_calloc_r>
 8009744:	b160      	cbz	r0, 8009760 <_Balloc+0x64>
 8009746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800974a:	e00e      	b.n	800976a <_Balloc+0x6e>
 800974c:	2221      	movs	r2, #33	; 0x21
 800974e:	2104      	movs	r1, #4
 8009750:	4620      	mov	r0, r4
 8009752:	f000 fb57 	bl	8009e04 <_calloc_r>
 8009756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009758:	60f0      	str	r0, [r6, #12]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e4      	bne.n	800972a <_Balloc+0x2e>
 8009760:	2000      	movs	r0, #0
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	6802      	ldr	r2, [r0, #0]
 8009766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800976a:	2300      	movs	r3, #0
 800976c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009770:	e7f7      	b.n	8009762 <_Balloc+0x66>
 8009772:	bf00      	nop
 8009774:	0800b005 	.word	0x0800b005
 8009778:	0800b088 	.word	0x0800b088

0800977c <_Bfree>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009780:	4605      	mov	r5, r0
 8009782:	460c      	mov	r4, r1
 8009784:	b976      	cbnz	r6, 80097a4 <_Bfree+0x28>
 8009786:	2010      	movs	r0, #16
 8009788:	f7ff ffb0 	bl	80096ec <malloc>
 800978c:	4602      	mov	r2, r0
 800978e:	6268      	str	r0, [r5, #36]	; 0x24
 8009790:	b920      	cbnz	r0, 800979c <_Bfree+0x20>
 8009792:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <_Bfree+0x3c>)
 8009794:	4809      	ldr	r0, [pc, #36]	; (80097bc <_Bfree+0x40>)
 8009796:	218a      	movs	r1, #138	; 0x8a
 8009798:	f000 fda4 	bl	800a2e4 <__assert_func>
 800979c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097a0:	6006      	str	r6, [r0, #0]
 80097a2:	60c6      	str	r6, [r0, #12]
 80097a4:	b13c      	cbz	r4, 80097b6 <_Bfree+0x3a>
 80097a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097a8:	6862      	ldr	r2, [r4, #4]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097b0:	6021      	str	r1, [r4, #0]
 80097b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	0800b005 	.word	0x0800b005
 80097bc:	0800b088 	.word	0x0800b088

080097c0 <__multadd>:
 80097c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c4:	690d      	ldr	r5, [r1, #16]
 80097c6:	4607      	mov	r7, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	461e      	mov	r6, r3
 80097cc:	f101 0c14 	add.w	ip, r1, #20
 80097d0:	2000      	movs	r0, #0
 80097d2:	f8dc 3000 	ldr.w	r3, [ip]
 80097d6:	b299      	uxth	r1, r3
 80097d8:	fb02 6101 	mla	r1, r2, r1, r6
 80097dc:	0c1e      	lsrs	r6, r3, #16
 80097de:	0c0b      	lsrs	r3, r1, #16
 80097e0:	fb02 3306 	mla	r3, r2, r6, r3
 80097e4:	b289      	uxth	r1, r1
 80097e6:	3001      	adds	r0, #1
 80097e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097ec:	4285      	cmp	r5, r0
 80097ee:	f84c 1b04 	str.w	r1, [ip], #4
 80097f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097f6:	dcec      	bgt.n	80097d2 <__multadd+0x12>
 80097f8:	b30e      	cbz	r6, 800983e <__multadd+0x7e>
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	42ab      	cmp	r3, r5
 80097fe:	dc19      	bgt.n	8009834 <__multadd+0x74>
 8009800:	6861      	ldr	r1, [r4, #4]
 8009802:	4638      	mov	r0, r7
 8009804:	3101      	adds	r1, #1
 8009806:	f7ff ff79 	bl	80096fc <_Balloc>
 800980a:	4680      	mov	r8, r0
 800980c:	b928      	cbnz	r0, 800981a <__multadd+0x5a>
 800980e:	4602      	mov	r2, r0
 8009810:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <__multadd+0x84>)
 8009812:	480d      	ldr	r0, [pc, #52]	; (8009848 <__multadd+0x88>)
 8009814:	21b5      	movs	r1, #181	; 0xb5
 8009816:	f000 fd65 	bl	800a2e4 <__assert_func>
 800981a:	6922      	ldr	r2, [r4, #16]
 800981c:	3202      	adds	r2, #2
 800981e:	f104 010c 	add.w	r1, r4, #12
 8009822:	0092      	lsls	r2, r2, #2
 8009824:	300c      	adds	r0, #12
 8009826:	f7fe fc07 	bl	8008038 <memcpy>
 800982a:	4621      	mov	r1, r4
 800982c:	4638      	mov	r0, r7
 800982e:	f7ff ffa5 	bl	800977c <_Bfree>
 8009832:	4644      	mov	r4, r8
 8009834:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009838:	3501      	adds	r5, #1
 800983a:	615e      	str	r6, [r3, #20]
 800983c:	6125      	str	r5, [r4, #16]
 800983e:	4620      	mov	r0, r4
 8009840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009844:	0800b077 	.word	0x0800b077
 8009848:	0800b088 	.word	0x0800b088

0800984c <__hi0bits>:
 800984c:	0c03      	lsrs	r3, r0, #16
 800984e:	041b      	lsls	r3, r3, #16
 8009850:	b9d3      	cbnz	r3, 8009888 <__hi0bits+0x3c>
 8009852:	0400      	lsls	r0, r0, #16
 8009854:	2310      	movs	r3, #16
 8009856:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800985a:	bf04      	itt	eq
 800985c:	0200      	lsleq	r0, r0, #8
 800985e:	3308      	addeq	r3, #8
 8009860:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009864:	bf04      	itt	eq
 8009866:	0100      	lsleq	r0, r0, #4
 8009868:	3304      	addeq	r3, #4
 800986a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800986e:	bf04      	itt	eq
 8009870:	0080      	lsleq	r0, r0, #2
 8009872:	3302      	addeq	r3, #2
 8009874:	2800      	cmp	r0, #0
 8009876:	db05      	blt.n	8009884 <__hi0bits+0x38>
 8009878:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800987c:	f103 0301 	add.w	r3, r3, #1
 8009880:	bf08      	it	eq
 8009882:	2320      	moveq	r3, #32
 8009884:	4618      	mov	r0, r3
 8009886:	4770      	bx	lr
 8009888:	2300      	movs	r3, #0
 800988a:	e7e4      	b.n	8009856 <__hi0bits+0xa>

0800988c <__lo0bits>:
 800988c:	6803      	ldr	r3, [r0, #0]
 800988e:	f013 0207 	ands.w	r2, r3, #7
 8009892:	4601      	mov	r1, r0
 8009894:	d00b      	beq.n	80098ae <__lo0bits+0x22>
 8009896:	07da      	lsls	r2, r3, #31
 8009898:	d423      	bmi.n	80098e2 <__lo0bits+0x56>
 800989a:	0798      	lsls	r0, r3, #30
 800989c:	bf49      	itett	mi
 800989e:	085b      	lsrmi	r3, r3, #1
 80098a0:	089b      	lsrpl	r3, r3, #2
 80098a2:	2001      	movmi	r0, #1
 80098a4:	600b      	strmi	r3, [r1, #0]
 80098a6:	bf5c      	itt	pl
 80098a8:	600b      	strpl	r3, [r1, #0]
 80098aa:	2002      	movpl	r0, #2
 80098ac:	4770      	bx	lr
 80098ae:	b298      	uxth	r0, r3
 80098b0:	b9a8      	cbnz	r0, 80098de <__lo0bits+0x52>
 80098b2:	0c1b      	lsrs	r3, r3, #16
 80098b4:	2010      	movs	r0, #16
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	b90a      	cbnz	r2, 80098be <__lo0bits+0x32>
 80098ba:	3008      	adds	r0, #8
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	071a      	lsls	r2, r3, #28
 80098c0:	bf04      	itt	eq
 80098c2:	091b      	lsreq	r3, r3, #4
 80098c4:	3004      	addeq	r0, #4
 80098c6:	079a      	lsls	r2, r3, #30
 80098c8:	bf04      	itt	eq
 80098ca:	089b      	lsreq	r3, r3, #2
 80098cc:	3002      	addeq	r0, #2
 80098ce:	07da      	lsls	r2, r3, #31
 80098d0:	d403      	bmi.n	80098da <__lo0bits+0x4e>
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	f100 0001 	add.w	r0, r0, #1
 80098d8:	d005      	beq.n	80098e6 <__lo0bits+0x5a>
 80098da:	600b      	str	r3, [r1, #0]
 80098dc:	4770      	bx	lr
 80098de:	4610      	mov	r0, r2
 80098e0:	e7e9      	b.n	80098b6 <__lo0bits+0x2a>
 80098e2:	2000      	movs	r0, #0
 80098e4:	4770      	bx	lr
 80098e6:	2020      	movs	r0, #32
 80098e8:	4770      	bx	lr
	...

080098ec <__i2b>:
 80098ec:	b510      	push	{r4, lr}
 80098ee:	460c      	mov	r4, r1
 80098f0:	2101      	movs	r1, #1
 80098f2:	f7ff ff03 	bl	80096fc <_Balloc>
 80098f6:	4602      	mov	r2, r0
 80098f8:	b928      	cbnz	r0, 8009906 <__i2b+0x1a>
 80098fa:	4b05      	ldr	r3, [pc, #20]	; (8009910 <__i2b+0x24>)
 80098fc:	4805      	ldr	r0, [pc, #20]	; (8009914 <__i2b+0x28>)
 80098fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009902:	f000 fcef 	bl	800a2e4 <__assert_func>
 8009906:	2301      	movs	r3, #1
 8009908:	6144      	str	r4, [r0, #20]
 800990a:	6103      	str	r3, [r0, #16]
 800990c:	bd10      	pop	{r4, pc}
 800990e:	bf00      	nop
 8009910:	0800b077 	.word	0x0800b077
 8009914:	0800b088 	.word	0x0800b088

08009918 <__multiply>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	4691      	mov	r9, r2
 800991e:	690a      	ldr	r2, [r1, #16]
 8009920:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009924:	429a      	cmp	r2, r3
 8009926:	bfb8      	it	lt
 8009928:	460b      	movlt	r3, r1
 800992a:	460c      	mov	r4, r1
 800992c:	bfbc      	itt	lt
 800992e:	464c      	movlt	r4, r9
 8009930:	4699      	movlt	r9, r3
 8009932:	6927      	ldr	r7, [r4, #16]
 8009934:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009938:	68a3      	ldr	r3, [r4, #8]
 800993a:	6861      	ldr	r1, [r4, #4]
 800993c:	eb07 060a 	add.w	r6, r7, sl
 8009940:	42b3      	cmp	r3, r6
 8009942:	b085      	sub	sp, #20
 8009944:	bfb8      	it	lt
 8009946:	3101      	addlt	r1, #1
 8009948:	f7ff fed8 	bl	80096fc <_Balloc>
 800994c:	b930      	cbnz	r0, 800995c <__multiply+0x44>
 800994e:	4602      	mov	r2, r0
 8009950:	4b44      	ldr	r3, [pc, #272]	; (8009a64 <__multiply+0x14c>)
 8009952:	4845      	ldr	r0, [pc, #276]	; (8009a68 <__multiply+0x150>)
 8009954:	f240 115d 	movw	r1, #349	; 0x15d
 8009958:	f000 fcc4 	bl	800a2e4 <__assert_func>
 800995c:	f100 0514 	add.w	r5, r0, #20
 8009960:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009964:	462b      	mov	r3, r5
 8009966:	2200      	movs	r2, #0
 8009968:	4543      	cmp	r3, r8
 800996a:	d321      	bcc.n	80099b0 <__multiply+0x98>
 800996c:	f104 0314 	add.w	r3, r4, #20
 8009970:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009974:	f109 0314 	add.w	r3, r9, #20
 8009978:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800997c:	9202      	str	r2, [sp, #8]
 800997e:	1b3a      	subs	r2, r7, r4
 8009980:	3a15      	subs	r2, #21
 8009982:	f022 0203 	bic.w	r2, r2, #3
 8009986:	3204      	adds	r2, #4
 8009988:	f104 0115 	add.w	r1, r4, #21
 800998c:	428f      	cmp	r7, r1
 800998e:	bf38      	it	cc
 8009990:	2204      	movcc	r2, #4
 8009992:	9201      	str	r2, [sp, #4]
 8009994:	9a02      	ldr	r2, [sp, #8]
 8009996:	9303      	str	r3, [sp, #12]
 8009998:	429a      	cmp	r2, r3
 800999a:	d80c      	bhi.n	80099b6 <__multiply+0x9e>
 800999c:	2e00      	cmp	r6, #0
 800999e:	dd03      	ble.n	80099a8 <__multiply+0x90>
 80099a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d05a      	beq.n	8009a5e <__multiply+0x146>
 80099a8:	6106      	str	r6, [r0, #16]
 80099aa:	b005      	add	sp, #20
 80099ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b0:	f843 2b04 	str.w	r2, [r3], #4
 80099b4:	e7d8      	b.n	8009968 <__multiply+0x50>
 80099b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80099ba:	f1ba 0f00 	cmp.w	sl, #0
 80099be:	d024      	beq.n	8009a0a <__multiply+0xf2>
 80099c0:	f104 0e14 	add.w	lr, r4, #20
 80099c4:	46a9      	mov	r9, r5
 80099c6:	f04f 0c00 	mov.w	ip, #0
 80099ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099ce:	f8d9 1000 	ldr.w	r1, [r9]
 80099d2:	fa1f fb82 	uxth.w	fp, r2
 80099d6:	b289      	uxth	r1, r1
 80099d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80099dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099e0:	f8d9 2000 	ldr.w	r2, [r9]
 80099e4:	4461      	add	r1, ip
 80099e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80099ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099f2:	b289      	uxth	r1, r1
 80099f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099f8:	4577      	cmp	r7, lr
 80099fa:	f849 1b04 	str.w	r1, [r9], #4
 80099fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a02:	d8e2      	bhi.n	80099ca <__multiply+0xb2>
 8009a04:	9a01      	ldr	r2, [sp, #4]
 8009a06:	f845 c002 	str.w	ip, [r5, r2]
 8009a0a:	9a03      	ldr	r2, [sp, #12]
 8009a0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a10:	3304      	adds	r3, #4
 8009a12:	f1b9 0f00 	cmp.w	r9, #0
 8009a16:	d020      	beq.n	8009a5a <__multiply+0x142>
 8009a18:	6829      	ldr	r1, [r5, #0]
 8009a1a:	f104 0c14 	add.w	ip, r4, #20
 8009a1e:	46ae      	mov	lr, r5
 8009a20:	f04f 0a00 	mov.w	sl, #0
 8009a24:	f8bc b000 	ldrh.w	fp, [ip]
 8009a28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a2c:	fb09 220b 	mla	r2, r9, fp, r2
 8009a30:	4492      	add	sl, r2
 8009a32:	b289      	uxth	r1, r1
 8009a34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009a38:	f84e 1b04 	str.w	r1, [lr], #4
 8009a3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a40:	f8be 1000 	ldrh.w	r1, [lr]
 8009a44:	0c12      	lsrs	r2, r2, #16
 8009a46:	fb09 1102 	mla	r1, r9, r2, r1
 8009a4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009a4e:	4567      	cmp	r7, ip
 8009a50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a54:	d8e6      	bhi.n	8009a24 <__multiply+0x10c>
 8009a56:	9a01      	ldr	r2, [sp, #4]
 8009a58:	50a9      	str	r1, [r5, r2]
 8009a5a:	3504      	adds	r5, #4
 8009a5c:	e79a      	b.n	8009994 <__multiply+0x7c>
 8009a5e:	3e01      	subs	r6, #1
 8009a60:	e79c      	b.n	800999c <__multiply+0x84>
 8009a62:	bf00      	nop
 8009a64:	0800b077 	.word	0x0800b077
 8009a68:	0800b088 	.word	0x0800b088

08009a6c <__pow5mult>:
 8009a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a70:	4615      	mov	r5, r2
 8009a72:	f012 0203 	ands.w	r2, r2, #3
 8009a76:	4606      	mov	r6, r0
 8009a78:	460f      	mov	r7, r1
 8009a7a:	d007      	beq.n	8009a8c <__pow5mult+0x20>
 8009a7c:	4c25      	ldr	r4, [pc, #148]	; (8009b14 <__pow5mult+0xa8>)
 8009a7e:	3a01      	subs	r2, #1
 8009a80:	2300      	movs	r3, #0
 8009a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a86:	f7ff fe9b 	bl	80097c0 <__multadd>
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	10ad      	asrs	r5, r5, #2
 8009a8e:	d03d      	beq.n	8009b0c <__pow5mult+0xa0>
 8009a90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a92:	b97c      	cbnz	r4, 8009ab4 <__pow5mult+0x48>
 8009a94:	2010      	movs	r0, #16
 8009a96:	f7ff fe29 	bl	80096ec <malloc>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a9e:	b928      	cbnz	r0, 8009aac <__pow5mult+0x40>
 8009aa0:	4b1d      	ldr	r3, [pc, #116]	; (8009b18 <__pow5mult+0xac>)
 8009aa2:	481e      	ldr	r0, [pc, #120]	; (8009b1c <__pow5mult+0xb0>)
 8009aa4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009aa8:	f000 fc1c 	bl	800a2e4 <__assert_func>
 8009aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ab0:	6004      	str	r4, [r0, #0]
 8009ab2:	60c4      	str	r4, [r0, #12]
 8009ab4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009abc:	b94c      	cbnz	r4, 8009ad2 <__pow5mult+0x66>
 8009abe:	f240 2171 	movw	r1, #625	; 0x271
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ff12 	bl	80098ec <__i2b>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ace:	4604      	mov	r4, r0
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	f04f 0900 	mov.w	r9, #0
 8009ad6:	07eb      	lsls	r3, r5, #31
 8009ad8:	d50a      	bpl.n	8009af0 <__pow5mult+0x84>
 8009ada:	4639      	mov	r1, r7
 8009adc:	4622      	mov	r2, r4
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ff1a 	bl	8009918 <__multiply>
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f7ff fe47 	bl	800977c <_Bfree>
 8009aee:	4647      	mov	r7, r8
 8009af0:	106d      	asrs	r5, r5, #1
 8009af2:	d00b      	beq.n	8009b0c <__pow5mult+0xa0>
 8009af4:	6820      	ldr	r0, [r4, #0]
 8009af6:	b938      	cbnz	r0, 8009b08 <__pow5mult+0x9c>
 8009af8:	4622      	mov	r2, r4
 8009afa:	4621      	mov	r1, r4
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff ff0b 	bl	8009918 <__multiply>
 8009b02:	6020      	str	r0, [r4, #0]
 8009b04:	f8c0 9000 	str.w	r9, [r0]
 8009b08:	4604      	mov	r4, r0
 8009b0a:	e7e4      	b.n	8009ad6 <__pow5mult+0x6a>
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b12:	bf00      	nop
 8009b14:	0800b1d8 	.word	0x0800b1d8
 8009b18:	0800b005 	.word	0x0800b005
 8009b1c:	0800b088 	.word	0x0800b088

08009b20 <__lshift>:
 8009b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b24:	460c      	mov	r4, r1
 8009b26:	6849      	ldr	r1, [r1, #4]
 8009b28:	6923      	ldr	r3, [r4, #16]
 8009b2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b2e:	68a3      	ldr	r3, [r4, #8]
 8009b30:	4607      	mov	r7, r0
 8009b32:	4691      	mov	r9, r2
 8009b34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b38:	f108 0601 	add.w	r6, r8, #1
 8009b3c:	42b3      	cmp	r3, r6
 8009b3e:	db0b      	blt.n	8009b58 <__lshift+0x38>
 8009b40:	4638      	mov	r0, r7
 8009b42:	f7ff fddb 	bl	80096fc <_Balloc>
 8009b46:	4605      	mov	r5, r0
 8009b48:	b948      	cbnz	r0, 8009b5e <__lshift+0x3e>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	4b2a      	ldr	r3, [pc, #168]	; (8009bf8 <__lshift+0xd8>)
 8009b4e:	482b      	ldr	r0, [pc, #172]	; (8009bfc <__lshift+0xdc>)
 8009b50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b54:	f000 fbc6 	bl	800a2e4 <__assert_func>
 8009b58:	3101      	adds	r1, #1
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	e7ee      	b.n	8009b3c <__lshift+0x1c>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f100 0114 	add.w	r1, r0, #20
 8009b64:	f100 0210 	add.w	r2, r0, #16
 8009b68:	4618      	mov	r0, r3
 8009b6a:	4553      	cmp	r3, sl
 8009b6c:	db37      	blt.n	8009bde <__lshift+0xbe>
 8009b6e:	6920      	ldr	r0, [r4, #16]
 8009b70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b74:	f104 0314 	add.w	r3, r4, #20
 8009b78:	f019 091f 	ands.w	r9, r9, #31
 8009b7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b84:	d02f      	beq.n	8009be6 <__lshift+0xc6>
 8009b86:	f1c9 0e20 	rsb	lr, r9, #32
 8009b8a:	468a      	mov	sl, r1
 8009b8c:	f04f 0c00 	mov.w	ip, #0
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	fa02 f209 	lsl.w	r2, r2, r9
 8009b96:	ea42 020c 	orr.w	r2, r2, ip
 8009b9a:	f84a 2b04 	str.w	r2, [sl], #4
 8009b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba2:	4298      	cmp	r0, r3
 8009ba4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ba8:	d8f2      	bhi.n	8009b90 <__lshift+0x70>
 8009baa:	1b03      	subs	r3, r0, r4
 8009bac:	3b15      	subs	r3, #21
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	f104 0215 	add.w	r2, r4, #21
 8009bb8:	4290      	cmp	r0, r2
 8009bba:	bf38      	it	cc
 8009bbc:	2304      	movcc	r3, #4
 8009bbe:	f841 c003 	str.w	ip, [r1, r3]
 8009bc2:	f1bc 0f00 	cmp.w	ip, #0
 8009bc6:	d001      	beq.n	8009bcc <__lshift+0xac>
 8009bc8:	f108 0602 	add.w	r6, r8, #2
 8009bcc:	3e01      	subs	r6, #1
 8009bce:	4638      	mov	r0, r7
 8009bd0:	612e      	str	r6, [r5, #16]
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	f7ff fdd2 	bl	800977c <_Bfree>
 8009bd8:	4628      	mov	r0, r5
 8009bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bde:	f842 0f04 	str.w	r0, [r2, #4]!
 8009be2:	3301      	adds	r3, #1
 8009be4:	e7c1      	b.n	8009b6a <__lshift+0x4a>
 8009be6:	3904      	subs	r1, #4
 8009be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bec:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bf0:	4298      	cmp	r0, r3
 8009bf2:	d8f9      	bhi.n	8009be8 <__lshift+0xc8>
 8009bf4:	e7ea      	b.n	8009bcc <__lshift+0xac>
 8009bf6:	bf00      	nop
 8009bf8:	0800b077 	.word	0x0800b077
 8009bfc:	0800b088 	.word	0x0800b088

08009c00 <__mcmp>:
 8009c00:	b530      	push	{r4, r5, lr}
 8009c02:	6902      	ldr	r2, [r0, #16]
 8009c04:	690c      	ldr	r4, [r1, #16]
 8009c06:	1b12      	subs	r2, r2, r4
 8009c08:	d10e      	bne.n	8009c28 <__mcmp+0x28>
 8009c0a:	f100 0314 	add.w	r3, r0, #20
 8009c0e:	3114      	adds	r1, #20
 8009c10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c20:	42a5      	cmp	r5, r4
 8009c22:	d003      	beq.n	8009c2c <__mcmp+0x2c>
 8009c24:	d305      	bcc.n	8009c32 <__mcmp+0x32>
 8009c26:	2201      	movs	r2, #1
 8009c28:	4610      	mov	r0, r2
 8009c2a:	bd30      	pop	{r4, r5, pc}
 8009c2c:	4283      	cmp	r3, r0
 8009c2e:	d3f3      	bcc.n	8009c18 <__mcmp+0x18>
 8009c30:	e7fa      	b.n	8009c28 <__mcmp+0x28>
 8009c32:	f04f 32ff 	mov.w	r2, #4294967295
 8009c36:	e7f7      	b.n	8009c28 <__mcmp+0x28>

08009c38 <__mdiff>:
 8009c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	460c      	mov	r4, r1
 8009c3e:	4606      	mov	r6, r0
 8009c40:	4611      	mov	r1, r2
 8009c42:	4620      	mov	r0, r4
 8009c44:	4690      	mov	r8, r2
 8009c46:	f7ff ffdb 	bl	8009c00 <__mcmp>
 8009c4a:	1e05      	subs	r5, r0, #0
 8009c4c:	d110      	bne.n	8009c70 <__mdiff+0x38>
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff fd53 	bl	80096fc <_Balloc>
 8009c56:	b930      	cbnz	r0, 8009c66 <__mdiff+0x2e>
 8009c58:	4b3a      	ldr	r3, [pc, #232]	; (8009d44 <__mdiff+0x10c>)
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	f240 2132 	movw	r1, #562	; 0x232
 8009c60:	4839      	ldr	r0, [pc, #228]	; (8009d48 <__mdiff+0x110>)
 8009c62:	f000 fb3f 	bl	800a2e4 <__assert_func>
 8009c66:	2301      	movs	r3, #1
 8009c68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c70:	bfa4      	itt	ge
 8009c72:	4643      	movge	r3, r8
 8009c74:	46a0      	movge	r8, r4
 8009c76:	4630      	mov	r0, r6
 8009c78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c7c:	bfa6      	itte	ge
 8009c7e:	461c      	movge	r4, r3
 8009c80:	2500      	movge	r5, #0
 8009c82:	2501      	movlt	r5, #1
 8009c84:	f7ff fd3a 	bl	80096fc <_Balloc>
 8009c88:	b920      	cbnz	r0, 8009c94 <__mdiff+0x5c>
 8009c8a:	4b2e      	ldr	r3, [pc, #184]	; (8009d44 <__mdiff+0x10c>)
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c92:	e7e5      	b.n	8009c60 <__mdiff+0x28>
 8009c94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c98:	6926      	ldr	r6, [r4, #16]
 8009c9a:	60c5      	str	r5, [r0, #12]
 8009c9c:	f104 0914 	add.w	r9, r4, #20
 8009ca0:	f108 0514 	add.w	r5, r8, #20
 8009ca4:	f100 0e14 	add.w	lr, r0, #20
 8009ca8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009cac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cb0:	f108 0210 	add.w	r2, r8, #16
 8009cb4:	46f2      	mov	sl, lr
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cc0:	fa1f f883 	uxth.w	r8, r3
 8009cc4:	fa11 f18b 	uxtah	r1, r1, fp
 8009cc8:	0c1b      	lsrs	r3, r3, #16
 8009cca:	eba1 0808 	sub.w	r8, r1, r8
 8009cce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cd6:	fa1f f888 	uxth.w	r8, r8
 8009cda:	1419      	asrs	r1, r3, #16
 8009cdc:	454e      	cmp	r6, r9
 8009cde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ce2:	f84a 3b04 	str.w	r3, [sl], #4
 8009ce6:	d8e7      	bhi.n	8009cb8 <__mdiff+0x80>
 8009ce8:	1b33      	subs	r3, r6, r4
 8009cea:	3b15      	subs	r3, #21
 8009cec:	f023 0303 	bic.w	r3, r3, #3
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	3415      	adds	r4, #21
 8009cf4:	42a6      	cmp	r6, r4
 8009cf6:	bf38      	it	cc
 8009cf8:	2304      	movcc	r3, #4
 8009cfa:	441d      	add	r5, r3
 8009cfc:	4473      	add	r3, lr
 8009cfe:	469e      	mov	lr, r3
 8009d00:	462e      	mov	r6, r5
 8009d02:	4566      	cmp	r6, ip
 8009d04:	d30e      	bcc.n	8009d24 <__mdiff+0xec>
 8009d06:	f10c 0203 	add.w	r2, ip, #3
 8009d0a:	1b52      	subs	r2, r2, r5
 8009d0c:	f022 0203 	bic.w	r2, r2, #3
 8009d10:	3d03      	subs	r5, #3
 8009d12:	45ac      	cmp	ip, r5
 8009d14:	bf38      	it	cc
 8009d16:	2200      	movcc	r2, #0
 8009d18:	441a      	add	r2, r3
 8009d1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d1e:	b17b      	cbz	r3, 8009d40 <__mdiff+0x108>
 8009d20:	6107      	str	r7, [r0, #16]
 8009d22:	e7a3      	b.n	8009c6c <__mdiff+0x34>
 8009d24:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d28:	fa11 f288 	uxtah	r2, r1, r8
 8009d2c:	1414      	asrs	r4, r2, #16
 8009d2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d32:	b292      	uxth	r2, r2
 8009d34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d38:	f84e 2b04 	str.w	r2, [lr], #4
 8009d3c:	1421      	asrs	r1, r4, #16
 8009d3e:	e7e0      	b.n	8009d02 <__mdiff+0xca>
 8009d40:	3f01      	subs	r7, #1
 8009d42:	e7ea      	b.n	8009d1a <__mdiff+0xe2>
 8009d44:	0800b077 	.word	0x0800b077
 8009d48:	0800b088 	.word	0x0800b088

08009d4c <__d2b>:
 8009d4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d50:	4689      	mov	r9, r1
 8009d52:	2101      	movs	r1, #1
 8009d54:	ec57 6b10 	vmov	r6, r7, d0
 8009d58:	4690      	mov	r8, r2
 8009d5a:	f7ff fccf 	bl	80096fc <_Balloc>
 8009d5e:	4604      	mov	r4, r0
 8009d60:	b930      	cbnz	r0, 8009d70 <__d2b+0x24>
 8009d62:	4602      	mov	r2, r0
 8009d64:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <__d2b+0xb0>)
 8009d66:	4826      	ldr	r0, [pc, #152]	; (8009e00 <__d2b+0xb4>)
 8009d68:	f240 310a 	movw	r1, #778	; 0x30a
 8009d6c:	f000 faba 	bl	800a2e4 <__assert_func>
 8009d70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d78:	bb35      	cbnz	r5, 8009dc8 <__d2b+0x7c>
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	d028      	beq.n	8009dd2 <__d2b+0x86>
 8009d80:	4668      	mov	r0, sp
 8009d82:	9600      	str	r6, [sp, #0]
 8009d84:	f7ff fd82 	bl	800988c <__lo0bits>
 8009d88:	9900      	ldr	r1, [sp, #0]
 8009d8a:	b300      	cbz	r0, 8009dce <__d2b+0x82>
 8009d8c:	9a01      	ldr	r2, [sp, #4]
 8009d8e:	f1c0 0320 	rsb	r3, r0, #32
 8009d92:	fa02 f303 	lsl.w	r3, r2, r3
 8009d96:	430b      	orrs	r3, r1
 8009d98:	40c2      	lsrs	r2, r0
 8009d9a:	6163      	str	r3, [r4, #20]
 8009d9c:	9201      	str	r2, [sp, #4]
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	61a3      	str	r3, [r4, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bf14      	ite	ne
 8009da6:	2202      	movne	r2, #2
 8009da8:	2201      	moveq	r2, #1
 8009daa:	6122      	str	r2, [r4, #16]
 8009dac:	b1d5      	cbz	r5, 8009de4 <__d2b+0x98>
 8009dae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009db2:	4405      	add	r5, r0
 8009db4:	f8c9 5000 	str.w	r5, [r9]
 8009db8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dbc:	f8c8 0000 	str.w	r0, [r8]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	b003      	add	sp, #12
 8009dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dcc:	e7d5      	b.n	8009d7a <__d2b+0x2e>
 8009dce:	6161      	str	r1, [r4, #20]
 8009dd0:	e7e5      	b.n	8009d9e <__d2b+0x52>
 8009dd2:	a801      	add	r0, sp, #4
 8009dd4:	f7ff fd5a 	bl	800988c <__lo0bits>
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	6163      	str	r3, [r4, #20]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	6122      	str	r2, [r4, #16]
 8009de0:	3020      	adds	r0, #32
 8009de2:	e7e3      	b.n	8009dac <__d2b+0x60>
 8009de4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009de8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dec:	f8c9 0000 	str.w	r0, [r9]
 8009df0:	6918      	ldr	r0, [r3, #16]
 8009df2:	f7ff fd2b 	bl	800984c <__hi0bits>
 8009df6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dfa:	e7df      	b.n	8009dbc <__d2b+0x70>
 8009dfc:	0800b077 	.word	0x0800b077
 8009e00:	0800b088 	.word	0x0800b088

08009e04 <_calloc_r>:
 8009e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e06:	fba1 2402 	umull	r2, r4, r1, r2
 8009e0a:	b94c      	cbnz	r4, 8009e20 <_calloc_r+0x1c>
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	9201      	str	r2, [sp, #4]
 8009e10:	f000 f87a 	bl	8009f08 <_malloc_r>
 8009e14:	9a01      	ldr	r2, [sp, #4]
 8009e16:	4605      	mov	r5, r0
 8009e18:	b930      	cbnz	r0, 8009e28 <_calloc_r+0x24>
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	b003      	add	sp, #12
 8009e1e:	bd30      	pop	{r4, r5, pc}
 8009e20:	220c      	movs	r2, #12
 8009e22:	6002      	str	r2, [r0, #0]
 8009e24:	2500      	movs	r5, #0
 8009e26:	e7f8      	b.n	8009e1a <_calloc_r+0x16>
 8009e28:	4621      	mov	r1, r4
 8009e2a:	f7fe f913 	bl	8008054 <memset>
 8009e2e:	e7f4      	b.n	8009e1a <_calloc_r+0x16>

08009e30 <_free_r>:
 8009e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e32:	2900      	cmp	r1, #0
 8009e34:	d044      	beq.n	8009ec0 <_free_r+0x90>
 8009e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e3a:	9001      	str	r0, [sp, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e42:	bfb8      	it	lt
 8009e44:	18e4      	addlt	r4, r4, r3
 8009e46:	f000 faa9 	bl	800a39c <__malloc_lock>
 8009e4a:	4a1e      	ldr	r2, [pc, #120]	; (8009ec4 <_free_r+0x94>)
 8009e4c:	9801      	ldr	r0, [sp, #4]
 8009e4e:	6813      	ldr	r3, [r2, #0]
 8009e50:	b933      	cbnz	r3, 8009e60 <_free_r+0x30>
 8009e52:	6063      	str	r3, [r4, #4]
 8009e54:	6014      	str	r4, [r2, #0]
 8009e56:	b003      	add	sp, #12
 8009e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e5c:	f000 baa4 	b.w	800a3a8 <__malloc_unlock>
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	d908      	bls.n	8009e76 <_free_r+0x46>
 8009e64:	6825      	ldr	r5, [r4, #0]
 8009e66:	1961      	adds	r1, r4, r5
 8009e68:	428b      	cmp	r3, r1
 8009e6a:	bf01      	itttt	eq
 8009e6c:	6819      	ldreq	r1, [r3, #0]
 8009e6e:	685b      	ldreq	r3, [r3, #4]
 8009e70:	1949      	addeq	r1, r1, r5
 8009e72:	6021      	streq	r1, [r4, #0]
 8009e74:	e7ed      	b.n	8009e52 <_free_r+0x22>
 8009e76:	461a      	mov	r2, r3
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	b10b      	cbz	r3, 8009e80 <_free_r+0x50>
 8009e7c:	42a3      	cmp	r3, r4
 8009e7e:	d9fa      	bls.n	8009e76 <_free_r+0x46>
 8009e80:	6811      	ldr	r1, [r2, #0]
 8009e82:	1855      	adds	r5, r2, r1
 8009e84:	42a5      	cmp	r5, r4
 8009e86:	d10b      	bne.n	8009ea0 <_free_r+0x70>
 8009e88:	6824      	ldr	r4, [r4, #0]
 8009e8a:	4421      	add	r1, r4
 8009e8c:	1854      	adds	r4, r2, r1
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	6011      	str	r1, [r2, #0]
 8009e92:	d1e0      	bne.n	8009e56 <_free_r+0x26>
 8009e94:	681c      	ldr	r4, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	6053      	str	r3, [r2, #4]
 8009e9a:	4421      	add	r1, r4
 8009e9c:	6011      	str	r1, [r2, #0]
 8009e9e:	e7da      	b.n	8009e56 <_free_r+0x26>
 8009ea0:	d902      	bls.n	8009ea8 <_free_r+0x78>
 8009ea2:	230c      	movs	r3, #12
 8009ea4:	6003      	str	r3, [r0, #0]
 8009ea6:	e7d6      	b.n	8009e56 <_free_r+0x26>
 8009ea8:	6825      	ldr	r5, [r4, #0]
 8009eaa:	1961      	adds	r1, r4, r5
 8009eac:	428b      	cmp	r3, r1
 8009eae:	bf04      	itt	eq
 8009eb0:	6819      	ldreq	r1, [r3, #0]
 8009eb2:	685b      	ldreq	r3, [r3, #4]
 8009eb4:	6063      	str	r3, [r4, #4]
 8009eb6:	bf04      	itt	eq
 8009eb8:	1949      	addeq	r1, r1, r5
 8009eba:	6021      	streq	r1, [r4, #0]
 8009ebc:	6054      	str	r4, [r2, #4]
 8009ebe:	e7ca      	b.n	8009e56 <_free_r+0x26>
 8009ec0:	b003      	add	sp, #12
 8009ec2:	bd30      	pop	{r4, r5, pc}
 8009ec4:	200006f4 	.word	0x200006f4

08009ec8 <sbrk_aligned>:
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	4e0e      	ldr	r6, [pc, #56]	; (8009f04 <sbrk_aligned+0x3c>)
 8009ecc:	460c      	mov	r4, r1
 8009ece:	6831      	ldr	r1, [r6, #0]
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	b911      	cbnz	r1, 8009eda <sbrk_aligned+0x12>
 8009ed4:	f000 f9e8 	bl	800a2a8 <_sbrk_r>
 8009ed8:	6030      	str	r0, [r6, #0]
 8009eda:	4621      	mov	r1, r4
 8009edc:	4628      	mov	r0, r5
 8009ede:	f000 f9e3 	bl	800a2a8 <_sbrk_r>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d00a      	beq.n	8009efc <sbrk_aligned+0x34>
 8009ee6:	1cc4      	adds	r4, r0, #3
 8009ee8:	f024 0403 	bic.w	r4, r4, #3
 8009eec:	42a0      	cmp	r0, r4
 8009eee:	d007      	beq.n	8009f00 <sbrk_aligned+0x38>
 8009ef0:	1a21      	subs	r1, r4, r0
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f000 f9d8 	bl	800a2a8 <_sbrk_r>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d101      	bne.n	8009f00 <sbrk_aligned+0x38>
 8009efc:	f04f 34ff 	mov.w	r4, #4294967295
 8009f00:	4620      	mov	r0, r4
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	200006f8 	.word	0x200006f8

08009f08 <_malloc_r>:
 8009f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0c:	1ccd      	adds	r5, r1, #3
 8009f0e:	f025 0503 	bic.w	r5, r5, #3
 8009f12:	3508      	adds	r5, #8
 8009f14:	2d0c      	cmp	r5, #12
 8009f16:	bf38      	it	cc
 8009f18:	250c      	movcc	r5, #12
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	db01      	blt.n	8009f24 <_malloc_r+0x1c>
 8009f20:	42a9      	cmp	r1, r5
 8009f22:	d905      	bls.n	8009f30 <_malloc_r+0x28>
 8009f24:	230c      	movs	r3, #12
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	2600      	movs	r6, #0
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f30:	4e2e      	ldr	r6, [pc, #184]	; (8009fec <_malloc_r+0xe4>)
 8009f32:	f000 fa33 	bl	800a39c <__malloc_lock>
 8009f36:	6833      	ldr	r3, [r6, #0]
 8009f38:	461c      	mov	r4, r3
 8009f3a:	bb34      	cbnz	r4, 8009f8a <_malloc_r+0x82>
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	4638      	mov	r0, r7
 8009f40:	f7ff ffc2 	bl	8009ec8 <sbrk_aligned>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	4604      	mov	r4, r0
 8009f48:	d14d      	bne.n	8009fe6 <_malloc_r+0xde>
 8009f4a:	6834      	ldr	r4, [r6, #0]
 8009f4c:	4626      	mov	r6, r4
 8009f4e:	2e00      	cmp	r6, #0
 8009f50:	d140      	bne.n	8009fd4 <_malloc_r+0xcc>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	4631      	mov	r1, r6
 8009f56:	4638      	mov	r0, r7
 8009f58:	eb04 0803 	add.w	r8, r4, r3
 8009f5c:	f000 f9a4 	bl	800a2a8 <_sbrk_r>
 8009f60:	4580      	cmp	r8, r0
 8009f62:	d13a      	bne.n	8009fda <_malloc_r+0xd2>
 8009f64:	6821      	ldr	r1, [r4, #0]
 8009f66:	3503      	adds	r5, #3
 8009f68:	1a6d      	subs	r5, r5, r1
 8009f6a:	f025 0503 	bic.w	r5, r5, #3
 8009f6e:	3508      	adds	r5, #8
 8009f70:	2d0c      	cmp	r5, #12
 8009f72:	bf38      	it	cc
 8009f74:	250c      	movcc	r5, #12
 8009f76:	4629      	mov	r1, r5
 8009f78:	4638      	mov	r0, r7
 8009f7a:	f7ff ffa5 	bl	8009ec8 <sbrk_aligned>
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d02b      	beq.n	8009fda <_malloc_r+0xd2>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	442b      	add	r3, r5
 8009f86:	6023      	str	r3, [r4, #0]
 8009f88:	e00e      	b.n	8009fa8 <_malloc_r+0xa0>
 8009f8a:	6822      	ldr	r2, [r4, #0]
 8009f8c:	1b52      	subs	r2, r2, r5
 8009f8e:	d41e      	bmi.n	8009fce <_malloc_r+0xc6>
 8009f90:	2a0b      	cmp	r2, #11
 8009f92:	d916      	bls.n	8009fc2 <_malloc_r+0xba>
 8009f94:	1961      	adds	r1, r4, r5
 8009f96:	42a3      	cmp	r3, r4
 8009f98:	6025      	str	r5, [r4, #0]
 8009f9a:	bf18      	it	ne
 8009f9c:	6059      	strne	r1, [r3, #4]
 8009f9e:	6863      	ldr	r3, [r4, #4]
 8009fa0:	bf08      	it	eq
 8009fa2:	6031      	streq	r1, [r6, #0]
 8009fa4:	5162      	str	r2, [r4, r5]
 8009fa6:	604b      	str	r3, [r1, #4]
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f104 060b 	add.w	r6, r4, #11
 8009fae:	f000 f9fb 	bl	800a3a8 <__malloc_unlock>
 8009fb2:	f026 0607 	bic.w	r6, r6, #7
 8009fb6:	1d23      	adds	r3, r4, #4
 8009fb8:	1af2      	subs	r2, r6, r3
 8009fba:	d0b6      	beq.n	8009f2a <_malloc_r+0x22>
 8009fbc:	1b9b      	subs	r3, r3, r6
 8009fbe:	50a3      	str	r3, [r4, r2]
 8009fc0:	e7b3      	b.n	8009f2a <_malloc_r+0x22>
 8009fc2:	6862      	ldr	r2, [r4, #4]
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	bf0c      	ite	eq
 8009fc8:	6032      	streq	r2, [r6, #0]
 8009fca:	605a      	strne	r2, [r3, #4]
 8009fcc:	e7ec      	b.n	8009fa8 <_malloc_r+0xa0>
 8009fce:	4623      	mov	r3, r4
 8009fd0:	6864      	ldr	r4, [r4, #4]
 8009fd2:	e7b2      	b.n	8009f3a <_malloc_r+0x32>
 8009fd4:	4634      	mov	r4, r6
 8009fd6:	6876      	ldr	r6, [r6, #4]
 8009fd8:	e7b9      	b.n	8009f4e <_malloc_r+0x46>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	603b      	str	r3, [r7, #0]
 8009fde:	4638      	mov	r0, r7
 8009fe0:	f000 f9e2 	bl	800a3a8 <__malloc_unlock>
 8009fe4:	e7a1      	b.n	8009f2a <_malloc_r+0x22>
 8009fe6:	6025      	str	r5, [r4, #0]
 8009fe8:	e7de      	b.n	8009fa8 <_malloc_r+0xa0>
 8009fea:	bf00      	nop
 8009fec:	200006f4 	.word	0x200006f4

08009ff0 <__ssputs_r>:
 8009ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	688e      	ldr	r6, [r1, #8]
 8009ff6:	429e      	cmp	r6, r3
 8009ff8:	4682      	mov	sl, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	4690      	mov	r8, r2
 8009ffe:	461f      	mov	r7, r3
 800a000:	d838      	bhi.n	800a074 <__ssputs_r+0x84>
 800a002:	898a      	ldrh	r2, [r1, #12]
 800a004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a008:	d032      	beq.n	800a070 <__ssputs_r+0x80>
 800a00a:	6825      	ldr	r5, [r4, #0]
 800a00c:	6909      	ldr	r1, [r1, #16]
 800a00e:	eba5 0901 	sub.w	r9, r5, r1
 800a012:	6965      	ldr	r5, [r4, #20]
 800a014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a01c:	3301      	adds	r3, #1
 800a01e:	444b      	add	r3, r9
 800a020:	106d      	asrs	r5, r5, #1
 800a022:	429d      	cmp	r5, r3
 800a024:	bf38      	it	cc
 800a026:	461d      	movcc	r5, r3
 800a028:	0553      	lsls	r3, r2, #21
 800a02a:	d531      	bpl.n	800a090 <__ssputs_r+0xa0>
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7ff ff6b 	bl	8009f08 <_malloc_r>
 800a032:	4606      	mov	r6, r0
 800a034:	b950      	cbnz	r0, 800a04c <__ssputs_r+0x5c>
 800a036:	230c      	movs	r3, #12
 800a038:	f8ca 3000 	str.w	r3, [sl]
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a042:	81a3      	strh	r3, [r4, #12]
 800a044:	f04f 30ff 	mov.w	r0, #4294967295
 800a048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04c:	6921      	ldr	r1, [r4, #16]
 800a04e:	464a      	mov	r2, r9
 800a050:	f7fd fff2 	bl	8008038 <memcpy>
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	6126      	str	r6, [r4, #16]
 800a062:	6165      	str	r5, [r4, #20]
 800a064:	444e      	add	r6, r9
 800a066:	eba5 0509 	sub.w	r5, r5, r9
 800a06a:	6026      	str	r6, [r4, #0]
 800a06c:	60a5      	str	r5, [r4, #8]
 800a06e:	463e      	mov	r6, r7
 800a070:	42be      	cmp	r6, r7
 800a072:	d900      	bls.n	800a076 <__ssputs_r+0x86>
 800a074:	463e      	mov	r6, r7
 800a076:	6820      	ldr	r0, [r4, #0]
 800a078:	4632      	mov	r2, r6
 800a07a:	4641      	mov	r1, r8
 800a07c:	f000 f974 	bl	800a368 <memmove>
 800a080:	68a3      	ldr	r3, [r4, #8]
 800a082:	1b9b      	subs	r3, r3, r6
 800a084:	60a3      	str	r3, [r4, #8]
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	4433      	add	r3, r6
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	2000      	movs	r0, #0
 800a08e:	e7db      	b.n	800a048 <__ssputs_r+0x58>
 800a090:	462a      	mov	r2, r5
 800a092:	f000 f98f 	bl	800a3b4 <_realloc_r>
 800a096:	4606      	mov	r6, r0
 800a098:	2800      	cmp	r0, #0
 800a09a:	d1e1      	bne.n	800a060 <__ssputs_r+0x70>
 800a09c:	6921      	ldr	r1, [r4, #16]
 800a09e:	4650      	mov	r0, sl
 800a0a0:	f7ff fec6 	bl	8009e30 <_free_r>
 800a0a4:	e7c7      	b.n	800a036 <__ssputs_r+0x46>
	...

0800a0a8 <_svfiprintf_r>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	4698      	mov	r8, r3
 800a0ae:	898b      	ldrh	r3, [r1, #12]
 800a0b0:	061b      	lsls	r3, r3, #24
 800a0b2:	b09d      	sub	sp, #116	; 0x74
 800a0b4:	4607      	mov	r7, r0
 800a0b6:	460d      	mov	r5, r1
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	d50e      	bpl.n	800a0da <_svfiprintf_r+0x32>
 800a0bc:	690b      	ldr	r3, [r1, #16]
 800a0be:	b963      	cbnz	r3, 800a0da <_svfiprintf_r+0x32>
 800a0c0:	2140      	movs	r1, #64	; 0x40
 800a0c2:	f7ff ff21 	bl	8009f08 <_malloc_r>
 800a0c6:	6028      	str	r0, [r5, #0]
 800a0c8:	6128      	str	r0, [r5, #16]
 800a0ca:	b920      	cbnz	r0, 800a0d6 <_svfiprintf_r+0x2e>
 800a0cc:	230c      	movs	r3, #12
 800a0ce:	603b      	str	r3, [r7, #0]
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	e0d1      	b.n	800a27a <_svfiprintf_r+0x1d2>
 800a0d6:	2340      	movs	r3, #64	; 0x40
 800a0d8:	616b      	str	r3, [r5, #20]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0de:	2320      	movs	r3, #32
 800a0e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0e8:	2330      	movs	r3, #48	; 0x30
 800a0ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a294 <_svfiprintf_r+0x1ec>
 800a0ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0f2:	f04f 0901 	mov.w	r9, #1
 800a0f6:	4623      	mov	r3, r4
 800a0f8:	469a      	mov	sl, r3
 800a0fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0fe:	b10a      	cbz	r2, 800a104 <_svfiprintf_r+0x5c>
 800a100:	2a25      	cmp	r2, #37	; 0x25
 800a102:	d1f9      	bne.n	800a0f8 <_svfiprintf_r+0x50>
 800a104:	ebba 0b04 	subs.w	fp, sl, r4
 800a108:	d00b      	beq.n	800a122 <_svfiprintf_r+0x7a>
 800a10a:	465b      	mov	r3, fp
 800a10c:	4622      	mov	r2, r4
 800a10e:	4629      	mov	r1, r5
 800a110:	4638      	mov	r0, r7
 800a112:	f7ff ff6d 	bl	8009ff0 <__ssputs_r>
 800a116:	3001      	adds	r0, #1
 800a118:	f000 80aa 	beq.w	800a270 <_svfiprintf_r+0x1c8>
 800a11c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a11e:	445a      	add	r2, fp
 800a120:	9209      	str	r2, [sp, #36]	; 0x24
 800a122:	f89a 3000 	ldrb.w	r3, [sl]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 80a2 	beq.w	800a270 <_svfiprintf_r+0x1c8>
 800a12c:	2300      	movs	r3, #0
 800a12e:	f04f 32ff 	mov.w	r2, #4294967295
 800a132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a136:	f10a 0a01 	add.w	sl, sl, #1
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	9307      	str	r3, [sp, #28]
 800a13e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a142:	931a      	str	r3, [sp, #104]	; 0x68
 800a144:	4654      	mov	r4, sl
 800a146:	2205      	movs	r2, #5
 800a148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14c:	4851      	ldr	r0, [pc, #324]	; (800a294 <_svfiprintf_r+0x1ec>)
 800a14e:	f7f6 f85f 	bl	8000210 <memchr>
 800a152:	9a04      	ldr	r2, [sp, #16]
 800a154:	b9d8      	cbnz	r0, 800a18e <_svfiprintf_r+0xe6>
 800a156:	06d0      	lsls	r0, r2, #27
 800a158:	bf44      	itt	mi
 800a15a:	2320      	movmi	r3, #32
 800a15c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a160:	0711      	lsls	r1, r2, #28
 800a162:	bf44      	itt	mi
 800a164:	232b      	movmi	r3, #43	; 0x2b
 800a166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a16a:	f89a 3000 	ldrb.w	r3, [sl]
 800a16e:	2b2a      	cmp	r3, #42	; 0x2a
 800a170:	d015      	beq.n	800a19e <_svfiprintf_r+0xf6>
 800a172:	9a07      	ldr	r2, [sp, #28]
 800a174:	4654      	mov	r4, sl
 800a176:	2000      	movs	r0, #0
 800a178:	f04f 0c0a 	mov.w	ip, #10
 800a17c:	4621      	mov	r1, r4
 800a17e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a182:	3b30      	subs	r3, #48	; 0x30
 800a184:	2b09      	cmp	r3, #9
 800a186:	d94e      	bls.n	800a226 <_svfiprintf_r+0x17e>
 800a188:	b1b0      	cbz	r0, 800a1b8 <_svfiprintf_r+0x110>
 800a18a:	9207      	str	r2, [sp, #28]
 800a18c:	e014      	b.n	800a1b8 <_svfiprintf_r+0x110>
 800a18e:	eba0 0308 	sub.w	r3, r0, r8
 800a192:	fa09 f303 	lsl.w	r3, r9, r3
 800a196:	4313      	orrs	r3, r2
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	46a2      	mov	sl, r4
 800a19c:	e7d2      	b.n	800a144 <_svfiprintf_r+0x9c>
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	1d19      	adds	r1, r3, #4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	9103      	str	r1, [sp, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bfbb      	ittet	lt
 800a1aa:	425b      	neglt	r3, r3
 800a1ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a1b0:	9307      	strge	r3, [sp, #28]
 800a1b2:	9307      	strlt	r3, [sp, #28]
 800a1b4:	bfb8      	it	lt
 800a1b6:	9204      	strlt	r2, [sp, #16]
 800a1b8:	7823      	ldrb	r3, [r4, #0]
 800a1ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a1bc:	d10c      	bne.n	800a1d8 <_svfiprintf_r+0x130>
 800a1be:	7863      	ldrb	r3, [r4, #1]
 800a1c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c2:	d135      	bne.n	800a230 <_svfiprintf_r+0x188>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	1d1a      	adds	r2, r3, #4
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	9203      	str	r2, [sp, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bfb8      	it	lt
 800a1d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1d4:	3402      	adds	r4, #2
 800a1d6:	9305      	str	r3, [sp, #20]
 800a1d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a2a4 <_svfiprintf_r+0x1fc>
 800a1dc:	7821      	ldrb	r1, [r4, #0]
 800a1de:	2203      	movs	r2, #3
 800a1e0:	4650      	mov	r0, sl
 800a1e2:	f7f6 f815 	bl	8000210 <memchr>
 800a1e6:	b140      	cbz	r0, 800a1fa <_svfiprintf_r+0x152>
 800a1e8:	2340      	movs	r3, #64	; 0x40
 800a1ea:	eba0 000a 	sub.w	r0, r0, sl
 800a1ee:	fa03 f000 	lsl.w	r0, r3, r0
 800a1f2:	9b04      	ldr	r3, [sp, #16]
 800a1f4:	4303      	orrs	r3, r0
 800a1f6:	3401      	adds	r4, #1
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fe:	4826      	ldr	r0, [pc, #152]	; (800a298 <_svfiprintf_r+0x1f0>)
 800a200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a204:	2206      	movs	r2, #6
 800a206:	f7f6 f803 	bl	8000210 <memchr>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d038      	beq.n	800a280 <_svfiprintf_r+0x1d8>
 800a20e:	4b23      	ldr	r3, [pc, #140]	; (800a29c <_svfiprintf_r+0x1f4>)
 800a210:	bb1b      	cbnz	r3, 800a25a <_svfiprintf_r+0x1b2>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	3307      	adds	r3, #7
 800a216:	f023 0307 	bic.w	r3, r3, #7
 800a21a:	3308      	adds	r3, #8
 800a21c:	9303      	str	r3, [sp, #12]
 800a21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a220:	4433      	add	r3, r6
 800a222:	9309      	str	r3, [sp, #36]	; 0x24
 800a224:	e767      	b.n	800a0f6 <_svfiprintf_r+0x4e>
 800a226:	fb0c 3202 	mla	r2, ip, r2, r3
 800a22a:	460c      	mov	r4, r1
 800a22c:	2001      	movs	r0, #1
 800a22e:	e7a5      	b.n	800a17c <_svfiprintf_r+0xd4>
 800a230:	2300      	movs	r3, #0
 800a232:	3401      	adds	r4, #1
 800a234:	9305      	str	r3, [sp, #20]
 800a236:	4619      	mov	r1, r3
 800a238:	f04f 0c0a 	mov.w	ip, #10
 800a23c:	4620      	mov	r0, r4
 800a23e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a242:	3a30      	subs	r2, #48	; 0x30
 800a244:	2a09      	cmp	r2, #9
 800a246:	d903      	bls.n	800a250 <_svfiprintf_r+0x1a8>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0c5      	beq.n	800a1d8 <_svfiprintf_r+0x130>
 800a24c:	9105      	str	r1, [sp, #20]
 800a24e:	e7c3      	b.n	800a1d8 <_svfiprintf_r+0x130>
 800a250:	fb0c 2101 	mla	r1, ip, r1, r2
 800a254:	4604      	mov	r4, r0
 800a256:	2301      	movs	r3, #1
 800a258:	e7f0      	b.n	800a23c <_svfiprintf_r+0x194>
 800a25a:	ab03      	add	r3, sp, #12
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	462a      	mov	r2, r5
 800a260:	4b0f      	ldr	r3, [pc, #60]	; (800a2a0 <_svfiprintf_r+0x1f8>)
 800a262:	a904      	add	r1, sp, #16
 800a264:	4638      	mov	r0, r7
 800a266:	f7fd ff9d 	bl	80081a4 <_printf_float>
 800a26a:	1c42      	adds	r2, r0, #1
 800a26c:	4606      	mov	r6, r0
 800a26e:	d1d6      	bne.n	800a21e <_svfiprintf_r+0x176>
 800a270:	89ab      	ldrh	r3, [r5, #12]
 800a272:	065b      	lsls	r3, r3, #25
 800a274:	f53f af2c 	bmi.w	800a0d0 <_svfiprintf_r+0x28>
 800a278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a27a:	b01d      	add	sp, #116	; 0x74
 800a27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a280:	ab03      	add	r3, sp, #12
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	462a      	mov	r2, r5
 800a286:	4b06      	ldr	r3, [pc, #24]	; (800a2a0 <_svfiprintf_r+0x1f8>)
 800a288:	a904      	add	r1, sp, #16
 800a28a:	4638      	mov	r0, r7
 800a28c:	f7fe fa2e 	bl	80086ec <_printf_i>
 800a290:	e7eb      	b.n	800a26a <_svfiprintf_r+0x1c2>
 800a292:	bf00      	nop
 800a294:	0800b1e4 	.word	0x0800b1e4
 800a298:	0800b1ee 	.word	0x0800b1ee
 800a29c:	080081a5 	.word	0x080081a5
 800a2a0:	08009ff1 	.word	0x08009ff1
 800a2a4:	0800b1ea 	.word	0x0800b1ea

0800a2a8 <_sbrk_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d06      	ldr	r5, [pc, #24]	; (800a2c4 <_sbrk_r+0x1c>)
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	602b      	str	r3, [r5, #0]
 800a2b4:	f7f9 fd10 	bl	8003cd8 <_sbrk>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_sbrk_r+0x1a>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_sbrk_r+0x1a>
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	200006fc 	.word	0x200006fc

0800a2c8 <strchr>:
 800a2c8:	b2c9      	uxtb	r1, r1
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d0:	b11a      	cbz	r2, 800a2da <strchr+0x12>
 800a2d2:	428a      	cmp	r2, r1
 800a2d4:	d1f9      	bne.n	800a2ca <strchr+0x2>
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	4770      	bx	lr
 800a2da:	2900      	cmp	r1, #0
 800a2dc:	bf18      	it	ne
 800a2de:	2300      	movne	r3, #0
 800a2e0:	e7f9      	b.n	800a2d6 <strchr+0xe>
	...

0800a2e4 <__assert_func>:
 800a2e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2e6:	4614      	mov	r4, r2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <__assert_func+0x2c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	68d8      	ldr	r0, [r3, #12]
 800a2f2:	b14c      	cbz	r4, 800a308 <__assert_func+0x24>
 800a2f4:	4b07      	ldr	r3, [pc, #28]	; (800a314 <__assert_func+0x30>)
 800a2f6:	9100      	str	r1, [sp, #0]
 800a2f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2fc:	4906      	ldr	r1, [pc, #24]	; (800a318 <__assert_func+0x34>)
 800a2fe:	462b      	mov	r3, r5
 800a300:	f000 f80e 	bl	800a320 <fiprintf>
 800a304:	f000 faac 	bl	800a860 <abort>
 800a308:	4b04      	ldr	r3, [pc, #16]	; (800a31c <__assert_func+0x38>)
 800a30a:	461c      	mov	r4, r3
 800a30c:	e7f3      	b.n	800a2f6 <__assert_func+0x12>
 800a30e:	bf00      	nop
 800a310:	20000034 	.word	0x20000034
 800a314:	0800b1f5 	.word	0x0800b1f5
 800a318:	0800b202 	.word	0x0800b202
 800a31c:	0800b230 	.word	0x0800b230

0800a320 <fiprintf>:
 800a320:	b40e      	push	{r1, r2, r3}
 800a322:	b503      	push	{r0, r1, lr}
 800a324:	4601      	mov	r1, r0
 800a326:	ab03      	add	r3, sp, #12
 800a328:	4805      	ldr	r0, [pc, #20]	; (800a340 <fiprintf+0x20>)
 800a32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a32e:	6800      	ldr	r0, [r0, #0]
 800a330:	9301      	str	r3, [sp, #4]
 800a332:	f000 f897 	bl	800a464 <_vfiprintf_r>
 800a336:	b002      	add	sp, #8
 800a338:	f85d eb04 	ldr.w	lr, [sp], #4
 800a33c:	b003      	add	sp, #12
 800a33e:	4770      	bx	lr
 800a340:	20000034 	.word	0x20000034

0800a344 <__ascii_mbtowc>:
 800a344:	b082      	sub	sp, #8
 800a346:	b901      	cbnz	r1, 800a34a <__ascii_mbtowc+0x6>
 800a348:	a901      	add	r1, sp, #4
 800a34a:	b142      	cbz	r2, 800a35e <__ascii_mbtowc+0x1a>
 800a34c:	b14b      	cbz	r3, 800a362 <__ascii_mbtowc+0x1e>
 800a34e:	7813      	ldrb	r3, [r2, #0]
 800a350:	600b      	str	r3, [r1, #0]
 800a352:	7812      	ldrb	r2, [r2, #0]
 800a354:	1e10      	subs	r0, r2, #0
 800a356:	bf18      	it	ne
 800a358:	2001      	movne	r0, #1
 800a35a:	b002      	add	sp, #8
 800a35c:	4770      	bx	lr
 800a35e:	4610      	mov	r0, r2
 800a360:	e7fb      	b.n	800a35a <__ascii_mbtowc+0x16>
 800a362:	f06f 0001 	mvn.w	r0, #1
 800a366:	e7f8      	b.n	800a35a <__ascii_mbtowc+0x16>

0800a368 <memmove>:
 800a368:	4288      	cmp	r0, r1
 800a36a:	b510      	push	{r4, lr}
 800a36c:	eb01 0402 	add.w	r4, r1, r2
 800a370:	d902      	bls.n	800a378 <memmove+0x10>
 800a372:	4284      	cmp	r4, r0
 800a374:	4623      	mov	r3, r4
 800a376:	d807      	bhi.n	800a388 <memmove+0x20>
 800a378:	1e43      	subs	r3, r0, #1
 800a37a:	42a1      	cmp	r1, r4
 800a37c:	d008      	beq.n	800a390 <memmove+0x28>
 800a37e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a382:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a386:	e7f8      	b.n	800a37a <memmove+0x12>
 800a388:	4402      	add	r2, r0
 800a38a:	4601      	mov	r1, r0
 800a38c:	428a      	cmp	r2, r1
 800a38e:	d100      	bne.n	800a392 <memmove+0x2a>
 800a390:	bd10      	pop	{r4, pc}
 800a392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a39a:	e7f7      	b.n	800a38c <memmove+0x24>

0800a39c <__malloc_lock>:
 800a39c:	4801      	ldr	r0, [pc, #4]	; (800a3a4 <__malloc_lock+0x8>)
 800a39e:	f000 bc1f 	b.w	800abe0 <__retarget_lock_acquire_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	20000700 	.word	0x20000700

0800a3a8 <__malloc_unlock>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__malloc_unlock+0x8>)
 800a3aa:	f000 bc1a 	b.w	800abe2 <__retarget_lock_release_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20000700 	.word	0x20000700

0800a3b4 <_realloc_r>:
 800a3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b8:	4680      	mov	r8, r0
 800a3ba:	4614      	mov	r4, r2
 800a3bc:	460e      	mov	r6, r1
 800a3be:	b921      	cbnz	r1, 800a3ca <_realloc_r+0x16>
 800a3c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	f7ff bd9f 	b.w	8009f08 <_malloc_r>
 800a3ca:	b92a      	cbnz	r2, 800a3d8 <_realloc_r+0x24>
 800a3cc:	f7ff fd30 	bl	8009e30 <_free_r>
 800a3d0:	4625      	mov	r5, r4
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d8:	f000 fc6a 	bl	800acb0 <_malloc_usable_size_r>
 800a3dc:	4284      	cmp	r4, r0
 800a3de:	4607      	mov	r7, r0
 800a3e0:	d802      	bhi.n	800a3e8 <_realloc_r+0x34>
 800a3e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3e6:	d812      	bhi.n	800a40e <_realloc_r+0x5a>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	f7ff fd8c 	bl	8009f08 <_malloc_r>
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d0ed      	beq.n	800a3d2 <_realloc_r+0x1e>
 800a3f6:	42bc      	cmp	r4, r7
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	bf28      	it	cs
 800a3fe:	463a      	movcs	r2, r7
 800a400:	f7fd fe1a 	bl	8008038 <memcpy>
 800a404:	4631      	mov	r1, r6
 800a406:	4640      	mov	r0, r8
 800a408:	f7ff fd12 	bl	8009e30 <_free_r>
 800a40c:	e7e1      	b.n	800a3d2 <_realloc_r+0x1e>
 800a40e:	4635      	mov	r5, r6
 800a410:	e7df      	b.n	800a3d2 <_realloc_r+0x1e>

0800a412 <__sfputc_r>:
 800a412:	6893      	ldr	r3, [r2, #8]
 800a414:	3b01      	subs	r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	b410      	push	{r4}
 800a41a:	6093      	str	r3, [r2, #8]
 800a41c:	da08      	bge.n	800a430 <__sfputc_r+0x1e>
 800a41e:	6994      	ldr	r4, [r2, #24]
 800a420:	42a3      	cmp	r3, r4
 800a422:	db01      	blt.n	800a428 <__sfputc_r+0x16>
 800a424:	290a      	cmp	r1, #10
 800a426:	d103      	bne.n	800a430 <__sfputc_r+0x1e>
 800a428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a42c:	f000 b94a 	b.w	800a6c4 <__swbuf_r>
 800a430:	6813      	ldr	r3, [r2, #0]
 800a432:	1c58      	adds	r0, r3, #1
 800a434:	6010      	str	r0, [r2, #0]
 800a436:	7019      	strb	r1, [r3, #0]
 800a438:	4608      	mov	r0, r1
 800a43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <__sfputs_r>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	4606      	mov	r6, r0
 800a444:	460f      	mov	r7, r1
 800a446:	4614      	mov	r4, r2
 800a448:	18d5      	adds	r5, r2, r3
 800a44a:	42ac      	cmp	r4, r5
 800a44c:	d101      	bne.n	800a452 <__sfputs_r+0x12>
 800a44e:	2000      	movs	r0, #0
 800a450:	e007      	b.n	800a462 <__sfputs_r+0x22>
 800a452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a456:	463a      	mov	r2, r7
 800a458:	4630      	mov	r0, r6
 800a45a:	f7ff ffda 	bl	800a412 <__sfputc_r>
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	d1f3      	bne.n	800a44a <__sfputs_r+0xa>
 800a462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a464 <_vfiprintf_r>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	460d      	mov	r5, r1
 800a46a:	b09d      	sub	sp, #116	; 0x74
 800a46c:	4614      	mov	r4, r2
 800a46e:	4698      	mov	r8, r3
 800a470:	4606      	mov	r6, r0
 800a472:	b118      	cbz	r0, 800a47c <_vfiprintf_r+0x18>
 800a474:	6983      	ldr	r3, [r0, #24]
 800a476:	b90b      	cbnz	r3, 800a47c <_vfiprintf_r+0x18>
 800a478:	f000 fb14 	bl	800aaa4 <__sinit>
 800a47c:	4b89      	ldr	r3, [pc, #548]	; (800a6a4 <_vfiprintf_r+0x240>)
 800a47e:	429d      	cmp	r5, r3
 800a480:	d11b      	bne.n	800a4ba <_vfiprintf_r+0x56>
 800a482:	6875      	ldr	r5, [r6, #4]
 800a484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a486:	07d9      	lsls	r1, r3, #31
 800a488:	d405      	bmi.n	800a496 <_vfiprintf_r+0x32>
 800a48a:	89ab      	ldrh	r3, [r5, #12]
 800a48c:	059a      	lsls	r2, r3, #22
 800a48e:	d402      	bmi.n	800a496 <_vfiprintf_r+0x32>
 800a490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a492:	f000 fba5 	bl	800abe0 <__retarget_lock_acquire_recursive>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	071b      	lsls	r3, r3, #28
 800a49a:	d501      	bpl.n	800a4a0 <_vfiprintf_r+0x3c>
 800a49c:	692b      	ldr	r3, [r5, #16]
 800a49e:	b9eb      	cbnz	r3, 800a4dc <_vfiprintf_r+0x78>
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f000 f96e 	bl	800a784 <__swsetup_r>
 800a4a8:	b1c0      	cbz	r0, 800a4dc <_vfiprintf_r+0x78>
 800a4aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4ac:	07dc      	lsls	r4, r3, #31
 800a4ae:	d50e      	bpl.n	800a4ce <_vfiprintf_r+0x6a>
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	b01d      	add	sp, #116	; 0x74
 800a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ba:	4b7b      	ldr	r3, [pc, #492]	; (800a6a8 <_vfiprintf_r+0x244>)
 800a4bc:	429d      	cmp	r5, r3
 800a4be:	d101      	bne.n	800a4c4 <_vfiprintf_r+0x60>
 800a4c0:	68b5      	ldr	r5, [r6, #8]
 800a4c2:	e7df      	b.n	800a484 <_vfiprintf_r+0x20>
 800a4c4:	4b79      	ldr	r3, [pc, #484]	; (800a6ac <_vfiprintf_r+0x248>)
 800a4c6:	429d      	cmp	r5, r3
 800a4c8:	bf08      	it	eq
 800a4ca:	68f5      	ldreq	r5, [r6, #12]
 800a4cc:	e7da      	b.n	800a484 <_vfiprintf_r+0x20>
 800a4ce:	89ab      	ldrh	r3, [r5, #12]
 800a4d0:	0598      	lsls	r0, r3, #22
 800a4d2:	d4ed      	bmi.n	800a4b0 <_vfiprintf_r+0x4c>
 800a4d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4d6:	f000 fb84 	bl	800abe2 <__retarget_lock_release_recursive>
 800a4da:	e7e9      	b.n	800a4b0 <_vfiprintf_r+0x4c>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e0:	2320      	movs	r3, #32
 800a4e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ea:	2330      	movs	r3, #48	; 0x30
 800a4ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a6b0 <_vfiprintf_r+0x24c>
 800a4f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4f4:	f04f 0901 	mov.w	r9, #1
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	469a      	mov	sl, r3
 800a4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a500:	b10a      	cbz	r2, 800a506 <_vfiprintf_r+0xa2>
 800a502:	2a25      	cmp	r2, #37	; 0x25
 800a504:	d1f9      	bne.n	800a4fa <_vfiprintf_r+0x96>
 800a506:	ebba 0b04 	subs.w	fp, sl, r4
 800a50a:	d00b      	beq.n	800a524 <_vfiprintf_r+0xc0>
 800a50c:	465b      	mov	r3, fp
 800a50e:	4622      	mov	r2, r4
 800a510:	4629      	mov	r1, r5
 800a512:	4630      	mov	r0, r6
 800a514:	f7ff ff94 	bl	800a440 <__sfputs_r>
 800a518:	3001      	adds	r0, #1
 800a51a:	f000 80aa 	beq.w	800a672 <_vfiprintf_r+0x20e>
 800a51e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a520:	445a      	add	r2, fp
 800a522:	9209      	str	r2, [sp, #36]	; 0x24
 800a524:	f89a 3000 	ldrb.w	r3, [sl]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 80a2 	beq.w	800a672 <_vfiprintf_r+0x20e>
 800a52e:	2300      	movs	r3, #0
 800a530:	f04f 32ff 	mov.w	r2, #4294967295
 800a534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a538:	f10a 0a01 	add.w	sl, sl, #1
 800a53c:	9304      	str	r3, [sp, #16]
 800a53e:	9307      	str	r3, [sp, #28]
 800a540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a544:	931a      	str	r3, [sp, #104]	; 0x68
 800a546:	4654      	mov	r4, sl
 800a548:	2205      	movs	r2, #5
 800a54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a54e:	4858      	ldr	r0, [pc, #352]	; (800a6b0 <_vfiprintf_r+0x24c>)
 800a550:	f7f5 fe5e 	bl	8000210 <memchr>
 800a554:	9a04      	ldr	r2, [sp, #16]
 800a556:	b9d8      	cbnz	r0, 800a590 <_vfiprintf_r+0x12c>
 800a558:	06d1      	lsls	r1, r2, #27
 800a55a:	bf44      	itt	mi
 800a55c:	2320      	movmi	r3, #32
 800a55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a562:	0713      	lsls	r3, r2, #28
 800a564:	bf44      	itt	mi
 800a566:	232b      	movmi	r3, #43	; 0x2b
 800a568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a56c:	f89a 3000 	ldrb.w	r3, [sl]
 800a570:	2b2a      	cmp	r3, #42	; 0x2a
 800a572:	d015      	beq.n	800a5a0 <_vfiprintf_r+0x13c>
 800a574:	9a07      	ldr	r2, [sp, #28]
 800a576:	4654      	mov	r4, sl
 800a578:	2000      	movs	r0, #0
 800a57a:	f04f 0c0a 	mov.w	ip, #10
 800a57e:	4621      	mov	r1, r4
 800a580:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a584:	3b30      	subs	r3, #48	; 0x30
 800a586:	2b09      	cmp	r3, #9
 800a588:	d94e      	bls.n	800a628 <_vfiprintf_r+0x1c4>
 800a58a:	b1b0      	cbz	r0, 800a5ba <_vfiprintf_r+0x156>
 800a58c:	9207      	str	r2, [sp, #28]
 800a58e:	e014      	b.n	800a5ba <_vfiprintf_r+0x156>
 800a590:	eba0 0308 	sub.w	r3, r0, r8
 800a594:	fa09 f303 	lsl.w	r3, r9, r3
 800a598:	4313      	orrs	r3, r2
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	46a2      	mov	sl, r4
 800a59e:	e7d2      	b.n	800a546 <_vfiprintf_r+0xe2>
 800a5a0:	9b03      	ldr	r3, [sp, #12]
 800a5a2:	1d19      	adds	r1, r3, #4
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	9103      	str	r1, [sp, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bfbb      	ittet	lt
 800a5ac:	425b      	neglt	r3, r3
 800a5ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a5b2:	9307      	strge	r3, [sp, #28]
 800a5b4:	9307      	strlt	r3, [sp, #28]
 800a5b6:	bfb8      	it	lt
 800a5b8:	9204      	strlt	r2, [sp, #16]
 800a5ba:	7823      	ldrb	r3, [r4, #0]
 800a5bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a5be:	d10c      	bne.n	800a5da <_vfiprintf_r+0x176>
 800a5c0:	7863      	ldrb	r3, [r4, #1]
 800a5c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5c4:	d135      	bne.n	800a632 <_vfiprintf_r+0x1ce>
 800a5c6:	9b03      	ldr	r3, [sp, #12]
 800a5c8:	1d1a      	adds	r2, r3, #4
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	9203      	str	r2, [sp, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bfb8      	it	lt
 800a5d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5d6:	3402      	adds	r4, #2
 800a5d8:	9305      	str	r3, [sp, #20]
 800a5da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6c0 <_vfiprintf_r+0x25c>
 800a5de:	7821      	ldrb	r1, [r4, #0]
 800a5e0:	2203      	movs	r2, #3
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	f7f5 fe14 	bl	8000210 <memchr>
 800a5e8:	b140      	cbz	r0, 800a5fc <_vfiprintf_r+0x198>
 800a5ea:	2340      	movs	r3, #64	; 0x40
 800a5ec:	eba0 000a 	sub.w	r0, r0, sl
 800a5f0:	fa03 f000 	lsl.w	r0, r3, r0
 800a5f4:	9b04      	ldr	r3, [sp, #16]
 800a5f6:	4303      	orrs	r3, r0
 800a5f8:	3401      	adds	r4, #1
 800a5fa:	9304      	str	r3, [sp, #16]
 800a5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a600:	482c      	ldr	r0, [pc, #176]	; (800a6b4 <_vfiprintf_r+0x250>)
 800a602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a606:	2206      	movs	r2, #6
 800a608:	f7f5 fe02 	bl	8000210 <memchr>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d03f      	beq.n	800a690 <_vfiprintf_r+0x22c>
 800a610:	4b29      	ldr	r3, [pc, #164]	; (800a6b8 <_vfiprintf_r+0x254>)
 800a612:	bb1b      	cbnz	r3, 800a65c <_vfiprintf_r+0x1f8>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	3307      	adds	r3, #7
 800a618:	f023 0307 	bic.w	r3, r3, #7
 800a61c:	3308      	adds	r3, #8
 800a61e:	9303      	str	r3, [sp, #12]
 800a620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a622:	443b      	add	r3, r7
 800a624:	9309      	str	r3, [sp, #36]	; 0x24
 800a626:	e767      	b.n	800a4f8 <_vfiprintf_r+0x94>
 800a628:	fb0c 3202 	mla	r2, ip, r2, r3
 800a62c:	460c      	mov	r4, r1
 800a62e:	2001      	movs	r0, #1
 800a630:	e7a5      	b.n	800a57e <_vfiprintf_r+0x11a>
 800a632:	2300      	movs	r3, #0
 800a634:	3401      	adds	r4, #1
 800a636:	9305      	str	r3, [sp, #20]
 800a638:	4619      	mov	r1, r3
 800a63a:	f04f 0c0a 	mov.w	ip, #10
 800a63e:	4620      	mov	r0, r4
 800a640:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a644:	3a30      	subs	r2, #48	; 0x30
 800a646:	2a09      	cmp	r2, #9
 800a648:	d903      	bls.n	800a652 <_vfiprintf_r+0x1ee>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0c5      	beq.n	800a5da <_vfiprintf_r+0x176>
 800a64e:	9105      	str	r1, [sp, #20]
 800a650:	e7c3      	b.n	800a5da <_vfiprintf_r+0x176>
 800a652:	fb0c 2101 	mla	r1, ip, r1, r2
 800a656:	4604      	mov	r4, r0
 800a658:	2301      	movs	r3, #1
 800a65a:	e7f0      	b.n	800a63e <_vfiprintf_r+0x1da>
 800a65c:	ab03      	add	r3, sp, #12
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	462a      	mov	r2, r5
 800a662:	4b16      	ldr	r3, [pc, #88]	; (800a6bc <_vfiprintf_r+0x258>)
 800a664:	a904      	add	r1, sp, #16
 800a666:	4630      	mov	r0, r6
 800a668:	f7fd fd9c 	bl	80081a4 <_printf_float>
 800a66c:	4607      	mov	r7, r0
 800a66e:	1c78      	adds	r0, r7, #1
 800a670:	d1d6      	bne.n	800a620 <_vfiprintf_r+0x1bc>
 800a672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a674:	07d9      	lsls	r1, r3, #31
 800a676:	d405      	bmi.n	800a684 <_vfiprintf_r+0x220>
 800a678:	89ab      	ldrh	r3, [r5, #12]
 800a67a:	059a      	lsls	r2, r3, #22
 800a67c:	d402      	bmi.n	800a684 <_vfiprintf_r+0x220>
 800a67e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a680:	f000 faaf 	bl	800abe2 <__retarget_lock_release_recursive>
 800a684:	89ab      	ldrh	r3, [r5, #12]
 800a686:	065b      	lsls	r3, r3, #25
 800a688:	f53f af12 	bmi.w	800a4b0 <_vfiprintf_r+0x4c>
 800a68c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a68e:	e711      	b.n	800a4b4 <_vfiprintf_r+0x50>
 800a690:	ab03      	add	r3, sp, #12
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	462a      	mov	r2, r5
 800a696:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <_vfiprintf_r+0x258>)
 800a698:	a904      	add	r1, sp, #16
 800a69a:	4630      	mov	r0, r6
 800a69c:	f7fe f826 	bl	80086ec <_printf_i>
 800a6a0:	e7e4      	b.n	800a66c <_vfiprintf_r+0x208>
 800a6a2:	bf00      	nop
 800a6a4:	0800b35c 	.word	0x0800b35c
 800a6a8:	0800b37c 	.word	0x0800b37c
 800a6ac:	0800b33c 	.word	0x0800b33c
 800a6b0:	0800b1e4 	.word	0x0800b1e4
 800a6b4:	0800b1ee 	.word	0x0800b1ee
 800a6b8:	080081a5 	.word	0x080081a5
 800a6bc:	0800a441 	.word	0x0800a441
 800a6c0:	0800b1ea 	.word	0x0800b1ea

0800a6c4 <__swbuf_r>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	460e      	mov	r6, r1
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	b118      	cbz	r0, 800a6d6 <__swbuf_r+0x12>
 800a6ce:	6983      	ldr	r3, [r0, #24]
 800a6d0:	b90b      	cbnz	r3, 800a6d6 <__swbuf_r+0x12>
 800a6d2:	f000 f9e7 	bl	800aaa4 <__sinit>
 800a6d6:	4b21      	ldr	r3, [pc, #132]	; (800a75c <__swbuf_r+0x98>)
 800a6d8:	429c      	cmp	r4, r3
 800a6da:	d12b      	bne.n	800a734 <__swbuf_r+0x70>
 800a6dc:	686c      	ldr	r4, [r5, #4]
 800a6de:	69a3      	ldr	r3, [r4, #24]
 800a6e0:	60a3      	str	r3, [r4, #8]
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	071a      	lsls	r2, r3, #28
 800a6e6:	d52f      	bpl.n	800a748 <__swbuf_r+0x84>
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	b36b      	cbz	r3, 800a748 <__swbuf_r+0x84>
 800a6ec:	6923      	ldr	r3, [r4, #16]
 800a6ee:	6820      	ldr	r0, [r4, #0]
 800a6f0:	1ac0      	subs	r0, r0, r3
 800a6f2:	6963      	ldr	r3, [r4, #20]
 800a6f4:	b2f6      	uxtb	r6, r6
 800a6f6:	4283      	cmp	r3, r0
 800a6f8:	4637      	mov	r7, r6
 800a6fa:	dc04      	bgt.n	800a706 <__swbuf_r+0x42>
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4628      	mov	r0, r5
 800a700:	f000 f93c 	bl	800a97c <_fflush_r>
 800a704:	bb30      	cbnz	r0, 800a754 <__swbuf_r+0x90>
 800a706:	68a3      	ldr	r3, [r4, #8]
 800a708:	3b01      	subs	r3, #1
 800a70a:	60a3      	str	r3, [r4, #8]
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	6022      	str	r2, [r4, #0]
 800a712:	701e      	strb	r6, [r3, #0]
 800a714:	6963      	ldr	r3, [r4, #20]
 800a716:	3001      	adds	r0, #1
 800a718:	4283      	cmp	r3, r0
 800a71a:	d004      	beq.n	800a726 <__swbuf_r+0x62>
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	07db      	lsls	r3, r3, #31
 800a720:	d506      	bpl.n	800a730 <__swbuf_r+0x6c>
 800a722:	2e0a      	cmp	r6, #10
 800a724:	d104      	bne.n	800a730 <__swbuf_r+0x6c>
 800a726:	4621      	mov	r1, r4
 800a728:	4628      	mov	r0, r5
 800a72a:	f000 f927 	bl	800a97c <_fflush_r>
 800a72e:	b988      	cbnz	r0, 800a754 <__swbuf_r+0x90>
 800a730:	4638      	mov	r0, r7
 800a732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a734:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <__swbuf_r+0x9c>)
 800a736:	429c      	cmp	r4, r3
 800a738:	d101      	bne.n	800a73e <__swbuf_r+0x7a>
 800a73a:	68ac      	ldr	r4, [r5, #8]
 800a73c:	e7cf      	b.n	800a6de <__swbuf_r+0x1a>
 800a73e:	4b09      	ldr	r3, [pc, #36]	; (800a764 <__swbuf_r+0xa0>)
 800a740:	429c      	cmp	r4, r3
 800a742:	bf08      	it	eq
 800a744:	68ec      	ldreq	r4, [r5, #12]
 800a746:	e7ca      	b.n	800a6de <__swbuf_r+0x1a>
 800a748:	4621      	mov	r1, r4
 800a74a:	4628      	mov	r0, r5
 800a74c:	f000 f81a 	bl	800a784 <__swsetup_r>
 800a750:	2800      	cmp	r0, #0
 800a752:	d0cb      	beq.n	800a6ec <__swbuf_r+0x28>
 800a754:	f04f 37ff 	mov.w	r7, #4294967295
 800a758:	e7ea      	b.n	800a730 <__swbuf_r+0x6c>
 800a75a:	bf00      	nop
 800a75c:	0800b35c 	.word	0x0800b35c
 800a760:	0800b37c 	.word	0x0800b37c
 800a764:	0800b33c 	.word	0x0800b33c

0800a768 <__ascii_wctomb>:
 800a768:	b149      	cbz	r1, 800a77e <__ascii_wctomb+0x16>
 800a76a:	2aff      	cmp	r2, #255	; 0xff
 800a76c:	bf85      	ittet	hi
 800a76e:	238a      	movhi	r3, #138	; 0x8a
 800a770:	6003      	strhi	r3, [r0, #0]
 800a772:	700a      	strbls	r2, [r1, #0]
 800a774:	f04f 30ff 	movhi.w	r0, #4294967295
 800a778:	bf98      	it	ls
 800a77a:	2001      	movls	r0, #1
 800a77c:	4770      	bx	lr
 800a77e:	4608      	mov	r0, r1
 800a780:	4770      	bx	lr
	...

0800a784 <__swsetup_r>:
 800a784:	4b32      	ldr	r3, [pc, #200]	; (800a850 <__swsetup_r+0xcc>)
 800a786:	b570      	push	{r4, r5, r6, lr}
 800a788:	681d      	ldr	r5, [r3, #0]
 800a78a:	4606      	mov	r6, r0
 800a78c:	460c      	mov	r4, r1
 800a78e:	b125      	cbz	r5, 800a79a <__swsetup_r+0x16>
 800a790:	69ab      	ldr	r3, [r5, #24]
 800a792:	b913      	cbnz	r3, 800a79a <__swsetup_r+0x16>
 800a794:	4628      	mov	r0, r5
 800a796:	f000 f985 	bl	800aaa4 <__sinit>
 800a79a:	4b2e      	ldr	r3, [pc, #184]	; (800a854 <__swsetup_r+0xd0>)
 800a79c:	429c      	cmp	r4, r3
 800a79e:	d10f      	bne.n	800a7c0 <__swsetup_r+0x3c>
 800a7a0:	686c      	ldr	r4, [r5, #4]
 800a7a2:	89a3      	ldrh	r3, [r4, #12]
 800a7a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7a8:	0719      	lsls	r1, r3, #28
 800a7aa:	d42c      	bmi.n	800a806 <__swsetup_r+0x82>
 800a7ac:	06dd      	lsls	r5, r3, #27
 800a7ae:	d411      	bmi.n	800a7d4 <__swsetup_r+0x50>
 800a7b0:	2309      	movs	r3, #9
 800a7b2:	6033      	str	r3, [r6, #0]
 800a7b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7b8:	81a3      	strh	r3, [r4, #12]
 800a7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a7be:	e03e      	b.n	800a83e <__swsetup_r+0xba>
 800a7c0:	4b25      	ldr	r3, [pc, #148]	; (800a858 <__swsetup_r+0xd4>)
 800a7c2:	429c      	cmp	r4, r3
 800a7c4:	d101      	bne.n	800a7ca <__swsetup_r+0x46>
 800a7c6:	68ac      	ldr	r4, [r5, #8]
 800a7c8:	e7eb      	b.n	800a7a2 <__swsetup_r+0x1e>
 800a7ca:	4b24      	ldr	r3, [pc, #144]	; (800a85c <__swsetup_r+0xd8>)
 800a7cc:	429c      	cmp	r4, r3
 800a7ce:	bf08      	it	eq
 800a7d0:	68ec      	ldreq	r4, [r5, #12]
 800a7d2:	e7e6      	b.n	800a7a2 <__swsetup_r+0x1e>
 800a7d4:	0758      	lsls	r0, r3, #29
 800a7d6:	d512      	bpl.n	800a7fe <__swsetup_r+0x7a>
 800a7d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7da:	b141      	cbz	r1, 800a7ee <__swsetup_r+0x6a>
 800a7dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7e0:	4299      	cmp	r1, r3
 800a7e2:	d002      	beq.n	800a7ea <__swsetup_r+0x66>
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7ff fb23 	bl	8009e30 <_free_r>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a7ee:	89a3      	ldrh	r3, [r4, #12]
 800a7f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7f4:	81a3      	strh	r3, [r4, #12]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	6063      	str	r3, [r4, #4]
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	f043 0308 	orr.w	r3, r3, #8
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	6923      	ldr	r3, [r4, #16]
 800a808:	b94b      	cbnz	r3, 800a81e <__swsetup_r+0x9a>
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a814:	d003      	beq.n	800a81e <__swsetup_r+0x9a>
 800a816:	4621      	mov	r1, r4
 800a818:	4630      	mov	r0, r6
 800a81a:	f000 fa09 	bl	800ac30 <__smakebuf_r>
 800a81e:	89a0      	ldrh	r0, [r4, #12]
 800a820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a824:	f010 0301 	ands.w	r3, r0, #1
 800a828:	d00a      	beq.n	800a840 <__swsetup_r+0xbc>
 800a82a:	2300      	movs	r3, #0
 800a82c:	60a3      	str	r3, [r4, #8]
 800a82e:	6963      	ldr	r3, [r4, #20]
 800a830:	425b      	negs	r3, r3
 800a832:	61a3      	str	r3, [r4, #24]
 800a834:	6923      	ldr	r3, [r4, #16]
 800a836:	b943      	cbnz	r3, 800a84a <__swsetup_r+0xc6>
 800a838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a83c:	d1ba      	bne.n	800a7b4 <__swsetup_r+0x30>
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	0781      	lsls	r1, r0, #30
 800a842:	bf58      	it	pl
 800a844:	6963      	ldrpl	r3, [r4, #20]
 800a846:	60a3      	str	r3, [r4, #8]
 800a848:	e7f4      	b.n	800a834 <__swsetup_r+0xb0>
 800a84a:	2000      	movs	r0, #0
 800a84c:	e7f7      	b.n	800a83e <__swsetup_r+0xba>
 800a84e:	bf00      	nop
 800a850:	20000034 	.word	0x20000034
 800a854:	0800b35c 	.word	0x0800b35c
 800a858:	0800b37c 	.word	0x0800b37c
 800a85c:	0800b33c 	.word	0x0800b33c

0800a860 <abort>:
 800a860:	b508      	push	{r3, lr}
 800a862:	2006      	movs	r0, #6
 800a864:	f000 fa54 	bl	800ad10 <raise>
 800a868:	2001      	movs	r0, #1
 800a86a:	f7f9 f9bd 	bl	8003be8 <_exit>
	...

0800a870 <__sflush_r>:
 800a870:	898a      	ldrh	r2, [r1, #12]
 800a872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a876:	4605      	mov	r5, r0
 800a878:	0710      	lsls	r0, r2, #28
 800a87a:	460c      	mov	r4, r1
 800a87c:	d458      	bmi.n	800a930 <__sflush_r+0xc0>
 800a87e:	684b      	ldr	r3, [r1, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	dc05      	bgt.n	800a890 <__sflush_r+0x20>
 800a884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a886:	2b00      	cmp	r3, #0
 800a888:	dc02      	bgt.n	800a890 <__sflush_r+0x20>
 800a88a:	2000      	movs	r0, #0
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a892:	2e00      	cmp	r6, #0
 800a894:	d0f9      	beq.n	800a88a <__sflush_r+0x1a>
 800a896:	2300      	movs	r3, #0
 800a898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a89c:	682f      	ldr	r7, [r5, #0]
 800a89e:	602b      	str	r3, [r5, #0]
 800a8a0:	d032      	beq.n	800a908 <__sflush_r+0x98>
 800a8a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8a4:	89a3      	ldrh	r3, [r4, #12]
 800a8a6:	075a      	lsls	r2, r3, #29
 800a8a8:	d505      	bpl.n	800a8b6 <__sflush_r+0x46>
 800a8aa:	6863      	ldr	r3, [r4, #4]
 800a8ac:	1ac0      	subs	r0, r0, r3
 800a8ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8b0:	b10b      	cbz	r3, 800a8b6 <__sflush_r+0x46>
 800a8b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8b4:	1ac0      	subs	r0, r0, r3
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8bc:	6a21      	ldr	r1, [r4, #32]
 800a8be:	4628      	mov	r0, r5
 800a8c0:	47b0      	blx	r6
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	d106      	bne.n	800a8d6 <__sflush_r+0x66>
 800a8c8:	6829      	ldr	r1, [r5, #0]
 800a8ca:	291d      	cmp	r1, #29
 800a8cc:	d82c      	bhi.n	800a928 <__sflush_r+0xb8>
 800a8ce:	4a2a      	ldr	r2, [pc, #168]	; (800a978 <__sflush_r+0x108>)
 800a8d0:	40ca      	lsrs	r2, r1
 800a8d2:	07d6      	lsls	r6, r2, #31
 800a8d4:	d528      	bpl.n	800a928 <__sflush_r+0xb8>
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	6062      	str	r2, [r4, #4]
 800a8da:	04d9      	lsls	r1, r3, #19
 800a8dc:	6922      	ldr	r2, [r4, #16]
 800a8de:	6022      	str	r2, [r4, #0]
 800a8e0:	d504      	bpl.n	800a8ec <__sflush_r+0x7c>
 800a8e2:	1c42      	adds	r2, r0, #1
 800a8e4:	d101      	bne.n	800a8ea <__sflush_r+0x7a>
 800a8e6:	682b      	ldr	r3, [r5, #0]
 800a8e8:	b903      	cbnz	r3, 800a8ec <__sflush_r+0x7c>
 800a8ea:	6560      	str	r0, [r4, #84]	; 0x54
 800a8ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ee:	602f      	str	r7, [r5, #0]
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	d0ca      	beq.n	800a88a <__sflush_r+0x1a>
 800a8f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8f8:	4299      	cmp	r1, r3
 800a8fa:	d002      	beq.n	800a902 <__sflush_r+0x92>
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f7ff fa97 	bl	8009e30 <_free_r>
 800a902:	2000      	movs	r0, #0
 800a904:	6360      	str	r0, [r4, #52]	; 0x34
 800a906:	e7c1      	b.n	800a88c <__sflush_r+0x1c>
 800a908:	6a21      	ldr	r1, [r4, #32]
 800a90a:	2301      	movs	r3, #1
 800a90c:	4628      	mov	r0, r5
 800a90e:	47b0      	blx	r6
 800a910:	1c41      	adds	r1, r0, #1
 800a912:	d1c7      	bne.n	800a8a4 <__sflush_r+0x34>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0c4      	beq.n	800a8a4 <__sflush_r+0x34>
 800a91a:	2b1d      	cmp	r3, #29
 800a91c:	d001      	beq.n	800a922 <__sflush_r+0xb2>
 800a91e:	2b16      	cmp	r3, #22
 800a920:	d101      	bne.n	800a926 <__sflush_r+0xb6>
 800a922:	602f      	str	r7, [r5, #0]
 800a924:	e7b1      	b.n	800a88a <__sflush_r+0x1a>
 800a926:	89a3      	ldrh	r3, [r4, #12]
 800a928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a92c:	81a3      	strh	r3, [r4, #12]
 800a92e:	e7ad      	b.n	800a88c <__sflush_r+0x1c>
 800a930:	690f      	ldr	r7, [r1, #16]
 800a932:	2f00      	cmp	r7, #0
 800a934:	d0a9      	beq.n	800a88a <__sflush_r+0x1a>
 800a936:	0793      	lsls	r3, r2, #30
 800a938:	680e      	ldr	r6, [r1, #0]
 800a93a:	bf08      	it	eq
 800a93c:	694b      	ldreq	r3, [r1, #20]
 800a93e:	600f      	str	r7, [r1, #0]
 800a940:	bf18      	it	ne
 800a942:	2300      	movne	r3, #0
 800a944:	eba6 0807 	sub.w	r8, r6, r7
 800a948:	608b      	str	r3, [r1, #8]
 800a94a:	f1b8 0f00 	cmp.w	r8, #0
 800a94e:	dd9c      	ble.n	800a88a <__sflush_r+0x1a>
 800a950:	6a21      	ldr	r1, [r4, #32]
 800a952:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a954:	4643      	mov	r3, r8
 800a956:	463a      	mov	r2, r7
 800a958:	4628      	mov	r0, r5
 800a95a:	47b0      	blx	r6
 800a95c:	2800      	cmp	r0, #0
 800a95e:	dc06      	bgt.n	800a96e <__sflush_r+0xfe>
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a966:	81a3      	strh	r3, [r4, #12]
 800a968:	f04f 30ff 	mov.w	r0, #4294967295
 800a96c:	e78e      	b.n	800a88c <__sflush_r+0x1c>
 800a96e:	4407      	add	r7, r0
 800a970:	eba8 0800 	sub.w	r8, r8, r0
 800a974:	e7e9      	b.n	800a94a <__sflush_r+0xda>
 800a976:	bf00      	nop
 800a978:	20400001 	.word	0x20400001

0800a97c <_fflush_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	690b      	ldr	r3, [r1, #16]
 800a980:	4605      	mov	r5, r0
 800a982:	460c      	mov	r4, r1
 800a984:	b913      	cbnz	r3, 800a98c <_fflush_r+0x10>
 800a986:	2500      	movs	r5, #0
 800a988:	4628      	mov	r0, r5
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	b118      	cbz	r0, 800a996 <_fflush_r+0x1a>
 800a98e:	6983      	ldr	r3, [r0, #24]
 800a990:	b90b      	cbnz	r3, 800a996 <_fflush_r+0x1a>
 800a992:	f000 f887 	bl	800aaa4 <__sinit>
 800a996:	4b14      	ldr	r3, [pc, #80]	; (800a9e8 <_fflush_r+0x6c>)
 800a998:	429c      	cmp	r4, r3
 800a99a:	d11b      	bne.n	800a9d4 <_fflush_r+0x58>
 800a99c:	686c      	ldr	r4, [r5, #4]
 800a99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d0ef      	beq.n	800a986 <_fflush_r+0xa>
 800a9a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9a8:	07d0      	lsls	r0, r2, #31
 800a9aa:	d404      	bmi.n	800a9b6 <_fflush_r+0x3a>
 800a9ac:	0599      	lsls	r1, r3, #22
 800a9ae:	d402      	bmi.n	800a9b6 <_fflush_r+0x3a>
 800a9b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9b2:	f000 f915 	bl	800abe0 <__retarget_lock_acquire_recursive>
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	f7ff ff59 	bl	800a870 <__sflush_r>
 800a9be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9c0:	07da      	lsls	r2, r3, #31
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	d4e0      	bmi.n	800a988 <_fflush_r+0xc>
 800a9c6:	89a3      	ldrh	r3, [r4, #12]
 800a9c8:	059b      	lsls	r3, r3, #22
 800a9ca:	d4dd      	bmi.n	800a988 <_fflush_r+0xc>
 800a9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ce:	f000 f908 	bl	800abe2 <__retarget_lock_release_recursive>
 800a9d2:	e7d9      	b.n	800a988 <_fflush_r+0xc>
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <_fflush_r+0x70>)
 800a9d6:	429c      	cmp	r4, r3
 800a9d8:	d101      	bne.n	800a9de <_fflush_r+0x62>
 800a9da:	68ac      	ldr	r4, [r5, #8]
 800a9dc:	e7df      	b.n	800a99e <_fflush_r+0x22>
 800a9de:	4b04      	ldr	r3, [pc, #16]	; (800a9f0 <_fflush_r+0x74>)
 800a9e0:	429c      	cmp	r4, r3
 800a9e2:	bf08      	it	eq
 800a9e4:	68ec      	ldreq	r4, [r5, #12]
 800a9e6:	e7da      	b.n	800a99e <_fflush_r+0x22>
 800a9e8:	0800b35c 	.word	0x0800b35c
 800a9ec:	0800b37c 	.word	0x0800b37c
 800a9f0:	0800b33c 	.word	0x0800b33c

0800a9f4 <std>:
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	b510      	push	{r4, lr}
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	e9c0 3300 	strd	r3, r3, [r0]
 800a9fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa02:	6083      	str	r3, [r0, #8]
 800aa04:	8181      	strh	r1, [r0, #12]
 800aa06:	6643      	str	r3, [r0, #100]	; 0x64
 800aa08:	81c2      	strh	r2, [r0, #14]
 800aa0a:	6183      	str	r3, [r0, #24]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	2208      	movs	r2, #8
 800aa10:	305c      	adds	r0, #92	; 0x5c
 800aa12:	f7fd fb1f 	bl	8008054 <memset>
 800aa16:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <std+0x38>)
 800aa18:	6263      	str	r3, [r4, #36]	; 0x24
 800aa1a:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <std+0x3c>)
 800aa1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa1e:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <std+0x40>)
 800aa20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa22:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <std+0x44>)
 800aa24:	6224      	str	r4, [r4, #32]
 800aa26:	6323      	str	r3, [r4, #48]	; 0x30
 800aa28:	bd10      	pop	{r4, pc}
 800aa2a:	bf00      	nop
 800aa2c:	0800ad49 	.word	0x0800ad49
 800aa30:	0800ad6b 	.word	0x0800ad6b
 800aa34:	0800ada3 	.word	0x0800ada3
 800aa38:	0800adc7 	.word	0x0800adc7

0800aa3c <_cleanup_r>:
 800aa3c:	4901      	ldr	r1, [pc, #4]	; (800aa44 <_cleanup_r+0x8>)
 800aa3e:	f000 b8af 	b.w	800aba0 <_fwalk_reent>
 800aa42:	bf00      	nop
 800aa44:	0800a97d 	.word	0x0800a97d

0800aa48 <__sfmoreglue>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	2268      	movs	r2, #104	; 0x68
 800aa4c:	1e4d      	subs	r5, r1, #1
 800aa4e:	4355      	muls	r5, r2
 800aa50:	460e      	mov	r6, r1
 800aa52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa56:	f7ff fa57 	bl	8009f08 <_malloc_r>
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	b140      	cbz	r0, 800aa70 <__sfmoreglue+0x28>
 800aa5e:	2100      	movs	r1, #0
 800aa60:	e9c0 1600 	strd	r1, r6, [r0]
 800aa64:	300c      	adds	r0, #12
 800aa66:	60a0      	str	r0, [r4, #8]
 800aa68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa6c:	f7fd faf2 	bl	8008054 <memset>
 800aa70:	4620      	mov	r0, r4
 800aa72:	bd70      	pop	{r4, r5, r6, pc}

0800aa74 <__sfp_lock_acquire>:
 800aa74:	4801      	ldr	r0, [pc, #4]	; (800aa7c <__sfp_lock_acquire+0x8>)
 800aa76:	f000 b8b3 	b.w	800abe0 <__retarget_lock_acquire_recursive>
 800aa7a:	bf00      	nop
 800aa7c:	20000701 	.word	0x20000701

0800aa80 <__sfp_lock_release>:
 800aa80:	4801      	ldr	r0, [pc, #4]	; (800aa88 <__sfp_lock_release+0x8>)
 800aa82:	f000 b8ae 	b.w	800abe2 <__retarget_lock_release_recursive>
 800aa86:	bf00      	nop
 800aa88:	20000701 	.word	0x20000701

0800aa8c <__sinit_lock_acquire>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	; (800aa94 <__sinit_lock_acquire+0x8>)
 800aa8e:	f000 b8a7 	b.w	800abe0 <__retarget_lock_acquire_recursive>
 800aa92:	bf00      	nop
 800aa94:	20000702 	.word	0x20000702

0800aa98 <__sinit_lock_release>:
 800aa98:	4801      	ldr	r0, [pc, #4]	; (800aaa0 <__sinit_lock_release+0x8>)
 800aa9a:	f000 b8a2 	b.w	800abe2 <__retarget_lock_release_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	20000702 	.word	0x20000702

0800aaa4 <__sinit>:
 800aaa4:	b510      	push	{r4, lr}
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	f7ff fff0 	bl	800aa8c <__sinit_lock_acquire>
 800aaac:	69a3      	ldr	r3, [r4, #24]
 800aaae:	b11b      	cbz	r3, 800aab8 <__sinit+0x14>
 800aab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aab4:	f7ff bff0 	b.w	800aa98 <__sinit_lock_release>
 800aab8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aabc:	6523      	str	r3, [r4, #80]	; 0x50
 800aabe:	4b13      	ldr	r3, [pc, #76]	; (800ab0c <__sinit+0x68>)
 800aac0:	4a13      	ldr	r2, [pc, #76]	; (800ab10 <__sinit+0x6c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	62a2      	str	r2, [r4, #40]	; 0x28
 800aac6:	42a3      	cmp	r3, r4
 800aac8:	bf04      	itt	eq
 800aaca:	2301      	moveq	r3, #1
 800aacc:	61a3      	streq	r3, [r4, #24]
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 f820 	bl	800ab14 <__sfp>
 800aad4:	6060      	str	r0, [r4, #4]
 800aad6:	4620      	mov	r0, r4
 800aad8:	f000 f81c 	bl	800ab14 <__sfp>
 800aadc:	60a0      	str	r0, [r4, #8]
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 f818 	bl	800ab14 <__sfp>
 800aae4:	2200      	movs	r2, #0
 800aae6:	60e0      	str	r0, [r4, #12]
 800aae8:	2104      	movs	r1, #4
 800aaea:	6860      	ldr	r0, [r4, #4]
 800aaec:	f7ff ff82 	bl	800a9f4 <std>
 800aaf0:	68a0      	ldr	r0, [r4, #8]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	2109      	movs	r1, #9
 800aaf6:	f7ff ff7d 	bl	800a9f4 <std>
 800aafa:	68e0      	ldr	r0, [r4, #12]
 800aafc:	2202      	movs	r2, #2
 800aafe:	2112      	movs	r1, #18
 800ab00:	f7ff ff78 	bl	800a9f4 <std>
 800ab04:	2301      	movs	r3, #1
 800ab06:	61a3      	str	r3, [r4, #24]
 800ab08:	e7d2      	b.n	800aab0 <__sinit+0xc>
 800ab0a:	bf00      	nop
 800ab0c:	0800afc0 	.word	0x0800afc0
 800ab10:	0800aa3d 	.word	0x0800aa3d

0800ab14 <__sfp>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	4607      	mov	r7, r0
 800ab18:	f7ff ffac 	bl	800aa74 <__sfp_lock_acquire>
 800ab1c:	4b1e      	ldr	r3, [pc, #120]	; (800ab98 <__sfp+0x84>)
 800ab1e:	681e      	ldr	r6, [r3, #0]
 800ab20:	69b3      	ldr	r3, [r6, #24]
 800ab22:	b913      	cbnz	r3, 800ab2a <__sfp+0x16>
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7ff ffbd 	bl	800aaa4 <__sinit>
 800ab2a:	3648      	adds	r6, #72	; 0x48
 800ab2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	d503      	bpl.n	800ab3c <__sfp+0x28>
 800ab34:	6833      	ldr	r3, [r6, #0]
 800ab36:	b30b      	cbz	r3, 800ab7c <__sfp+0x68>
 800ab38:	6836      	ldr	r6, [r6, #0]
 800ab3a:	e7f7      	b.n	800ab2c <__sfp+0x18>
 800ab3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab40:	b9d5      	cbnz	r5, 800ab78 <__sfp+0x64>
 800ab42:	4b16      	ldr	r3, [pc, #88]	; (800ab9c <__sfp+0x88>)
 800ab44:	60e3      	str	r3, [r4, #12]
 800ab46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab4a:	6665      	str	r5, [r4, #100]	; 0x64
 800ab4c:	f000 f847 	bl	800abde <__retarget_lock_init_recursive>
 800ab50:	f7ff ff96 	bl	800aa80 <__sfp_lock_release>
 800ab54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab5c:	6025      	str	r5, [r4, #0]
 800ab5e:	61a5      	str	r5, [r4, #24]
 800ab60:	2208      	movs	r2, #8
 800ab62:	4629      	mov	r1, r5
 800ab64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab68:	f7fd fa74 	bl	8008054 <memset>
 800ab6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab74:	4620      	mov	r0, r4
 800ab76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab78:	3468      	adds	r4, #104	; 0x68
 800ab7a:	e7d9      	b.n	800ab30 <__sfp+0x1c>
 800ab7c:	2104      	movs	r1, #4
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f7ff ff62 	bl	800aa48 <__sfmoreglue>
 800ab84:	4604      	mov	r4, r0
 800ab86:	6030      	str	r0, [r6, #0]
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d1d5      	bne.n	800ab38 <__sfp+0x24>
 800ab8c:	f7ff ff78 	bl	800aa80 <__sfp_lock_release>
 800ab90:	230c      	movs	r3, #12
 800ab92:	603b      	str	r3, [r7, #0]
 800ab94:	e7ee      	b.n	800ab74 <__sfp+0x60>
 800ab96:	bf00      	nop
 800ab98:	0800afc0 	.word	0x0800afc0
 800ab9c:	ffff0001 	.word	0xffff0001

0800aba0 <_fwalk_reent>:
 800aba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba4:	4606      	mov	r6, r0
 800aba6:	4688      	mov	r8, r1
 800aba8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abac:	2700      	movs	r7, #0
 800abae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abb2:	f1b9 0901 	subs.w	r9, r9, #1
 800abb6:	d505      	bpl.n	800abc4 <_fwalk_reent+0x24>
 800abb8:	6824      	ldr	r4, [r4, #0]
 800abba:	2c00      	cmp	r4, #0
 800abbc:	d1f7      	bne.n	800abae <_fwalk_reent+0xe>
 800abbe:	4638      	mov	r0, r7
 800abc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc4:	89ab      	ldrh	r3, [r5, #12]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d907      	bls.n	800abda <_fwalk_reent+0x3a>
 800abca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abce:	3301      	adds	r3, #1
 800abd0:	d003      	beq.n	800abda <_fwalk_reent+0x3a>
 800abd2:	4629      	mov	r1, r5
 800abd4:	4630      	mov	r0, r6
 800abd6:	47c0      	blx	r8
 800abd8:	4307      	orrs	r7, r0
 800abda:	3568      	adds	r5, #104	; 0x68
 800abdc:	e7e9      	b.n	800abb2 <_fwalk_reent+0x12>

0800abde <__retarget_lock_init_recursive>:
 800abde:	4770      	bx	lr

0800abe0 <__retarget_lock_acquire_recursive>:
 800abe0:	4770      	bx	lr

0800abe2 <__retarget_lock_release_recursive>:
 800abe2:	4770      	bx	lr

0800abe4 <__swhatbuf_r>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	460e      	mov	r6, r1
 800abe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abec:	2900      	cmp	r1, #0
 800abee:	b096      	sub	sp, #88	; 0x58
 800abf0:	4614      	mov	r4, r2
 800abf2:	461d      	mov	r5, r3
 800abf4:	da08      	bge.n	800ac08 <__swhatbuf_r+0x24>
 800abf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	602a      	str	r2, [r5, #0]
 800abfe:	061a      	lsls	r2, r3, #24
 800ac00:	d410      	bmi.n	800ac24 <__swhatbuf_r+0x40>
 800ac02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac06:	e00e      	b.n	800ac26 <__swhatbuf_r+0x42>
 800ac08:	466a      	mov	r2, sp
 800ac0a:	f000 f903 	bl	800ae14 <_fstat_r>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	dbf1      	blt.n	800abf6 <__swhatbuf_r+0x12>
 800ac12:	9a01      	ldr	r2, [sp, #4]
 800ac14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac1c:	425a      	negs	r2, r3
 800ac1e:	415a      	adcs	r2, r3
 800ac20:	602a      	str	r2, [r5, #0]
 800ac22:	e7ee      	b.n	800ac02 <__swhatbuf_r+0x1e>
 800ac24:	2340      	movs	r3, #64	; 0x40
 800ac26:	2000      	movs	r0, #0
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	b016      	add	sp, #88	; 0x58
 800ac2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac30 <__smakebuf_r>:
 800ac30:	898b      	ldrh	r3, [r1, #12]
 800ac32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac34:	079d      	lsls	r5, r3, #30
 800ac36:	4606      	mov	r6, r0
 800ac38:	460c      	mov	r4, r1
 800ac3a:	d507      	bpl.n	800ac4c <__smakebuf_r+0x1c>
 800ac3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	6123      	str	r3, [r4, #16]
 800ac44:	2301      	movs	r3, #1
 800ac46:	6163      	str	r3, [r4, #20]
 800ac48:	b002      	add	sp, #8
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	ab01      	add	r3, sp, #4
 800ac4e:	466a      	mov	r2, sp
 800ac50:	f7ff ffc8 	bl	800abe4 <__swhatbuf_r>
 800ac54:	9900      	ldr	r1, [sp, #0]
 800ac56:	4605      	mov	r5, r0
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff f955 	bl	8009f08 <_malloc_r>
 800ac5e:	b948      	cbnz	r0, 800ac74 <__smakebuf_r+0x44>
 800ac60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac64:	059a      	lsls	r2, r3, #22
 800ac66:	d4ef      	bmi.n	800ac48 <__smakebuf_r+0x18>
 800ac68:	f023 0303 	bic.w	r3, r3, #3
 800ac6c:	f043 0302 	orr.w	r3, r3, #2
 800ac70:	81a3      	strh	r3, [r4, #12]
 800ac72:	e7e3      	b.n	800ac3c <__smakebuf_r+0xc>
 800ac74:	4b0d      	ldr	r3, [pc, #52]	; (800acac <__smakebuf_r+0x7c>)
 800ac76:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	6020      	str	r0, [r4, #0]
 800ac7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	9b00      	ldr	r3, [sp, #0]
 800ac84:	6163      	str	r3, [r4, #20]
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	6120      	str	r0, [r4, #16]
 800ac8a:	b15b      	cbz	r3, 800aca4 <__smakebuf_r+0x74>
 800ac8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac90:	4630      	mov	r0, r6
 800ac92:	f000 f8d1 	bl	800ae38 <_isatty_r>
 800ac96:	b128      	cbz	r0, 800aca4 <__smakebuf_r+0x74>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f023 0303 	bic.w	r3, r3, #3
 800ac9e:	f043 0301 	orr.w	r3, r3, #1
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	89a0      	ldrh	r0, [r4, #12]
 800aca6:	4305      	orrs	r5, r0
 800aca8:	81a5      	strh	r5, [r4, #12]
 800acaa:	e7cd      	b.n	800ac48 <__smakebuf_r+0x18>
 800acac:	0800aa3d 	.word	0x0800aa3d

0800acb0 <_malloc_usable_size_r>:
 800acb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb4:	1f18      	subs	r0, r3, #4
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	bfbc      	itt	lt
 800acba:	580b      	ldrlt	r3, [r1, r0]
 800acbc:	18c0      	addlt	r0, r0, r3
 800acbe:	4770      	bx	lr

0800acc0 <_raise_r>:
 800acc0:	291f      	cmp	r1, #31
 800acc2:	b538      	push	{r3, r4, r5, lr}
 800acc4:	4604      	mov	r4, r0
 800acc6:	460d      	mov	r5, r1
 800acc8:	d904      	bls.n	800acd4 <_raise_r+0x14>
 800acca:	2316      	movs	r3, #22
 800accc:	6003      	str	r3, [r0, #0]
 800acce:	f04f 30ff 	mov.w	r0, #4294967295
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acd6:	b112      	cbz	r2, 800acde <_raise_r+0x1e>
 800acd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acdc:	b94b      	cbnz	r3, 800acf2 <_raise_r+0x32>
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 f830 	bl	800ad44 <_getpid_r>
 800ace4:	462a      	mov	r2, r5
 800ace6:	4601      	mov	r1, r0
 800ace8:	4620      	mov	r0, r4
 800acea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acee:	f000 b817 	b.w	800ad20 <_kill_r>
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d00a      	beq.n	800ad0c <_raise_r+0x4c>
 800acf6:	1c59      	adds	r1, r3, #1
 800acf8:	d103      	bne.n	800ad02 <_raise_r+0x42>
 800acfa:	2316      	movs	r3, #22
 800acfc:	6003      	str	r3, [r0, #0]
 800acfe:	2001      	movs	r0, #1
 800ad00:	e7e7      	b.n	800acd2 <_raise_r+0x12>
 800ad02:	2400      	movs	r4, #0
 800ad04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad08:	4628      	mov	r0, r5
 800ad0a:	4798      	blx	r3
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	e7e0      	b.n	800acd2 <_raise_r+0x12>

0800ad10 <raise>:
 800ad10:	4b02      	ldr	r3, [pc, #8]	; (800ad1c <raise+0xc>)
 800ad12:	4601      	mov	r1, r0
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f7ff bfd3 	b.w	800acc0 <_raise_r>
 800ad1a:	bf00      	nop
 800ad1c:	20000034 	.word	0x20000034

0800ad20 <_kill_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d07      	ldr	r5, [pc, #28]	; (800ad40 <_kill_r+0x20>)
 800ad24:	2300      	movs	r3, #0
 800ad26:	4604      	mov	r4, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	602b      	str	r3, [r5, #0]
 800ad2e:	f7f8 ff4b 	bl	8003bc8 <_kill>
 800ad32:	1c43      	adds	r3, r0, #1
 800ad34:	d102      	bne.n	800ad3c <_kill_r+0x1c>
 800ad36:	682b      	ldr	r3, [r5, #0]
 800ad38:	b103      	cbz	r3, 800ad3c <_kill_r+0x1c>
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	bd38      	pop	{r3, r4, r5, pc}
 800ad3e:	bf00      	nop
 800ad40:	200006fc 	.word	0x200006fc

0800ad44 <_getpid_r>:
 800ad44:	f7f8 bf38 	b.w	8003bb8 <_getpid>

0800ad48 <__sread>:
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad50:	f000 f894 	bl	800ae7c <_read_r>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	bfab      	itete	ge
 800ad58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad5c:	181b      	addge	r3, r3, r0
 800ad5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad62:	bfac      	ite	ge
 800ad64:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad66:	81a3      	strhlt	r3, [r4, #12]
 800ad68:	bd10      	pop	{r4, pc}

0800ad6a <__swrite>:
 800ad6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6e:	461f      	mov	r7, r3
 800ad70:	898b      	ldrh	r3, [r1, #12]
 800ad72:	05db      	lsls	r3, r3, #23
 800ad74:	4605      	mov	r5, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	4616      	mov	r6, r2
 800ad7a:	d505      	bpl.n	800ad88 <__swrite+0x1e>
 800ad7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad80:	2302      	movs	r3, #2
 800ad82:	2200      	movs	r2, #0
 800ad84:	f000 f868 	bl	800ae58 <_lseek_r>
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad92:	81a3      	strh	r3, [r4, #12]
 800ad94:	4632      	mov	r2, r6
 800ad96:	463b      	mov	r3, r7
 800ad98:	4628      	mov	r0, r5
 800ad9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9e:	f000 b817 	b.w	800add0 <_write_r>

0800ada2 <__sseek>:
 800ada2:	b510      	push	{r4, lr}
 800ada4:	460c      	mov	r4, r1
 800ada6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adaa:	f000 f855 	bl	800ae58 <_lseek_r>
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	bf15      	itete	ne
 800adb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800adb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adbe:	81a3      	strheq	r3, [r4, #12]
 800adc0:	bf18      	it	ne
 800adc2:	81a3      	strhne	r3, [r4, #12]
 800adc4:	bd10      	pop	{r4, pc}

0800adc6 <__sclose>:
 800adc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adca:	f000 b813 	b.w	800adf4 <_close_r>
	...

0800add0 <_write_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d07      	ldr	r5, [pc, #28]	; (800adf0 <_write_r+0x20>)
 800add4:	4604      	mov	r4, r0
 800add6:	4608      	mov	r0, r1
 800add8:	4611      	mov	r1, r2
 800adda:	2200      	movs	r2, #0
 800addc:	602a      	str	r2, [r5, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	f7f8 ff29 	bl	8003c36 <_write>
 800ade4:	1c43      	adds	r3, r0, #1
 800ade6:	d102      	bne.n	800adee <_write_r+0x1e>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	b103      	cbz	r3, 800adee <_write_r+0x1e>
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	200006fc 	.word	0x200006fc

0800adf4 <_close_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4d06      	ldr	r5, [pc, #24]	; (800ae10 <_close_r+0x1c>)
 800adf8:	2300      	movs	r3, #0
 800adfa:	4604      	mov	r4, r0
 800adfc:	4608      	mov	r0, r1
 800adfe:	602b      	str	r3, [r5, #0]
 800ae00:	f7f8 ff35 	bl	8003c6e <_close>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_close_r+0x1a>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_close_r+0x1a>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	200006fc 	.word	0x200006fc

0800ae14 <_fstat_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4d07      	ldr	r5, [pc, #28]	; (800ae34 <_fstat_r+0x20>)
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	4611      	mov	r1, r2
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	f7f8 ff30 	bl	8003c86 <_fstat>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	d102      	bne.n	800ae30 <_fstat_r+0x1c>
 800ae2a:	682b      	ldr	r3, [r5, #0]
 800ae2c:	b103      	cbz	r3, 800ae30 <_fstat_r+0x1c>
 800ae2e:	6023      	str	r3, [r4, #0]
 800ae30:	bd38      	pop	{r3, r4, r5, pc}
 800ae32:	bf00      	nop
 800ae34:	200006fc 	.word	0x200006fc

0800ae38 <_isatty_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d06      	ldr	r5, [pc, #24]	; (800ae54 <_isatty_r+0x1c>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	602b      	str	r3, [r5, #0]
 800ae44:	f7f8 ff2f 	bl	8003ca6 <_isatty>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_isatty_r+0x1a>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_isatty_r+0x1a>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	200006fc 	.word	0x200006fc

0800ae58 <_lseek_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d07      	ldr	r5, [pc, #28]	; (800ae78 <_lseek_r+0x20>)
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	4608      	mov	r0, r1
 800ae60:	4611      	mov	r1, r2
 800ae62:	2200      	movs	r2, #0
 800ae64:	602a      	str	r2, [r5, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	f7f8 ff28 	bl	8003cbc <_lseek>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_lseek_r+0x1e>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_lseek_r+0x1e>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	200006fc 	.word	0x200006fc

0800ae7c <_read_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d07      	ldr	r5, [pc, #28]	; (800ae9c <_read_r+0x20>)
 800ae80:	4604      	mov	r4, r0
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	2200      	movs	r2, #0
 800ae88:	602a      	str	r2, [r5, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f7f8 feb6 	bl	8003bfc <_read>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_read_r+0x1e>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_read_r+0x1e>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	200006fc 	.word	0x200006fc

0800aea0 <_init>:
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	bf00      	nop
 800aea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea6:	bc08      	pop	{r3}
 800aea8:	469e      	mov	lr, r3
 800aeaa:	4770      	bx	lr

0800aeac <_fini>:
 800aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeae:	bf00      	nop
 800aeb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb2:	bc08      	pop	{r3}
 800aeb4:	469e      	mov	lr, r3
 800aeb6:	4770      	bx	lr
